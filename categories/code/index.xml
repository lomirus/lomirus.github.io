<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Code on Lomirus' Site</title><link>https://lomirus.github.io/categories/code/</link><description>Recent content in Code on Lomirus' Site</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 20 Jul 2021 00:00:00 +0800</lastBuildDate><atom:link href="https://lomirus.github.io/categories/code/index.xml" rel="self" type="application/rss+xml"/><item><title>Customize the Manjaro with Gnome</title><link>https://lomirus.github.io/p/customize-manjaro/</link><pubDate>Tue, 20 Jul 2021 00:00:00 +0800</pubDate><guid>https://lomirus.github.io/p/customize-manjaro/</guid><description>When I started to write the article, I haven&amp;rsquo;t install the Chinese Input Method, and therefore I just completed it in English.
Foreword I&amp;rsquo;ve used Windows OS for a long time. I can still remember that when I was at the junior high school student, it&amp;rsquo;s 2015. I was still a fan to Microsoft at that time, and it&amp;rsquo;s also that year, that the Windows 10 was released. I was so excited but I didn&amp;rsquo;t have a PC then that could reach the lowest requirement of Windows 10.</description></item><item><title>WSL 2 入门使用与踩坑记录</title><link>https://lomirus.github.io/p/wsl2/</link><pubDate>Fri, 28 May 2021 00:00:00 +0800</pubDate><guid>https://lomirus.github.io/p/wsl2/</guid><description>起因 最近我用 rust 写了个 shogi game. 考虑到性能优化及用户体验，控制台采用 raw mode 进行渲染。结果发现兼容性不是很好，在各种 shell/terminal 上表现不尽相同。而在字体渲染上，有一说一，除了 Windows Terminal 其余的都是辣鸡。
我（之前）平常最常用的 shell 是 Git Bash，但是正如前文所言，界面着实拉跨；而使用 Windows Terminal 打开 Git Bash 时，按退格键时又会出现闪烁现象。最终忍无可忍，于是把这些 bash/shell 全都拉出来批判一番：
CMD: 费拉不堪 Powershell：费拉不堪 Gitbash: 费拉不堪 由于 Windows 上的 shell 人均费拉不堪，所以问了一位后端朋(dà)友(lǎo)有没有什么推荐：
2FXjHS.jpg
结果发现人家对 shell 根本就不像我这么挑剔😂，不过也可能确实是受方向影响。因为毕竟后端首先在 Windows 方面上有成熟的 Goland IDE，确实一般情况下用不到控制台，用到终端的话一般就都是在服务器上了，而服务器则一般都是用的 Linux，所以通常没啥顾虑。而我等苦逼前端菜鸡还是要经常和各种 CLI 打交道的，所以最好还是去找一款优秀的终端软件。
然后最终选定了 WSL 2 + Windows Terminal + VSCode.
安装 如果 Windows 10 OS Version 大于 20262，可通过 wsl --install 安装。</description></item><item><title>Vue &amp; Vite 项目搭建入门</title><link>https://lomirus.github.io/p/vue-vite-start/</link><pubDate>Sat, 22 May 2021 18:25:17 +0800</pubDate><guid>https://lomirus.github.io/p/vue-vite-start/</guid><description>学习 Vue 与 Vite 项目搭建的踩坑记录 Vue 2.0 + Webpack Installation 虽然 Vue 的最新版已经是 3.0，而且 Vite 也似乎是大势所趋，不过我还是选择了先从 Vue 2.0 + Webpack 这种比较传统的方式开始学习。主要是因为这几个方面：
现在仍有许多项目没有从 Vue 2.0 迁移到 3.0，使用 Vue 2.0 进行开发在实际生产中还是比较常见的，所以以后还可能会用到 2.0； Vue 2.0 的资料相对比较多，踩坑时更容易查到资料； 学习 2.0 之后再学习 3.0，会对 3.0 的改进有更深的体会，比如能够切身体会到 Vue 3.0 为什么这么那么设计、这样设计有什么好处、它解决了哪些痛处与弊端等； 入门曲线相对平缓。 好了，前言就先讲到这里，接下来进入正题。
首先创建项目：
$ mkdir vue-learning $ cd vue-learning $ npm init -y 接着安装相关库：
$ npm install -D webpack webpack-cli webpack-dev-server html-webpack-plugin $ npm install vue 创建相关文件，创建后的目录结构：</description></item><item><title>TypeScript &amp; Webpack &amp; Babel &amp; Eslint &amp; React: Not Such a Beautiful Marriage</title><link>https://lomirus.github.io/p/not-such-a-beautiful-marriage/</link><pubDate>Wed, 14 Apr 2021 00:00:00 +0800</pubDate><guid>https://lomirus.github.io/p/not-such-a-beautiful-marriage/</guid><description>好吧，我承认我有点标题党，主要是因为我最近被这几个工具折腾的不轻，所以想吐槽一下。（顺带一提，标题抄袭引用改编自著名博文TypeScript with Babel: A Beautiful Marriage）
Origin 看了下 cqupt-help-mp 的源码，发现里面用了许多库。感觉自己对这些工具还不太熟练，所以想先趁机练习一下。
对于题目中的五个工具，除去 ESlint之外，其实其他的都多多少少用过一段时间。特别是 Webpack Babel React 这三个，用的时间也算是比较久了。TypeScript 倒是用过，但是感觉 JS 加上类型限制后写起来就不那么自由了，所以尝试用它写了一个模块之后就将它卸载了。但是这些这个工具终究还是太常用，早晚逃不了还是得学，所以就试着用它们做个简单的小项目练练手。毕竟当初我学 Webpack 时也是学得很憋屈，一直不知道这玩意儿打个包为啥还非得用 js 文件做入口，直到后来学了 React 才豁然开朗，所以我至今认为如果是要做跑在浏览器的网页而且不用什么框架的话 Webpack 还真没什么卵用。当然，有了之后自然用处就大了。
不过说了这么多好像有点跑题，先回到正题：让我们来讨论一下究竟怎么把这五个架子给支楞到一块儿去。
Introductions of the packages 这种东西还用得着在这介绍？官网文档，维基百科，请~
TSC or Babel, it&amp;rsquo;s a question. 老实说，单是在两个之间进行选择就够让我想半天了。但是实际上，摆在我面前的包括但不限于：ts-loader,awesome-typescript-loader, babel-loader等一堆loaders/packages。而且由于我开始参考了过时的中文文档，所以先下载了awesome-typescript-loader，后来才意识到被坑（😅）。而在剩余的两者之间，参考TypeScript with Babel: A Beautiful Marriage后，决定选择了后者。
安装好之后，我又顺着我的思路捋了一遍，发现整个过程中编译是babel做的，根本没用到typescript什么事儿呀。我于是就想，把它卸载之后会怎么样呢？接着神奇的现象发生了，我卸载了typescipt，删除了它的配置文件tsconfig.json，结果发现我的用typescript写的项目居然还能正常编译并运行（谢谢有被震惊到）。我就想既然如此那我还用ts干啥呀，赶紧卸了得了，可别再让我见着你了（😅）。
Anti-human ESLint 听说 ESLint 可以用在团队协作中来保证代码风格的一致性？好，名单赶紧安排上，加急。
安装过程中被问了几个问题，回答之后他给我推荐了几个插件。行，听您的。选择 YES，进行安装。看起来一切顺利，然后&amp;hellip;果不其然，报错了。报啥呢：
Oops! Something went wrong! :(
ESLint: 7.24.0
Error: An error occurred while generating your JavaScript config file.</description></item></channel></rss>