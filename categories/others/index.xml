<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Others on Lomirus' Site</title><link>https://lomirus.github.io/categories/others/</link><description>Recent content in Others on Lomirus' Site</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 05 Sep 2022 00:00:00 +0800</lastBuildDate><atom:link href="https://lomirus.github.io/categories/others/index.xml" rel="self" type="application/rss+xml"/><item><title>置身事外的惩戒者与千夫所指的受害者</title><link>https://lomirus.github.io/p/mirus-effect/</link><pubDate>Mon, 05 Sep 2022 00:00:00 +0800</pubDate><guid>https://lomirus.github.io/p/mirus-effect/</guid><description>&lt;img src="https://lomirus.github.io/p/mirus-effect/cover.webp" alt="Featured image of post 置身事外的惩戒者与千夫所指的受害者" />&lt;h2 id="两种奴隶">两种奴隶&lt;/h2>
&lt;p>记得挺久之前看过一副漫画，漫画的内容被分成两页作为对比。在第一页里，图片里的主人对他的奴隶说，如果自己路边的那条狗再叫下去，就要去打奴隶。奴隶被打后，于是怪罪主人旁边的那条狗。而在另一张图里，奴隶被打后，却终究忍无可忍，于是提手打向他的主人。&lt;/p>
&lt;p>可惜当时这张图没有保存下来，幸而记得还记得大概的印象。前几天又读到了鲁迅的《聪明人、奴才和傻子》，今天回想起来，于是我尝试着模仿鲁迅的文笔，将漫画里所描述的现象改写成了下面这段文字：&lt;/p>
&lt;h2 id="行人和老爷">行人和老爷&lt;/h2>
&lt;blockquote>
&lt;p>譬如老爷看到过路的行人，突然对著他的仆人，惨然说：“若是他再这样走下去，我也只好无奈打你两个嘴巴了。”行人听闻后，不管，依旧是向前走著。仆人于是终而至于被打。&lt;/p>
&lt;p>“混账”，仆人对行人骂道，“倘你听了老爷的话，我哪里会遭打。”&lt;/p>
&lt;p>“你说甚么？你这奴才&amp;hellip;”，行人回过头，直走过来，也是冲著仆人连打了两个嘴巴，“你的老爷打了你，倒反怪罪到我 ，真不像样&amp;hellip;&amp;hellip;”&lt;/p>
&lt;p>仆人不开口，想往后退了，于是轮转眼睛去看老爷。&lt;/p>
&lt;p>老爷看著仆人遭打，却只是发笑。&lt;/p>
&lt;/blockquote>
&lt;h2 id="一种现象">一种现象&lt;/h2>
&lt;p>我一直觉得这似乎是一种在生活中很常见的现象。尽管他从逻辑上来看却又极其的荒谬。&lt;/p>
&lt;p>我相信，对于在国内上过学的人，基本都会遇到过这种现象。有时老师会说，如果班里哪个人没有完成作业，全班同学就要受到什么处罚。于是后面，学生就会去怪罪那名没有完成任务的学生，却忽视了这个惩罚是由老师直接决定并实施的。&lt;/p>
&lt;p>其他类似的例子，大小皆有，此处不一一论述了。&lt;/p>
&lt;p>归纳成现象阐述的话，可以这么简述：&lt;/p>
&lt;blockquote>
&lt;p>A 向 B 提出一个条件，若条件未达成则向 B 施加惩罚。
然而，此条件所要求的实施者 C 是某个在客观上本身并不具有触发该惩罚能力的人或群体。
若条件未达成，则使得 B 在主观上将矛盾转移到（甚至同是受害者的） C 上，却忽略了 A 才是惩罚的最终决策者兼实施者。&lt;/p>
&lt;/blockquote>
&lt;p>我写完上面那篇故事，拿着去问了我一个朋友，问他这种现象/效应是否有什么命名，可惜最后我们终于还是没有找到。&lt;/p>
&lt;p>或许可以叫 Mirus Effect / 米莱斯效应？（笑）&lt;/p></description></item><item><title>Some Impressions (2021-08)</title><link>https://lomirus.github.io/p/2021-08/</link><pubDate>Thu, 05 Aug 2021 18:25:17 +0800</pubDate><guid>https://lomirus.github.io/p/2021-08/</guid><description>&lt;h2 id="一">一&lt;/h2>
&lt;p>自上次期中总结过去也差不多两个月了，期末考试也已经过去了一个月，按说我早该动手这篇文章了，但实际上却迟迟没有动笔。这并不是说我没有时间如何如何，只是我变的愈发懒散了，于是乎便少了份写博客的动力。&lt;/p>
&lt;p>回忆起我之前每次写博客，无非是想去说什么什么，却无处施展，于是便到自己的博客上胡绉。既然如此，那每次博文的开头便少不了牢骚抱怨。每当自己去浏览自己的旧文，便发觉自己只是一个丧丧的駄目人間，不免心生愧意：将自己如此劣质的文字公诸网路，实属制造垃圾资源。又“于是乎”地，废弃了自己的博客。而这正是我上一个博客的结局。&lt;/p>
&lt;p>但是，有时候确实有些东西不吐不快。长久地将烦闷郁结在心中，绝然不能称之为一个好习惯。如此向来，将自己的博客作为自己倾吐不快的垃圾场，也算是物尽其用了。&lt;/p>
&lt;p>而今天之所以动笔，也自然是因为自己心中有所郁结，不得通其道，故述往事，思来者。&lt;/p>
&lt;h2 id="二">二&lt;/h2>
&lt;p>从暑假开始计算，我们先是度过了一个毫无意义的军训。哦不对，话其实也不能这么说，因为其一，军训的存在令我厌恶，这也可以算是它的意义；其二，总有一些人居高临下，颐指气使的斥责鄙夷这那些吐槽军训的学生，这样看来，它们想必很热爱军训吧！毕竟军训也是福报不是？&lt;/p>
&lt;p>军训结束，我们搬迁了宿舍，搬迁宿舍本身没啥，反正我也我待了一年的舍友也没什么感情。另外虽说是“自由组队”，却还是组合到了有至少三个陌生同学的宿舍。&lt;/p>
&lt;p>然后是大约一周多的自由时间，就用来一边开发项目，一边继续学习 Vue。&lt;/p>
&lt;p>最后是为期一个月的暑期培训，截至写到本文的此段时，已过五天。这五天，则一直是在忙于开发《学长学姐帮帮忙》了。&lt;/p>
&lt;p>其间我的一位朋友问过我一个问题，他问，你如何判断一个开发者的能力高低？就拿前端来说，你的能力与开发多年的前端大佬有哪些区别？&lt;/p>
&lt;p>这个问题确实有点把我问住了。我便凭感觉回答道，可能是对一些框架的掌握和原生API的熟练程度吧。&lt;/p>
&lt;p>但是他则认为，只会用框架调接口未免太“脚本小子”了。我无法反驳，尽管实际上，大多数开发岗也无非都是做着搬砖的活。&lt;/p>
&lt;p>这是他的第一次问我这个问题，后面也有第二次提问。&lt;/p>
&lt;p>不过在他上次提问过后，我回去后其实也并没有进行过多的深入思考。但我还是尝试给出了与上次不同的答案。&lt;/p>
&lt;p>这次我提到了一个人的知识面的广度，譬如我个人，虽说只是一名切图仔，但是在其他方面也多有涉猎，倘以我们网校的部门举例，我首先是本来就在后端待过半年，在 SRE 也学习过一段时间，开发过一些 Android Apps，甚至还尝试学习像素画（这条还是忽略吧）。我个人以为，在网校范围内，前端本身（特指大前端/全栈）可能是仅次于运维的全栈部门了。&lt;/p>
&lt;p>不过这样的我其实也有一些问题：接触的挺多，深入的却很少。前端本身各种轮子层出不穷，更新迭代很快。真正喜欢前端的人，也常常痴迷于新技术。最近我在网校讲授了一节前端框架相关的课，讲到 TypeScript 时，顺口提了一下 Deno。而学员里有个同学和一勤奋蜂的前端学长聊天时提到了这个，于是勤奋蜂的那位学长便表示想和我聊一下天。那天，我们聊了许多。他也是喜欢新生技术的人。他说，他想要在 WebGL，WASM，Deno 里面的选择一个去深入学习。说来惭愧，虽然我对这些都早有耳闻，但却没有一个能称得上是比较深入了解的。我们网校的学姐也说过我们，喜欢新技术很好，但不要每次都是写了一个 Hello World 之后就扔一边儿了。而彼时，我也正如其所言，丢掉了刚做完一个 Hello World 的 Tarui。&lt;/p>
&lt;h2 id="三">三&lt;/h2>
&lt;p>我感觉自己似乎处在某个瓶颈期，基础知识学得都差不多了，但是每当面对浩如烟海的前端进阶内容，却不知从何学起。也许刚踏入大学时，我还算比较有优势。但是随着时间的推移，我逐渐发现自己的优势正在逐渐消逝，泯然众人。我几乎已经很难说出在某个领域能够完胜其他学员了。&lt;/p>
&lt;p>但是学长却说，我们这个阶段恰好是最容易提升的时期。&lt;/p>
&lt;p>仔细想想，其实好像也对，我们现在的能力，也足以支撑我们去学习新的知识、独立开发项目和参与开源社区之类的了。&lt;/p>
&lt;p>正如狄更斯所言：&lt;/p>
&lt;blockquote>
&lt;p>It was the best of times, it was the worst of times.&lt;/p>
&lt;/blockquote>
&lt;h2 id="四">四&lt;/h2>
&lt;p>上面大部分都还是技术方面的内容，周期总结也可以算是我的 routine 了。但其实，都并非我我写这篇文章的直接原因。&lt;/p>
&lt;p>直接原因也很简单，便是见到了某个人，使我回想起了某些事，以及随之而来的一系列巧合，让我再次怀疑世界的真实性。&lt;/p>
&lt;p>这种感觉，估计得追溯到初中，从我的 depression 开始。&lt;/p>
&lt;p>我似乎每个寒假都不会有什么好事儿，尽管坏事儿也都不一定是在寒假。&lt;/p>
&lt;p>有些事我希望它能够从未发生过，例如上次。但也有些事，例如初中的某次寒假，我对它的记忆其实很模糊，因为我曾竭力试图将其忘记，它使得我第一次对世界与自身的存在的意义产生怀疑；但是现在看来，我也很庆幸我有那段经历，它也重塑了我的人生观。&lt;/p>
&lt;p>但是有些事情实在过与巧合，不过也许只是我的幸存者偏差吧。我不知道这其中是否有什么深意，如果有的话，希望结局是一个 Good Ending.&lt;/p>
&lt;h2 id="五">五&lt;/h2>
&lt;p>前几天我妈微信给我打了个电话，当时我没空，没来得及接。不过实际上，我爸妈大多数给我打的电话也都是些嘘寒问暖的话语，即使有空我也是不太愿意接的；但要是不接的话，我爸妈肯定也会不太开心的，所以一般都会回一下。这次也是，待到几天之后我有了空，我便回了一个电话。我妈在电话里说，之前之所以给我打电话，是因为我姥爷生病住院了，想让我和姥爷说说话、聊聊天之类的；不过现在已经出院了，无大碍。&lt;/p>
&lt;p>结果昨天（八月七日）晚上又给我打了个电话，自然还是少不了问一些像是“今晚饭吃了什么”这种我始终无法理解的毫无意义的话语。后面瞎侃谈到了我姥爷，我妈便吐槽我说之前谈到我姥爷生病时，我也不问问到底他是得了什么病。我便反驳说问了又能如何。&lt;/p>
&lt;p>她说，倒也确实，不过不知道我寒假回来的时候还能不能见着我姥爷。&lt;/p>
&lt;p>自然，从她的话语中，很明显能听出发生了什么样的事。但我依然没有多问。正如前文所说，问了又能如何。无非是被告知人至晚年，患了何病，大寿将至。&lt;/p>
&lt;p>说到这个，突然又想到，去年，我的奶奶也去世了，应该是在那一年的秋天吧。我其实是到了寒假才知道的：当时我正从机场出来，见我父亲等在门口，这是我第一次离开家乡，以异乡人的身外，离家近半年。父亲看到我急忙招手，和一同来的一位大叔帮我递过了行李。上车后，我爸提了一句我奶奶的事，很平静，甚至有一丝唠家常开玩笑的戏谑意。我的回复也只是一声简单的“哦”。我自然事前是不知道的，自然没去做什么心理准备。但是一切似乎如此稀松平常，我不知为何并没有太多的心理波动。我爸问我，你不说点什么吗。我反问，说些什么好呢。&lt;/p>
&lt;p>如果说非要找一些理由，以证明我尽管对祖母的去世无甚反应，却仍不是一个失掉人情味的人的话，或许我可以说，可能正是许久的不见，所造成的疏离与陌生感吧。&lt;/p>
&lt;p>我的奶奶自我在高中时，便一直卧病在床。从一开始的腿脚不便、到后来的下肢瘫痪、甚至是阿尔兹海默症，直至去世，中间其实也不过两三年。我的爷爷奶奶与我和我爸妈三口，平常并不是住在同一座房子里的。但实际上，我们两家的两座房子正门的直线距离，其实也不过几十步，所以我们家一般都是会聚在一起吃饭的。不过我奶奶自打生病，自然就不断地缺席一场又一场的每日小聚。加之我高中学业繁重，一个月回家不过二三日，与她的见面机会，便只有待短暂放假时偶尔家中做了什么佳肴，家中令我去为她送饭时了。一年所见次数不过寥寥几次，所言亦不多，自然，她的去世也并没有使我如何震撼。仿佛她的身影是逐渐褪色模糊的，而非骤然与世长辞。对于一个卧病在床者，这确实算不上什么稀奇事。&lt;/p>
&lt;p>而似乎也是去年，还是前年来着，我的老奶奶去世了。我其实并不知道“老奶奶”这个称呼的指代关系到底是什么。我对这种中国的辈份关系向来弄不清，更何况是带有方言的辈份称呼。至于她是我母亲的姥姥，还是父亲的奶奶，无论是至她的离世，还是至今，我都一直没弄清楚。&lt;/p>
&lt;p>她去世时，家人央我同去参加她的葬礼。虽然我知道，她肯定是挺爱我这个作为曾孙辈的人的，但是反过来，我其实对她并没有什么特别的感情。但毕竟是亲人离世，葬礼一人一生也不过一次，我便随去参加了。自然，他们还邀请了附近十里八乡我毫不认识的陌生面孔。礼节上，行一些跪拜礼、号哭礼（姑且这么叫吧，至少我无法理解他们对这啼笑的转变仪式是为何如此熟练），抬棺，烧纸，喊一些我听不懂的如同咒语般的长丧音的话语，最后入土。&lt;/p>
&lt;p>说实话，我其实对这类生老病死没什么太大的心理波动。人老而死本自然常理，非遇横祸，寿终正寝。却仍要活人披麻戴孝，摆席宴客，我实在接受不来。死了埋掉，或者烧掉。生者各有其事，各去忙自己的生活就好，何必如此。&lt;/p>
&lt;p>人死，无魂灵。却仍要造墓建碑。岂不也是浪费土地？抑或是烧香供物，号而通灵者，看了着实讽刺。&lt;/p>
&lt;p>但是，不如此，却也似乎是少了什么。人终究是感性的动物，无神论者在有实证之前，自然是不相信灵魂的。但人与人的纽带也并非会随着肉体腐烂，感情仍在，物是人非，便只好编造一些谎言，假装他们还在，还在听着我们说话。尽管最终却也还是没有什么回应就是了&amp;hellip;&lt;/p>
&lt;p>何况我本身也不善言辞，感情也都一直藏在心中，自然不喜欢这种暴露感情的仪式。时间久了，连父母都说我是冷血动物了。不过如果我真的是冷血动物，我恐怕甚至不会给予他们回应吧。&lt;/p>
&lt;p>————幸而我不是，我仍旧只是一只哺乳动物罢了。&lt;/p>
&lt;h2 id="六">六&lt;/h2>
&lt;p>今晚上摸鱼时看到了 StackOverflow 的 2021 年的年度调查。感觉很有意思的，于是就去看了一下。&lt;/p>
&lt;p>一开始是国籍，自然，没有那个国家。&lt;/p>
&lt;p>接下来是编程开始的年龄，结果调查显示，有超过 50% 的受访者是在他们 11 - 17 岁时敲下了他们的第一行代码。即使是 5 - 10 岁的，也占到了 14.08%。果然感觉自己实在太弱小了。曾经每当见到各种年少的编程大佬，往往自我安慰他们只是少数，不过现在看来，少数派们也已高达半数了。&lt;/p>
&lt;p>再往下面翻，发现居然还有对性取向和是否为跨性别者的调查结果，顿时想起了那个最大同性交友平台 Github 的哏。实在没想到调查结果居然还会包括这个，于是饶有兴趣地看了一下，发现非 LGBTQ 人群似乎占的还不算少。他们人数的总和甚至比女性程序员的人数还要多。&lt;/p>
&lt;p>再往下看，则出现了残障人士，看到这里我似乎顿感严肃了起来。说来汗颜，其实我做前端页面时，很少考虑去为一些视觉障碍者适配。倘是盲人的话，单是浏览网页的话，已实属不易，何况开发。&lt;/p>
&lt;p>真的是很难想象这类人的生活，假如是我，恐怕肯定接受不了这种痛苦吧。不过也想起了“太可怕了”王子的故事，然而这也是后话了。&lt;/p>
&lt;p>再后面，似乎还有提到程序员的心理问题的，差不多有 10% 的人都有心理焦虑等一系列的问题，也不知我能否算得上他们当中的一员。&lt;/p>
&lt;h2 id="七">七&lt;/h2>
&lt;p>最近我的一位朋友向我推荐了一首出自 &lt;em>To the Moon&lt;/em> 的音乐 &lt;em>Born a Stranger&lt;/em>。当时身边没有耳机，没有来得及去听。今天傍晚时戴上耳机，点开了这首歌。&lt;/p>
&lt;p>播放这首歌时，我正在学校的路上。在歌曲大约播放到一半时，我刚好走到了楼梯高处，看到西面的夕阳余晖躲在校园的高楼后面，虽然歌曲描述的是 &lt;em>To the Moon&lt;/em>，但当时，那副黄昏的景象也着实令我的内心深受震撼。&lt;/p>
&lt;p>不知道为什么，感觉最近的故事也似乎都充满了巧合呢。&lt;/p>
&lt;h2 id="八">八&lt;/h2>
&lt;p>最近心情一直不太好，虽然是一直待在网校里，但是也写不下去代码。&lt;/p>
&lt;p>于是早上我打开了《荒野大镖客：救赎 II》，想打游戏来放松一下。尽管嘴上和朋友说的是“摸鱼的一天又开始了”，但其实，我在游戏的过程中也并非是多么开心。游戏自然是好游戏，但是就这款游戏本身而言，它并不算得上一款适合宣泄的渠道。仿佛是在心情压抑的时候专门去听一些令人忧郁的纯音乐，实属南辕北辙。&lt;/p>
&lt;p>最近前几天心情压抑时可能会去找一些（好吧就一个😭）朋友摸鱼吹水，倘能恰好聊到互相都感兴趣的话题，便仿佛是遇到知己，打开了话匣子，说了许多一直想说却又未曾与人聊过的内容。&lt;/p>
&lt;p>但是每天和人家都聊这么久似乎也不太好，也显得我整日无所事事。所以这几天有空时，便经常会一个人去操场的观众席上，坐在那里，独自一个人，发呆，远眺，当然，还有摸鱼。&lt;/p>
&lt;p>一开始，说是要找个安静的去处来练习大舌音，不过说实话，练了这么久感觉也只是在原地踏步。后来的几天，我便带着电脑过去，自然，代码是不会写的，而是写点东西，比如说这篇文章。虽然说不出来，但即便只是写，也确实会让心情好受许多。&lt;/p>
&lt;p>昨天晚上又下了一场雨，当时我在仍在观众席上，躲在遮雨棚下。身后开启了夜灯，灯光下的跑道，雨滴淅淅沥沥的砸在水坑里。我来时，同我一起在观众席上的加上我共三人；我走时，只剩下了一个。我坐在最高处，看着他们，尽管并不知道他们在干什么。&lt;/p>
&lt;p>这是处暑后的第三日，身着短袖，自不敌入夜后的寒气，只好先行一步离开。&lt;/p>
&lt;p>离开时，我撑起雨伞，将自己送回了宿舍。&lt;/p>
&lt;p>（完）&lt;/p></description></item><item><title>大一第二学期中期总结与反思 (2021-05)</title><link>https://lomirus.github.io/p/2021-05/</link><pubDate>Sun, 09 May 2021 01:00:00 +0800</pubDate><guid>https://lomirus.github.io/p/2021-05/</guid><description>&lt;h2 id="我这半学期学了什么">我这半学期学了什么&lt;/h2>
&lt;p>寒假的时候我一直在写考核作业。但有一说一，虽说我肝得挺厉害（至少自我感觉是），但实际上我感觉我并没学到什么太多的新东西。当然，倒不是说一点也没有，只是感觉太少了。&lt;/p>
&lt;p>寒假的时候一直想学下 Webpack 和 React 的相关知识，但苦于没时间，而到了开学之后反倒是有时间了（离谱）。于是乎我便先学习了这两个比较基础且常用的。我之所以将首选框架选为 React 而不是 Vue，主要是因为我跨平台开发框架很感兴趣，而 Flutter 对我这个前端还算比较比较遥远，因此考虑到 React Native 就先学了 React。&lt;/p>
&lt;h3 id="counter-trainer-deprecatedhttpsgithubcomlomiruscounter-trainer-deprecated">&lt;a class="link" href="https://github.com/lomirus/counter-trainer-deprecated" target="_blank" rel="noopener"
>counter-trainer-deprecated&lt;/a>&lt;/h3>
&lt;p>我第一有关 React 的项目是 counter-trainer （现在更名为 &lt;a class="link" href="https://github.com/lomirus/counter-trainer-deprecated" target="_blank" rel="noopener"
>counter-trainer-deprecated&lt;/a>），里面还顺便用到了 Less。这个项目算我前端工程化的开荒，更多的还是为了练习。开发初期的规划是想通过自适应以兼容各种分辨率，结果发现远比自己想象的复杂，加之当时对于组件间通信不甚熟悉，以及审美堪忧，最终导致代码堆成屎山，因此终止了开发。&lt;/p>
&lt;h3 id="counter-trainerhttpsgithubcomlomiruscounter-trainer">&lt;a class="link" href="https://github.com/lomirus/counter-trainer" target="_blank" rel="noopener"
>counter-trainer&lt;/a>&lt;/h3>
&lt;p>紧接着不久我就开始了第二个项目，同时也是前者的续作，也叫做 &lt;a class="link" href="https://github.com/lomirus/counter-trainer" target="_blank" rel="noopener"
>counter-trainer&lt;/a>。吸取了上一次的教训，这次只针对了移动平台进行适配，因此我选择了使用 React Native 进行开发。我从这这个项目中学习到的主要有这么几方面：&lt;/p>
&lt;ol>
&lt;li>学习了 Redux，了解了组件间通信、生命周期、Context、Fragment 等相对进阶的内容；&lt;/li>
&lt;li>开发的复杂程度不断增加，迫使我去寻找已有的库而不是重复造轮子，而在这个过程中我不得不去直接阅读一些框架的官方英文文档、去 Issues 里寻找 bugs 的解决方案。在此之前我顶多会使用像 Redux，Babel 这种近乎 Official 性质的库，对于那些小众的库还是有些抵触的，不过最后，相比于自己从头开发，直接 import 还是让我直呼真香。比如随便举几个这次用到的一些库：&lt;code>react-navigation&lt;/code>, &lt;code> react-native-tts&lt;/code> 等等，像其中的 tts 这种库，就绝不是现在的我能够徒手撸出来的，所以我也学会了不要去造一些没有必要的轮子。&lt;/li>
&lt;li>（复习了 Android 开发？（继上一次的 Kotlin 计算器））&lt;/li>
&lt;li>（直接读英文文档进一步提升了英文水准？）&lt;/li>
&lt;li>（了解了语义化版本？）&lt;/li>
&lt;/ol>
&lt;h3 id="sekiro-symbols-generatorhttpsgithubcomlomirussekiro-symbols-generator">&lt;a class="link" href="https://github.com/lomirus/sekiro-symbols-generator" target="_blank" rel="noopener"
>sekiro-symbols-generator&lt;/a>&lt;/h3>
&lt;p>这个项目应该是我最近的项目中完成度最高，也是唯一没有弃坑且最终按照原计划圆满完成了的。最终代码量约1000行。下面说一下我从这个项目中学到的东西（或者是这个项目的一些 features）：&lt;/p>
&lt;ol>
&lt;li>React Hooks：该项目全部使用函数式组件；同时在组件间通信方案的选择上废弃了 Redux ，改为了使用 React 原生 hooks；&lt;/li>
&lt;li>Typescript：该项目全部使用 Typescript；&lt;/li>
&lt;li>ESlint：该项目使用了 ESlint（这个好像不算什么亮点）；&lt;/li>
&lt;li>CSS in JS：该项目没有采取传统的 &lt;code>Less&lt;/code> or &lt;code>SASS&lt;/code>/&lt;code>SCSS&lt;/code>，而是选择了 css in js 的方案。并且在经过了多方权衡之后，最终决定了采用 &lt;code>emotion&lt;/code> 作为样式框架&lt;/li>
&lt;li>Webpack：打包时的一些优化，如 &lt;code>source-map&lt;/code>, &lt;code>code splitting&lt;/code>；&lt;/li>
&lt;li>Github Actions：自己写了个脚本自动部署并发布网站；&lt;/li>
&lt;li>Other: 如 &lt;code>React automatic runtime&lt;/code>, &lt;code>Forwarding Refs&lt;/code>,&lt;code>.gitattributes&lt;/code> 文件的使用等。&lt;/li>
&lt;/ol>
&lt;h3 id="deno">Deno&lt;/h3>
&lt;p>学了点 Deno，不过生态还是太匮乏，暂时还没什么卵用。&lt;/p>
&lt;p>有个叫 &lt;code>Aleph&lt;/code> 的框架可以用 &lt;code>React&lt;/code>， 不过是 &lt;code>SSR&lt;/code>, 不太符合我口味。&lt;/p>
&lt;h3 id="rust">Rust&lt;/h3>
&lt;p>这学期还学习了一门新语言，那就是 Rust. 打老早之前就见到很多人都在吹它，而且后来又看到 Rust 大佬 @ahabhgk 的身体力行，以及 Rust 在 WebAssembly 上无可比拟的优势以及其他各种优秀特性等等。所以就开始学习这门语言了。&lt;/p>
&lt;p>目前基础语法方面已经学完了，最近在学一些智能指针、并发等相关操作。而且开发的过程中甚至遇到了一些语言本身的 &amp;ldquo;feature&amp;rdquo;，以至于我还专门跑去官方仓库的 Issues 寻找解决方案，官方则表示只能暂时使用 unstable 的 nightly 特性作为临时解决方案，说明 Rust 还是挺早期的，还有很多坑都没填&amp;hellip;&lt;/p>
&lt;h3 id="vue">Vue&lt;/h3>
&lt;p>今天才刚刚开始学 Vue/Vite，所以暂时还没什么好说的。&lt;/p>
&lt;p>&lt;del>（不过我还是要吐槽一下 Vue 文档辣鸡（小声））&lt;/del>&lt;/p>
&lt;h2 id="接下来要做什么">接下来要做什么&lt;/h2>
&lt;p>&lt;del>😅说了这么多，还是得先把课内各种 damn courses 给解决掉，虽然有些水课设立就是为了恶心人的，但是我们也无可奈何。&lt;/del>&lt;/p>
&lt;p>立几个 flag，不过不要求要在本学期内完成，也不一定完全按照它执行，只是当作一个 Todo List 而已：&lt;/p>
&lt;h3 id="web">Web&lt;/h3>
&lt;ul>
&lt;li>Vue &amp;amp; Vite；&lt;/li>
&lt;li>React/Vue Router；&lt;/li>
&lt;li>WebAssembly;&lt;/li>
&lt;li>Next.js (SSR);&lt;/li>
&lt;li>WebRTC&lt;/li>
&lt;/ul>
&lt;h3 id="hybrid">Hybrid&lt;/h3>
&lt;ul>
&lt;li>Dart &amp;amp; Flutter&lt;/li>
&lt;/ul>
&lt;h3 id="game">Game&lt;/h3>
&lt;ul>
&lt;li>Bevy/Godot;&lt;/li>
&lt;/ul>
&lt;h3 id="other">Other&lt;/h3>
&lt;ul>
&lt;li>Decentralization, Blockchain&lt;/li>
&lt;/ul></description></item><item><title>Writing Blogs in Github Issues</title><link>https://lomirus.github.io/p/start-writing-blogs/</link><pubDate>Sun, 09 May 2021 00:00:00 +0800</pubDate><guid>https://lomirus.github.io/p/start-writing-blogs/</guid><description>&lt;p>我写前端至今也已有五六年了，不过这数字其实很水，前五年的大部分时间也都并没有将主要精力放在开发上，不过自己好歹也多多少少做过地做过一些项目。我第一个大型（或许？）前端项目就是一个简单的网站，有留言，还有井字棋什么的几个小游戏。再后来学过后端后，我又用 Golang 做后端，原生 JS 做前端，徒手撸了一个博客。&lt;/p>
&lt;p>我向来是没有什么写博客的习惯的，因为感觉其枯燥且无用。上次写博客主要是因为隔壁运维作业要求搭建一个博客，而我又懒得学习什么 Hexo, Wordpress 这类东西，所以就自己先简单写了一个原型，后续又不断完善，时而不时水几篇文章，然后就有了这个博客。&lt;/p>
&lt;p>不过现在这个博客已经被废弃了，一是因为博客源码太烂，二是因为文章太水，所以不愿再维护了。&lt;/p>
&lt;p>但是我时而又萌生了继续写点博客的想法，然而正如杜拉斯在《情人》的开头所言，“我已经老了”（无端？），所以我也已经不太想折腾了。网上搜资料时发现有的人直接拿 Github Issues 来写博客，想了想也确实挺符合我的需求：支持 Markdown， 可编辑，可评论，而且现在据说也可以限制他人在自己仓库里乱发 issue 了，所以我就决定选择 Github Issues 作为我的新的博客平台了。不过日后倘若又要迁居，那也是后话了。&lt;/p>
&lt;p>为防止自己继续写一些水文来占版面，所以这次可能更新频率会降低。不过有时可能受外力影响要求比如每周上交至少一篇博文，emmm，以后再具体看情况办吧。&lt;/p>
&lt;p>先写到这。&lt;/p></description></item></channel></rss>