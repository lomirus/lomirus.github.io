[{"content":"Background 最近在研究人工语言，特别是语序问题，不由得涉及了头部方向参数、X-bar Theory 等领域的知识，而且也这才意识到了乔姆斯基到底有多强orz。所以后面就着手写一下学习这些东西的一些笔记汇总，希望能帮到后面会用到的人。\n目前计划分三篇文章完成，本篇主要介绍句法学的入门知识，第二篇会讲 X-bar Theory，第三篇则会涉及当前 generative grammar 的最新研究成果 minimalist program。\n下面开始正文。\nSyntactic Category 在讲 syntactic category 之前，现引入两个新概念，lexical categories 和 phrasal categories。前者 lexical categories 就是我们在中学时学过的单词分类，比如动词，名词，副词等，lexical 即“语素的”之意。而 phrasal categories 在功能上与前者类似，不过针对的不是语素，而是短语，比如名词短语，动词短语等。\nSyntactic category 则是句法理论中所假定的一种句法单元。在 phrase structure grammars 中，syntactic category 包括 lexical categories 和 phrasal categories。但是另一个理论 dependency grammars 中，syntactic category 则不承认 phrasal categories，只包括 lexical categories。本文依照前者为讨论基础。\n由于在后面的讨论中，主要用到的是其英文及其缩写，所以先简单列举一下常见的词性：\n中文 英文 缩写 名词短语 noun phrase NP 动词短语 verb phrase VP 形容词短语 adjective phrase AP 副词短语 adverb phrase AdvP 介词短语 adposition phrase PP 限定词短语 determiner phrase DetP Head 在语言学中，对某个短语来说，我们用在这个短语中决定了该短语的 syntactic category 的词语称之为 head.\n由于汉语本身的语序导致的歧义现象（这也是本系列要讨论的问题之一），所以下面我先用英语举几个例子：\ncute cat 是一个 noun phrase，因此其 head 是 cat eat fish 是一个 verb phrase，因此其 head 是 eat too cute 是一个 adjective phrase，因此其 head 是 cute too slowly 是一个 adverb phrase，因此其 head 是 slow 具体鉴定方法可以参考此处：Heads - Grammar - Cambridge Dictionary。\nHead-initial \u0026amp; Head-final 在一个短语中，如果其 head 位于开头，我们称之为 head-initial，反之则称之为 head-final。这里继续用上面的例子：\ncute cat 中 cat 位于后面，所以是 head-final eat fish 中 eat 位于前面，所以是 head-final too cute 中 cute 位于后面，所以是 head-final too slowly 中 slowly 位于后面，所以是 head-final Head-Directionality Parameter 在语言学中，我们按照一个语言是 head-initial 还是 head-final，讲他们进行分类，并将这一参数称之为 head directionality。显然地。如果一个语言是 head-initial，那么以为它是 VO 结构，例如英语；如果是 head-final，则是 OV 结构，例如英语。\n这时，我猜你可能会很疑惑：如果英语真的是纯粹的 head-initial，那么英语应当出现类似西班牙语的定语后置的现象，但是在英语中，尽管存在后置的定语从句，但是一般的形容词依旧是放在名词前面的，那么这就与 head-initial 相抵触了。\n事实上，这么想的人不只你一个，我也一样。与其将语言粗暴地分成两个极端，不如在一个 continuum 的两端放上 head-final 和 head-initial，每一个语言都是条上的一点，而其语序越接近哪一个，就越靠近哪一端。浙大的刘海涛教授在2010年利用了 dependency treebank-based 方法，对二十余种语言进行了调查，而这次研究为该观点提供了有力的支持。在这种观念下，诸如英语或是德语将在 continuum 的相对中间的位置，而日语则会被放在靠近 head-final 的一端。\nBeyond this Article 终于知道为什么之前读其他大佬写东西总是中文里掺杂着一堆英文了。自己最近为了写这篇文章，查阅到的资料也基本都是英文文献。一是考虑是翻译的不可靠性，二是考虑到翻译所导致的多余劳动量，简单说就是吃力不讨好，所以干脆还是直接以英文原文为准吧，方便大家也方便自己。\n","date":"2023-01-28T23:11:00+08:00","image":"https://lomirus.github.io/p/head-directionality-parameter/cover_hu35a5ed0304c989832a0e3681b09e3a51_555398_120x120_fill_q75_h2_box_smart1_2.webp","permalink":"https://lomirus.github.io/p/head-directionality-parameter/","title":"生成语法入门系列（一）：头部方向参数 (Head-Directionality Parameter)"},{"content":"国外软件最让我让我厌恶的一个设计之一是，当你想查看一个帖子的发布时间、或是一个 Release 的 Publish 日期时，它只给显示了 1 year ago. 然而到底是 365 天前呢，还是 730 天（毕竟还得考虑闰年不是）前呢，那非得让你好好上下求索一番方能找到设计师到底把它藏在了何处。更有甚者，则是索性不给你提供查看原始日期的选项，如此一来其谜底究竟如何你便不得而知了——或者当然，你也可以选择再在原地等待365天来验证，前提是你愿意的话。\n今日我便深受其害，在一个历史传下来的前端项目中，同时出现了 pacakge-lock.json 和 yarn.lock，双份包管理器，或许开发者也能双倍快乐？正所谓：\n天无二日，只能有阁下一个太阳。\n我是只能容忍一个包管理器的存在的。于是我开始查看他们最后的 commit 日期，想以此删掉更旧的那个。我一直有在用一个 VSCode 的 Git 插件，它可以直接利用 GUI 显示许多 Git 的相关信息。可以看到，它所显示的两个文件的 commit SHA 明显不同，然而，当我想进一步确认其提交日期时，却发现两个显示的都是 1 year ago. 这下可好，到底是哪个在前，哪个在后呢？无奈，最后还是通过手动输入 git blame 查看它们的最后编辑日期来解决了此问题。但如此一来，我还要你这个插件干什么呢？一个本应提供给用户直观有效的信息，提高用户工作体验和效率的插件，结果却成了血压增高神器，可谓是成事不足，败事有余。\n我极其讨厌这种设计师自以为是的人性化设计，据我观察，似乎国外的软件特别喜欢这种愚蠢的设计（这句话并不代表国内的软件对其不喜欢，因为它们只是纯粹的烂）。同样的例子还有诸如操作系统不显示当前时间的秒数，在我目前所使用的系统中：Windows 11、Gnome 43、Android 12 可谓是无一例外。在我看来，一个优秀，或者说是本应只算是正常的设计，应当是在任务栏或是状态栏的时候，只显示时分，而当被点开后，则渐进式地展示给用户更多的信息，比如将这里时间精确到秒。然而它们别说是点开悬浮窗后展示了，哪怕你调出对应的 App 来，作为一个 Clock 应用，它也不会提供给你哪怕“一秒”的信息。不过我也并不是只是针对国外，譬如国内的某些下载类软件，也存在类似的不允许用户“查看详情”，只给一个黑盒，让用户丈八和尚摸不着头脑的问题。比如说一个 2 GB 的文件，显示下载进度是则是只能精确到 1.1 GB。我寻思这也都 2022 年了，提供给用户的精度却只有 1/20，还不如命令行给人的感觉爽快。求求还是赶快学学隔壁的 IDM 吧。\n论到“自以为是的人性化设计”，其中的佼佼者或者可以说是登峰造极的则必然是微软 Word 了。除此一款软件，我几乎从未使用任何比它要更反直觉的软件了。若不是学校的要求，别说是 Markdown 了，哪怕 HTML 乃至 TXT 都比它强。你打个“abc”它给你纠正成“Abc”，复制时自以为是地给你多选上回车，自以为是地给你增删缩进，字体颜色总是跟随一处不是你所想要的段落。插入个图片和文字相互遮挡，大图一页只能显示一个留下一大段空白，找个恰当的放置图片的位置要找半天\u0026hellip;诸如此类不胜枚举。毕竟，一个死板的、你说什么它就做什么而绝不多做的应用，和一个总是替你多想一步的人工智障，我还是给偏好前者的。后者在某些情况下，或许会为你提供或多或少的方便，但是也会因为在某一刻突然做出的脑残操作而令你气到骂街。前者虽机械，但最重要的是，它也不会令你的血压忽高忽低，而且当你适应了它的操作后，你双手的机械记忆说不定也会使你的效率大幅提高呢（或许类似拼音输入和语音输入之于普通话不好的用户？我基本不用语音输入，不知晓其现在的智能程度，所以不太确定此例子是否恰当）。\n除去这些“自以为是的人性化设计”类型的设计问题，还有一些其他我甚至都无法理解当时开发者的脑回路的设计。譬如 Gnome 的默认视频播放器，当你前进或是后退时，按键盘右键是前进 10 s，而按键盘左键则是后退 5 s，这简直\u0026hellip;我都没法描述我的心情了。它所造成的用户体验上的强烈的割裂感，最终还是迫使我迁移到了 MPV Player。\n记得网上有一个专门设计的“反人类登录网站”，上面收集了各种奇葩登录设计（外国人看来还是见得少了，真登录反人类还是得看张小龙）。但登录毕竟还是算用得少的，真正的反人类设计，那必然是要耦合到你的生活里，不断地恶心你的。\n","date":"2022-11-18T00:00:00+08:00","image":"https://lomirus.github.io/p/shit-design/cover_hu71efc97bdaea67ae57019a919aa06014_21000_120x120_fill_box_smart1_3.png","permalink":"https://lomirus.github.io/p/shit-design/","title":"有关设计的“人性化”与“反人类”"},{"content":"两种奴隶 记得挺久之前看过一副漫画，漫画的内容被分成两页作为对比。在第一页里，图片里的主人对他的奴隶说，如果自己路边的那条狗再叫下去，就要去打奴隶。奴隶被打后，于是怪罪主人旁边的那条狗。而在另一张图里，奴隶被打后，却终究忍无可忍，于是提手打向他的主人。\n可惜当时这张图没有保存下来，幸而记得还记得大概的印象。前几天又读到了鲁迅的《聪明人、奴才和傻子》，今天回想起来，于是我尝试着模仿鲁迅的文笔，将漫画里所描述的现象改写成了下面这段文字：\n行人和老爷 譬如老爷看到过路的行人，突然对著他的仆人，惨然说：“若是他再这样走下去，我也只好无奈打你两个嘴巴了。”行人听闻后，不管，依旧是向前走著。仆人于是终而至于被打。\n“混账”，仆人对行人骂道，“倘你听了老爷的话，我哪里会遭打。”\n“你说甚么？你这奴才\u0026hellip;”，行人回过头，直走过来，也是冲著仆人连打了两个嘴巴，“你的老爷打了你，倒反怪罪到我 ，真不像样\u0026hellip;\u0026hellip;”\n仆人不开口，想往后退了，于是轮转眼睛去看老爷。\n老爷看著仆人遭打，却只是发笑。\n一种现象 我一直觉得这似乎是一种在生活中很常见的现象。尽管他从逻辑上来看却又极其的荒谬。\n我相信，对于在国内上过学的人，基本都会遇到过这种现象。有时老师会说，如果班里哪个人没有完成作业，全班同学就要受到什么处罚。于是后面，学生就会去怪罪那名没有完成任务的学生，却忽视了这个惩罚是由老师直接决定并实施的。\n其他类似的例子，大小皆有，此处不一一论述了。\n归纳成现象阐述的话，可以这么简述：\nA 向 B 提出一个条件，若条件未达成则向 B 施加惩罚。 然而，此条件所要求的实施者 C 是某个在客观上本身并不具有触发该惩罚能力的人或群体。 若条件未达成，则使得 B 在主观上将矛盾转移到（甚至同是受害者的） C 上，却忽略了 A 才是惩罚的最终决策者兼实施者。\n我写完上面那篇故事，拿着去问了我一个朋友，问他这种现象/效应是否有什么命名，可惜最后我们终于还是没有找到。\n或许可以叫 Mirus Effect / 米莱斯效应？（笑）\n","date":"2022-09-05T00:00:00+08:00","image":"https://lomirus.github.io/p/mirus-effect/cover_hucca9890edd78681f0f80f66eb54fc34b_14242_120x120_fill_q75_h2_box_smart1_2.webp","permalink":"https://lomirus.github.io/p/mirus-effect/","title":"置身事外的惩戒者与千夫所指的受害者"},{"content":"引子 好久之间就有想设计一款类似P社类型的战略游戏，最近想了起来，于是便去思索一些基础的设计。其中就遇到了一个有关地块的问题。\n对于战棋游戏来说，常见的模拟地图的方法，按照地块形状可分为正方形和正六边形，其中后者的主要代表有《文明：VI》等。而即使对于部分大战略类游戏来说，譬如《灰衣主教》，也是采用的六边形地块。\n究其原因，乃是六边形地块相较正方形地块而言有诸多优点：\n六边形地块与周围的所有地块均以边相邻，不会出现使用正方形时要纠结顶点相邻的左上角到底如何处理的问题。 六边形是能密铺于平面的最多边形，更加接近圆形； 相应地，六边形地块也存在着一些问题，其几何形状的内角度数为120°，与平面直角坐标系难以兼容，计算复杂且不直观。所以，我想，能否使用正方形来代替六边形的同时，尽量避免一些本身的缺点。\n邻角处理 对于上文中所说的\n且与周围的所有地块均以边相邻，不会出现使用正方形时要纠结顶点相邻的左上角到底如何处理的问题。\n显然，由于六边形到各相邻地块的距离相等，而正方形就不一样了。对于传统战旗类来说，一般有两种处理方法：\n只允许玩家上下左右行走 允许玩家于九宫格内八向行走 然而以上两种方法都存在着相同的弊端，如果设正方形边长为 $1$，则斜边长为 $\\sqrt{2}$. 如果选择第一种方案，则到达斜边所在地块需要走两步，否则只需要一步，而 $1\u0026lt;\\sqrt{2}\u0026lt;2$，这两者无论选哪一个都是与实际情况不符且不公平的。\n但是在我的需求当中，并没有要求与实际的棋类一样，一次走一步，一步跨一格，这么量子化。因为对我来说，只要设置一个简单的步长即可，以下面的矩阵为例：\n$$ \\begin{vmatrix} A \u0026amp; B\\\\ C \u0026amp; D \\end{vmatrix} $$\n假设某人从 $A$ 点到 $B$ 点，耗时 $1$ 日；那么对应地，我们只需将其从 $A$ 点到 $D$ 点的耗时设为 $\\sqrt{2}$ 日即可。\n平滑边界 对于上文中所说的\n六边形是能密铺于平面的最多边形，更加接近圆形；\n显然，对于任意多边形，放到地图上看都是有棱有角，锯齿化太过严重。目前对于这个问题，我的想法是存储的时候按地块存起来，但展示的时候用户看到的其实是已经平滑过的曲线。\n此外，如果再考虑上四个顶点，相邻正方形的连线方向其实有八个，比六边形还多了两个，这样反而能够更好得模拟各种边界线。\n圆形逼近 设想这样一个理想场景：在我们的地图中央有一个国家，记为C。C国人口无限多，但由于某些原因人人想润，而同一时间段内各个方向允许居住的人数有限且相同。如果放开了让他们一直这样润下去，最后他们的居住地的扩散方向，毫无疑问会是一个圆形。\n那么，我们应该怎么使用像素地块来模拟这种情况呢？\n类似于 Conway\u0026rsquo;s Game of Life，我们可以定义一套规则，例如在下图中，假设其为开始时刻：\n$$ \\begin{vmatrix} LT \u0026amp; T \u0026amp; RT\\\\ L \u0026amp; C \u0026amp; R\\\\ LB \u0026amp; B \u0026amp; RB \\end{vmatrix} $$\n对于下一时刻，此时有两套简单规则供我们选择：\nL, T, R, B 被人群占领 L, T, R, B, LT, RT, LB, RB 被人群占领 但是，这两种方法均不能逼近圆形：\n分别如上图所示，当扩散次数趋于无穷，前者会逼近于倾斜45°的正方形，后者会保留为原来的形状————双方都还是原来的正方形。\n此时的我想当然地就会去想增加对步长的计算，由于此处的时间是量子化的，便只能去修改步长了。在同一时间段内，若 $C$ 恰好能到达 $R$，则此时段内 $C$ 恰好走完了 $l_{C \\to RT}$ 的 $\\frac{1}{\\sqrt2}$ 倍的路程，约为 0.707。\n描述成算法就是：\n若 C 此时数值为 1，则下一时刻， L、T、R、B 点数值 $+1$，LT、RT、LB、RB 点数值 $+\\frac{1}{\\sqrt2}$（数值范围 0~1）。\n可惜事与愿违，这样并不能达到想象中的效果：\n这样最终依旧是只能成为倾斜45°的正方形，只不过是顶角变钝了，由一个点变成了三个点。\n简单思索过后，我发现问题出在突变上：C 此时数值为 1， 若导致下一时刻 L、T、R、B 点数值突变 +1，其实并不能真实反应迁移速度与边界人口的关系。因此，我们需要重新规定规律，改为：\n若 L、T、R、B、LT、RT、LB、RB 八点数值均为 1，则下一时刻 C 点变为 1.\n由此，以及对于要求其连续化的要求，我们可以得到推论：\n若 Q 此时数值为 $n$，则下一时刻 L、T、R、B 点数值 $+\\frac{n}{8}$，LT、RT、LB、RB 点数值 $+\\frac{n}{8}\\times\\frac{1}{\\sqrt2}$，其中 $n\\in[0, 1]$.\n不过再这样下去徒手画图可就撑不住了，所以还是写段代码用 canvas 实现吧，这里我简单用 js 写了个：\nconst DILUTION = 1 / 8; const OBLIQUE_STEP = 0.707 const canvas = document.querySelector(\u0026#39;canvas\u0026#39;); const context = canvas.getContext(\u0026#39;2d\u0026#39;); const button = document.querySelector(\u0026#39;button\u0026#39;) const data = Array.from({ length: 255 }, () =\u0026gt; Array.from({ length: 255 }, () =\u0026gt; 0)); data[127][127] = 255; function render() { const imageData = context.getImageData(0, 0, 255, 255); for (let i = 0; i \u0026lt; 255; i++) { for (let j = 0; j \u0026lt; 255; j++) { imageData.data[(i * 255 + j) * 4 + 3] = data[i][j] } } context.putImageData(imageData, 0, 0) } function clampIndex(x) { return clamp(x, 0, 254) } function clamp(x, min, max) { if (x \u0026lt; min) { return min; } else if (x \u0026gt; max) { return max } else { return x } } function getData(data, x, y) { return data[clampIndex(x)][clampIndex(y)] } function update() { const thisData = structuredClone(data) for (let i = 0; i \u0026lt; 255; i++) { for (let j = 0; j \u0026lt; 255; j++) { data[i][j] += getData(thisData, i + 1, j) * DILUTION; data[i][j] += getData(thisData, i - 1, j) * DILUTION; data[i][j] += getData(thisData, i, j + 1) * DILUTION; data[i][j] += getData(thisData, i, j - 1) * DILUTION; data[i][j] += getData(thisData, i + 1, j + 1) * DILUTION * OBLIQUE_STEP; data[i][j] += getData(thisData, i + 1, j - 1) * DILUTION * OBLIQUE_STEP; data[i][j] += getData(thisData, i - 1, j + 1) * DILUTION * OBLIQUE_STEP; data[i][j] += getData(thisData, i - 1, j - 1) * DILUTION * OBLIQUE_STEP; data[i][j] = clamp(data[i][j], 0, 255) } } } button.onclick = () =\u0026gt; { update() render() } 点了几十下按钮之后效果是这样的：\n和前面的相比，已经可以说是很圆了。但是仔细观察的话总感觉有点儿别扭。经过测量，实际上，这个圆在 LT、RT、LB、RB 有点突出了。\n我对这一现象感到很奇怪，前面的都是经过数学推导计算得出的，按说应该没问题呀，怎么会和实际效果有些偏移呢。\n经过一番思考，我发现实际上，正如前文所提到过的：\n对于下一时刻，此时有两套简单规则供我们选择：\nL, T, R, B 被人群占领 L, T, R, B, LT, RT, LB, RB 被人群占领 但是，这两种方法均不能逼近圆形：\n分别如上图所示，当扩散次数趋于无穷，前者会逼近于倾斜45°的正方形，后者会保留为原来的形状————双方都还是原来的正方形。\n我们这里采取本质上还是后一种方案。人群最终扩散到达的位置，实际上已经构成了一个大正方形，只是四角的颜色过浅，导致我们看不到罢了。但尽管我们看不到，它实际上还是会对四角产生微弱的影响，导致其四角方向的延伸长度必定多于正圆。\n于是，我想如果将斜边权重 OBLIQUE_STEP 设为 0 会怎么样呢？结果如下：\n果然，四边变得更扁了，但是也扁过头了，依旧不是正圆。\n由此，我联想到了几个问题：\n当 DILUTION 即时间段细分趋于无效小时，是否会影响到最终的形状？ 根据二分法可以猜测，大概率存在一个 OBLIQUE_STEP，使得最终形状趋于正圆，那此时 OBLIQUE_STEP 会是几呢？（可惜以我的数学能力只能获得逼近值，而无法获得准确值） 既然 LT 可以对 T 产生 1 的影响，LT 也可以对 C 产生 $\\frac{1}{\\sqrt{2}}$ 的影响，那凭什么 LT 就不对 RB 产生 $\\frac{1}{2\\sqrt{2}}$ 的影响呢？依次类推，一个点可以对图中任意远的点产生影响。正如此刻一只澳大利亚的袋鼠可以对梵蒂冈的教皇产生万有引力，尽管微乎其微，但它确实存在。 这个例子从一开始可能就是不恰当的，与其说是人群的迁移，不如比作是信息的传播，因为信息可以无限复制。但这又引入了一个新问题，A 点当前的信息量会对下一刻 A 点本身施加影响吗？ 结语 今晚文章写了这么多，就先写到这儿吧，毕竟最近网校还有项目要做。上面四条算是给自己挖了一个坑，不知道还这篇文章还会不会有后续（希望能有）。如果有的话，但愿到时候能解决这几个问题。\n花絮 刚才写着写着突然又想到了一个正方形地块的优点，就是它恰好能够与一些由于殖民等历史原因而划分的区域的横平竖直的边界线相符合，比如埃及西部国境线和美国各州等（虽然说有点瞎猫碰到死耗子的感觉😂）\n","date":"2022-08-26T00:19:00+08:00","image":"https://lomirus.github.io/p/approximate-circle-with-pixels/cover_hu9b862756a4ac73bda75fd037b8a74264_460997_120x120_fill_q75_box_smart1.jpg","permalink":"https://lomirus.github.io/p/approximate-circle-with-pixels/","title":"如何利用正方形地块扩散逼近圆形"},{"content":"自从大一下学期学校放开选课之后，我基本上每学期都要选一门小语种。这主要是因为我本来就对语言比较感兴趣嘛。例如之前，大一下学期是韩语，大二上学期是俄语。而这学期，我则选修了一门西班牙语。不过实际上，之前两门语言学得都比较浅，譬如韩语学完谚文，再学一下典中典的“你好再见谢谢没关系”，以及一些简单的自我介绍基本就结课了；俄语学完字母，也是再学一点简单的语法和自我介绍就 ok 了。这两门课的难度也都不大，反正我上课上得挺乐呵，最后得分也都还是 90+，基本上是我所有科目中最高的了。不过到了现在，韩语忘得只会读谚文，俄语也只是粗略地能认出西里尔字母，至于语法上基本上基本忘得精光。\n而说回这学期的西班牙语，或许是发音比较简单的原因（除了大舌音），我感觉相对前两门语言我们似乎更早地进入了对于语法的学习。因此，需要记忆的东西也变得更多了。此外，也是为了尽量不在重蹈前两次的覆辙，所以这次我便想去试着做一些笔记，所以也就有了这边文章。写的过程，也权当是复习了。\n字母 西班牙语相对拉丁字母来说，只是多了一个字母，即 Ñ/ñ，另外也还有两个比较特殊的字母，即 Ch/ch 和 Ll/ll。很明显地，可以看出这俩其实就是两个字母的组合。但是在某些使用西班牙的国家确实是把他们两个作为两个单独的字母来看待的。所以如果要回答西班牙语中到底有多少个字母，答案既可以是27个，也可以是29个。\n至于发音嘛，建议还是去看维基百科吧，毕竟博客里不方便放音频，而且介绍不同的发音情况也会导致篇幅太长（虽然西班牙语的单词确实可以直接根据单词读出发音）。\n冠词 定冠词 首先介绍一下最常用的冠词，其中涉及到了复数和阴阳性，这几个知识点会在后面提到。另外先说这个还有就是因为后面为了区分阴阳性，也一般会在单词前加定冠词来表示的。\n单数 复数 阳性 el los 阴性 la las 不定冠词 单数 复数 阳性 un unos 阴性 una unas e.g.\nEl mundo =\u0026gt; The world =\u0026gt; 砸瓦鲁多（雾）\nLos niños =\u0026gt; The children\nUnas niñas =\u0026gt; Some girls\n基础语法 阴阳性 阴阳性可谓是西班牙语的一大特色。首先名词要分阴阳性，其次代词冠词动词等也都要根据对象来变形。所以接下来就说一下判断西班牙语中的名词的印象的规律。\n第一，也是最常用的规律，o 结尾的，一般是阳性，a 结尾的，一般是阴性。当然这个并不绝对，但是对于大多数名词甚至代词冠词来说都是适用的。\ne.g.\nel libro（书）\nel río（河）\nel oro（金）\nla mesa（桌子）\nla silla（椅子）\nla luna（月亮）\n除此之外，还有几条出现频率相对较低，但优先级更高的规则：\n以 -or，-aje，-an，-ambre 结尾的词多属阳性:\nel valor(价值) el motor (发动机) el traje(西装) el oleaje(浪) el pan (面包) el plan (计划) el enjambre(蜂群) 以 –dad，-umbre，-tud，-ie, -sis, -ción, -sión 结尾的词多属阴性:\nla bondad(仁慈) la pesadumbre(忧虑) la virtud(道德) la serie(系列) la crisis(危机) la canción(歌曲) la sesión(会议) 如果需要将阳性名词变成阴性，若名词以辅音结尾，一般是直接加 -a；若名词以 -e, -o 结尾，一般是把结尾的字母换成 -a。比如随便举几个简单的例子：\nel niño \u0026lt;-\u0026gt; la niña\nel amigo \u0026lt;-\u0026gt; la amiga\n其他更复杂的规则可以自行查阅，这里就不再展开了。\n复数 单复数变化规则相对简单。元音结尾，直接加 -s，辅音结尾，直接加 -es。当然，凡事总有例外，但本文毕竟是入门文章，所以这个也是和前面一样不再继续展开了。\n代词 人称代词 下面为了减少翻译为汉语的歧义，使用特定的规则来表示人称代词：\n1️⃣2️⃣3️⃣: 第几人称，~ 表示同上； 🌑🌕: 分别指代阴阳，🌗表示阴阳通用，重复符号表示复数； 👍: 敬语。 人称 阴阳性/单复数 敬语 中文 西班牙语 1️⃣ 🌗 我 yo ~ 🌕🌕 我们（男） nosotros ~ 🌑🌑 我们（女） nosotras 2️⃣ 🌗 你 tú ~ 🌗 👍 您 usted ~ 🌕🌕 你们 vosotros ~ 🌑🌑 妳们 vosotras ~ 🌗🌗 👍 诸位 ustedes 3️⃣ 🌕 他 él ~ 🌑 她 élla ~ 🌕🌕 他们 ellos ~ 🌑🌑 她们 ellas 物主代词 人称 阴阳性/单复数 敬语 中文 西班牙语 1️⃣ 🌗 我的 mi ~ 🌕🌕 我们（男）的 nuestro ~ 🌑🌑 我们（女）的 nuestra 2️⃣ 🌗 你的 tu ~ 🌗/🌗🌗 👍 您/诸位的 su ~ 🌕🌕 你们的 vuestro ~ 🌑🌑 妳们的 vosotra 3️⃣ 🌗/🌗🌗 他/他们的 su 不会吧，不会吧，不会真有人觉得背完了这几个单词就学会了西班牙语的物主代词了吧？\n西班牙当然不会这么无聊让你背背就完事儿了，都学到这儿了怎么能不整点儿活呢？实际上，物主代词是会根据对象的复数和阴阳性变化的。\nMis amigos =\u0026gt; My friends\n需要注意一下，这里的“朋友”是复数，所以代词“我的”后面也要加 s。其他的物主代词也是同理，比如：nuestros, nuestras, vuestros, vuestras, tus, sus。\n下面是一个以🐱（gato）为例，一个更加完整的表格：\n🌕 🌑 🌕🌕 🌑🌑 mi el gato mío la gata mía los gatos míos las gatas mías tu el gato tuyo la gata tuya los gatos tuyos las gatas tuyas su el gato suyo la gata suya los gatos suyos las gatas suyas nuestro el gato nuestro la gata nuestra los gatos nuestros las gatas nuestras vuestro el gato vuestro la gata nuestro los gatos vuestros las gatas vuestras 反身代词/自复代词 请和下文中的自复动词搭配使用。（页内跳转点不了的话估计是博客的 bug 吧\u0026hellip;）\n反身代词 yo me tú te él/ella/usted se nosotros/as nos vosotrosa/s os ellos/ellas/usteded se 疑问代词 Quién 意为 \u0026ldquo;Who\u0026rdquo;。\n¿Quién eres? 你是谁？\nDónde 意为 \u0026ldquo;Where\u0026rdquo;。\n¿Dónde estás? =\u0026gt; 你在哪里？\n¿De dónde eres? =\u0026gt; 你来自哪里？\n动词 系动词 西班牙语中系动词有两个：ser 和 estar\n先列一下他们的变形，相信看到这儿了你也应该对西班牙语的人称代词比较熟悉了吧，所以下面就直接用人称代词了：\nser estar yo soy estoy tú eres estás él/ella/usted es está nosotros/as somos estamos vosotrosa/s sois estáis ellos/ellas/usteded son están 区别：\nser 表达事物或人的固有的、永久性的性质和特点； estar用于表达事物或者人的暂时性、非永恒的状态。 一般动词 西班牙语的动词由形式可划分为三种，分别是以 -ar, -er 和 -ir 结尾的动词。\n对于规则的动词来说，它们的变形规则如下：\n-ar -er -ir yo -o -o -o tú -as -es -es él/ella/usted -a -e -e nosotros/as -amos -emos -imos vosotros/as -áis -éis -ís ellos/ellas/usteded -an -en -en hablar：讲，说 I spean Spanish. =\u0026gt; Yo hablo español.\nDo you speak Spanish? =\u0026gt; ¿Hablas español?\n进行时 西班牙语的进行时的表示方式为 estar + gerundio（副动词），副动词的变形规则如下：\n原型 副动词 -ar -ando -er -iendo -ir -iendo Estamos comiendo. =\u0026gt; 我们正在吃饭。\n自复动词 这个语法有点类似日语的他动词，比如自动词 消える 表示主语消失，而他动词 消す 表示主语使宾语消失。变形的直接加 se。比如 llamar 表示“叫喊”，而 llamarse 表示“名字叫”。不过我没见过直接用 llamarse 这种原型的，都要和反身代词搭配使用，而且要去掉 se，比如：\nMe llamo Sofia. =\u0026gt; 我叫 Sofia.\n需要注意一点，动词此时要进行元音替换，即把 e 替换为 ie，“我们”和“你们”不变。以 perder（迷失）为例：\n人称 动词搭配 yo me pierdo tú te pierdes él/ella/usted se pierde nosotros/as nos perdemos vosotrosa/s os perdéis ellos/ellas/usteded se pierden ¿Tienes un mapa? Porque me estoy perdiendo en tu mirada. 后记 这学期西班牙语的期末成绩是91，也算是在期望之内了。不过这片博客从四月份开始，直到期末考试结束后都还没写完。整个暑假也基本没碰过，直到今天（2022/08/27）才补完了剩下的部分。不过说实话感觉现在西班牙语也已经忘得差不多了，看来语言这东西不学不用的话真的是忘得很快呀😮‍💨\nBTW，我们西班牙语的这个班里也还有很多大佬，譬如在学拉丁语的，还有学过德语和希腊语的，学过韩语和日语的据我所知就有好几个。不过感觉我自己的话对于大多数外语也都还是浅尝辄止吧，看来我还是专心去学好我的日语和英语吧😵‍💫\n","date":"2022-04-21T00:00:00+08:00","image":"https://lomirus.github.io/p/spanish-getting-started-notes/cover_hu4dadd9957ce64fc8f25b912cb2e750a1_354147_120x120_fill_q75_box_smart1.jpg","permalink":"https://lomirus.github.io/p/spanish-getting-started-notes/","title":"西班牙语入门笔记"},{"content":"一些碎碎念 年轻人的第一款开源游戏引擎：Godot 许久以前就一直有做游戏的想法。中学时或多或少地接触或听说过 CocosCreator、Erget、Unity 和 Unreal 等著名引擎，然而这些都是商业引擎，且对我来说太过笨重。大一的时候听说了 Godot，得知它应该是当前世界范围内最完善，也是知名与流行度最广的开源游戏引擎了。而且体积极其精简，只有不过百兆；与其他大型引擎动辄几 GB 的体积相比，实属一股清流。于是深得我心，我后面也开始学习这款引擎。\n这款引擎主要面向的应该是独立游戏开发者，预设了开发者技术能力不强的立场，同时也是为了使更多人接触到游戏开发，所以内置的官方语言是一门叫做 GDScript 的脚本语言，语法极其类似 Python。同时为了秉持开放性，也提供了 GDNative 供开发者使用几乎是任意语言（如 C/C++/Rust 等）进行开发。\n首先谈一下这个 Python，哦不，是 GDScript，我个人其实并不是很喜欢这门语言，简要列举一些原因：\n个人不喜欢 Python 的缩进语法 GDScript 语言本身过于小众（但小众本身不是原罪），适用范围狭窄，语法设计拉跨，不够优雅 性能拉跨，之前看过测试速度比 Python 还慢 当然 Godot 也可以通过 GDNative 使用我最喜欢的 Rust。但是中间终究隔着一层转译层，如同隔着一层可悲的厚壁障（什么奇妙比喻？）。其次, Godot 本身使用的 Node 架构也会带来一定性能上的问题,参见官方文档：\nWhen and how to avoid using nodes for everything\nNodes are cheap to produce, but even they have their limits. A project may have tens of thousands of nodes all doing things. The more complex their behavior though, the larger the strain each one adds to a project\u0026rsquo;s performance.\n(https://docs.godotengine.org/en/stable/getting_started/workflow/best_practices/node_alternatives.html)\n那么问题来了：\n你就一臭做独游的，还考虑个锤子性能？\n话虽如此，可有哪个开发者能拒绝对性能的追求呢？再者，开发体验对我来说才是它更大的痛点。\n从 Godot 园到 Bevy 书屋 后来，我又不知道在哪看到了 Bevy 这个游戏引擎。一开始没怎么注意它，最近见我加的一个 Godot 游戏开发的群组也时而提到它，但开始对它再次萌生好奇之心。\n印象里，Rust 里面之前比较火的开源游戏引擎有两个，一个 Amethyst 和一个 Bevy。看 Bevy 之前特意也查了下 Amethyst，发现它已经处于近乎停止维护的状态了；又去翻了一下它的论坛，发现里面也有一些谈到 Bevy 的优秀特性甚至是推荐转 Bevy 的帖子，遂不禁唏嘘。不过同时，这也坚定了我转向 Bevy 的决心，为下文中与 Bevy 的邂逅埋下了伏笔（阅读理解后遗症了属于是）。\n总之，接触到 Bevy 后不久，我就确定全面转向它了。它吸引我的地方实在太多，再简单列几条：\nOpen Source, Free(自由) \u0026amp; Free(免费) 源码与开发语言均为我最喜欢的 Rust（JS 谁啊，不是很熟🤔） 采用新潮的 ECS 架构，天生并发友好，性能优异 对原生工具链友好，如 VSCode/Cargo 等，开发环境对我来说更熟悉 可以调用 Rust 的丰富生态 无 GUI，学习成本低（x） 它作者本人也很让我喜欢👀 话不多说，赶紧进入我们今天的正题，Bevy 的基础教程吧\n（本文假定你已经有一定的 Rust 语法基础，对其使用上的语法细节不会过多讲解）\nECS 架构扫盲 什么呀，ECS，我知道，不就是阿里云的那个云服务器吗，好像全称是什么弹性计算服务（Elastic Compute Service）？\n少年，莫急，此 ECS 非彼 ECS，这里的 ECS，指的是：Entity-Component-System。\nECS 是相对于传统的 OOP 思想而言的，遵循“组合大于继承”的原则。在 ECS 架构的游戏中，游戏单元由无数的 Entity 构成，其中 Entity 可类比做常见编程概念中的实例。而每个 Entity 则由多个或单个 Component 组成，Component 是存储数据的结构类型，不包含任何方法。如果想要更新游戏数据，则需要通过 System 来完成。\n如果需要进一步介绍，可自行百度/谷歌。\n光说不练略显抽象，还是一起来看下面的代码吧：\n使用 Bevy 实现简单的 ECS 架构 Bevy 是一款基于 ECS 架构的游戏引擎，它的官网上就这么写道：\nMassively Parallel and Cache-Friendly. The fastest ECS according to some benchmarks\n简单翻译下就是：大规模并行\u0026amp;缓存友好，据某些测评说是最快的 ECS 游戏引擎\n因此，接下来我们就使用 Bevy 来实践一下 ECS：\ncargo new bevy-demo cd bevy-demo 修改 Cargo.toml：\n[package] name = \u0026#34;bevy-demo\u0026#34; version = \u0026#34;0.1.0\u0026#34; edition = \u0026#34;2021\u0026#34; [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; features = [\u0026#34;dynamic\u0026#34;] 注意，这里没有使用 crate.io 上的最新版 0.5.0，而是使用了其 Github 上的最新版。原因是 0.6.0 发布在即（估计还有几个月），当前版本与 0.5.0 的用法已经存在较大差异。所以直接使用较新的版本也可以降低今后的学习成本。\n请确保你的配置中 rev 与此处相同。本文所基于的版本为 Github 上 2021-12-18 的最新提交。\nfeatures 中的 dynamic 是用于加快构建速度的，但是当你正式发布 Release 时最好去掉此特性，至于为什么，你可以自己去观察下当开启或关闭此特性后的生成的编译产物分别是什么。\n简简单单一个 Hello World 级别的主文件(main.rs)：\nuse bevy::prelude::*; fn main() { App::new().run(); } 跑起来试试\ncargo run 啥输出也没有，正常预期。\n接下来再加上点 ECS 架构：\n首先，定义 Component：\n#[derive(Component)] struct Person { name: String, job: String, age: u32, } 写一个创建 Entity 的 System（函数）：\nfn init_people(mut commands: Commands) { commands.spawn().insert(Person { name: \u0026#34;野獣先輩\u0026#34;.to_string(), job: \u0026#34;学生\u0026#34;.to_string(), age: 24, }); commands.spawn().insert(Person { name: \u0026#34;田所浩二\u0026#34;.to_string(), job: \u0026#34;学生\u0026#34;.to_string(), age: 114514, }); } 接着再写一个遍历所有 Entities 并输出的 System（函数）：\nfn print_people(query: Query\u0026lt;\u0026amp;Person\u0026gt;) { for person in query.iter() { println!(\u0026#34;{}：{} 歳、{}です\u0026#34;, person.name, person.age, person.job); } } 接下来我们就要把这些东西整合起来，也就是添加到 main() 中的 App 上。\n这里要先介绍 App 的两个方法，add_system() 和 add_startup_system()。add_system() 顾名思义，就是用来添加 system 到 App 上的；而 add_startup_system()，则是会在游戏初始化阶段也就是最开始执行某个 system。因此，我们可以把主函数改成这样：\nfn main() { App::new() .add_startup_system(init_people) .add_system(print_people) .run(); } 执行 cargo run，输出结果是：\n$ cargo run Compiling rust-demo v0.1.0 (/home/lomirus/demo/rust-demo) Finished dev [unoptimized + debuginfo] target(s) in 3.03s Running `target/debug/rust-demo` 野獣先輩：24 歳、学生です 田所浩二：114514 歳、学生です Bevy 基础开发 有些小伙伴可能会问了：\n正经人谁玩控制台黑框框游戏呀？\n确实，Bevy 毕竟也不是用来写 CLI 的。所以接下来我们再实现一个简单的图形界面。\n准备资源 首先，在项目目录创建一个 assets 文件夹，在里面放一张图片。比如我放了一张 image.jpg 进去，但是这里要注意，bevy 默认是不支持载入 jpg 格式的图片的，这时需要修改一下 Cargo.toml\n[dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; # features = [\u0026#34;dynamic\u0026#34;] features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] 这样就可以支持载入 jpg 格式的图片了。\n然后，再在 assets 文件夹下创建一个字体文件。由于我是 Linux 用户，所以直接复制了一份系统自带的 NotoSansMono-Regular.ttf 字体。这里你当然也可以选自己喜欢的，记得后面的相应操作改成你的字体名就行。\n创建窗口 Bevy 的设计是很模块化的，许多功能都被拆成了不同的模块，利用添加插件的形式使用。不过幸好 Bevy 也为我们提供了默认的插件配置。比如我们可以使用：\nApp::new() .add_plugins(DefaultPlugins) .add_startup_system(init_people) .add_system(print_people) .run(); 以此导入默认插件，然后我们运行，会发现控制台不断输出内容，同时也弹出了一个窗口：\n这就说明添加成功了，至于控制台里会出现无限输出的现象，是因为添加 DefaultPlugins 的时候，同时也引入了 eventloop。\n载入图片 现在我们之前写的函数都可以扬了，再重新创建一个新的 main 函数：\nfn main() { App::new() .add_plugins(DefaultPlugins) .add_startup_system(setup) .run(); } 接下来我们将在 setup 函数中实现载入图片的逻辑：\nfn setup(mut commands: Commands, asset_server: Res\u0026lt;AssetServer\u0026gt;) { commands.spawn().insert_bundle(SpriteBundle { texture: asset_server.load(\u0026#34;image.jpg\u0026#34;), ..Default::default() }); } 这就就添加了图片到游戏里面，但是我们并看不到图片，原因是我们没有添加摄像头，所以接下来我们再添加一个“正交相机”：\ncommands.spawn().insert_bundle(OrthographicCameraBundle::new_2d()); commands.spawn().insert_bundle(SpriteBundle { texture: asset_server.load(\u0026#34;image.jpg\u0026#34;), ..Default::default() }); 此外，spawn().insert_bundle(bundle) 还可以简化成 spawn_bundle(bundle)，所以上面的代码可以改成：\ncommands.spawn_bundle(OrthographicCameraBundle::new_2d()); commands.spawn_bundle(SpriteBundle { texture: asset_server.load(\u0026#34;image.jpg\u0026#34;), ..Default::default() }); 运行看看效果：\n键盘输入 为 App 增加读取键盘输入的系统：\nApp::new() .add_plugins(DefaultPlugins) .add_startup_system(setup) .add_system(keyboard_input_system) .run(); 下面编写 keyboard_input_system 函数：\nfn keyboard_input_system(keyboard_input: Res\u0026lt;Input\u0026lt;KeyCode\u0026gt;\u0026gt;) { if keyboard_input.pressed(KeyCode::A) { println!(\u0026#34;Go Left!\u0026#34;); } if keyboard_input.pressed(KeyCode::D) { println!(\u0026#34;Go Right!\u0026#34;); } } 接下来运行一下，按下键盘的 A 和 D 键，便会看到控制台出现相应的输出。另外此处的 keyboard_input 常用的方法还有两个 just_pressed() 和 just_released()，它们各自具体的用途可以自己分别试一下，看看是什么效果。\n角色移动 为了更加使函数名更加语义化，我们先把 keyboard_input_system() 改成 move_system()，然后修改函数：\nfn move_system( keyboard_input: Res\u0026lt;Input\u0026lt;KeyCode\u0026gt;\u0026gt;, mut players: Query\u0026lt;\u0026amp;mut Transform\u0026gt;, ) { if keyboard_input.pressed(KeyCode::A) { for mut player in players.iter_mut() { player.translation.x -= 1.0; } } if keyboard_input.pressed(KeyCode::D) { for mut player in players.iter_mut() { player.translation.x += 1.0; } } } 由于我们的在之前的 setup 中添加的 SpriteBundle 中含有 Transform Component，所以这里会获取到所有的 Transform。然后我们对它遍历，并修改它的 translate 属性，如果用户按 A 则角色向左移动，按 D 则向右移动。\n如果现在你试着运行，你会发现按键后角色并没有移动。之所以这样，是因为我们前面还添加了一个“正交相机”，它也具有 Transform 组件。而根据著名的锡进定律，我们易证：\n所有组件都移动了，就等于所有组件都没移动。😅\n这里体现了运动的相对性，由于相机和角色是一起移动的，所以在相机看来，角色相当于就是没有移动。\n为了解决这个问题，我们需要再给角色添加一个特殊的组件（Component）：\n#[derive(Component)] struct Player; 接着再向角色实体 Entity 添加上该 Component：\nfn setup(mut commands: Commands, asset_server: Res\u0026lt;AssetServer\u0026gt;) { commands.spawn_bundle(OrthographicCameraBundle::new_2d()); commands .spawn_bundle(SpriteBundle { texture: asset_server.load(\u0026#34;image.jpg\u0026#34;), ..Default::default() }) .insert(Player); } 最后再修改一下角色移动系统，要求查询（Query）到的角色需要含有 Player 组件：\nfn move_system( keyboard_input: Res\u0026lt;Input\u0026lt;KeyCode\u0026gt;\u0026gt;, mut players: Query\u0026lt;\u0026amp;mut Transform, With\u0026lt;Player\u0026gt;\u0026gt;, ) { if keyboard_input.pressed(KeyCode::A) { for mut player in players.iter_mut() { player.translation.x -= 1.0; } } if keyboard_input.pressed(KeyCode::D) { for mut player in players.iter_mut() { player.translation.x -= 1.0; } } } 接下来运行一下，角色就可以移动起来了。\n另外，由于这里的玩家只有一个，我们可以把 for 循环给去掉，简化一下：\nfn move_system( keyboard_input: Res\u0026lt;Input\u0026lt;KeyCode\u0026gt;\u0026gt;, mut players: Query\u0026lt;\u0026amp;mut Transform, With\u0026lt;Player\u0026gt;\u0026gt;, ) { if keyboard_input.pressed(KeyCode::A) { players.iter_mut().next().unwrap().translation.x -= 1.0; } if keyboard_input.pressed(KeyCode::D) { players.iter_mut().next().unwrap().translation.x += 1.0; } } 另外的另外，这里除了修改实体外，你也可以把玩家定义为全局唯一的资源类，这里就不再演示了。\n移动优化 我们有时候会需要获取并修改多个组件，这里可以通过元组(tuple)来查询：\nfn move_system( keyboard_input: Res\u0026lt;Input\u0026lt;KeyCode\u0026gt;\u0026gt;, mut players: Query\u0026lt;(\u0026amp;mut Transform, \u0026amp;mut Sprite), With\u0026lt;Player\u0026gt;\u0026gt;, ) { let (mut player, mut sprite) = players.iter_mut().next().unwrap(); if keyboard_input.pressed(KeyCode::A) { sprite.flip_x = false; player.translation.x -= 1.0; } if keyboard_input.pressed(KeyCode::D) { sprite.flip_x = true; player.translation.x += 1.0; } } 这里通过修改 sprite.flip_x，使角色图片在移动时随着方向的不同而进行镜面反转。\nNext Steps Bevy 的进一步学习建议阅读官方示例\n至于我自己，除了学习游戏引擎，我觉得也该去先学点画画了😥毕竟我的 Aseprite 都不知道吃灰多久了\n","date":"2021-12-19T00:01:05+08:00","image":"https://lomirus.github.io/p/bevy-tutorial/cover_huf5bbcca3084d9f76a2d0ab9f6e7b7f03_51990_120x120_fill_box_smart1_3.png","permalink":"https://lomirus.github.io/p/bevy-tutorial/","title":"Bevy v0.5~0.6 基础入门（基于 Github bevy/main Dec 18, 21 构建版本）"},{"content":"引子 众所周知，MacOS 有一个 global menu bar 的功能。不同于 Windows 会将 menu bar 单独置于每个窗口的 title bar 下面的设计，MacOS 则是将他们统一地放在 panel 上。这样不仅充分利用并节约了空间，也显得更加美观。\n然而我用的是 Linux，桌面环境是 Gnome，默认自然是没有这种功能的。幸而 Linux 的桌面环境一般可定制化程度都比较高。对于 Gnome 来说，它也有着一套自己的插件体系。因此，我一开始试着在它的官方网站上查找相关的扩展，然后就找到一款叫做 Fildem global menu 的扩展：\n可惜的是这个扩展年久失修，并不能完美支持 Gnome40（况且我用的都是 41 了），而且体验也不怎么样。比如有时当你点击 File 目录将其展开后，再将鼠标滑动到旁边的 View 栏，并不能使当前聚焦的目录自动转移过来，导致手感及其生硬。\n可我心里又始终放不下 MacOS 的 Global Menu Bar（🤤），而既然作为 Linux 用户，自然要有自己动手丰衣足食的觉悟嘛。因此我便尝试开始学习 Gnome Shell 的插件开发。\nGnome Extension 目录结构 概览 经过简单地 Google 搜索后，我找到了 Gnome Extension 开发的官方文档。\n下面简单介绍一下相关的基础知识。首先，一个扩展的目录下面一般是类似下面这种结构：\nexample@shell.gnome.org.zip locale/ de/ LC_MESSAGES/ example.mo schemas/ gschemas.compiled org.gnome.shell.extensions.example.gschema.xml extension.js metadata.json prefs.js stylesheet.css 其中，最重要并且也是唯二 required 的是 metadata.json 和 extension.js。\nmetadata.json { \u0026#34;uuid\u0026#34;: \u0026#34;example@shell.gnome.org\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Example\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;This is an example extension.\u0026#34;, \u0026#34;version\u0026#34;: 1, \u0026#34;shell-version\u0026#34;: [ \u0026#34;3.38\u0026#34;, \u0026#34;40\u0026#34; ], \u0026#34;url\u0026#34;: \u0026#34;https://gitlab.gnome.org/World/ShellExtensions/example\u0026#34; } 一个 metadata.json 的结构就类似上面这样，但凡有点开发经验的人都能看出来每条规则代表什么意思，我这里也就不多讲废话了。如果有对哪几项不确定的，建议直接去翻官方文档的介绍：metadata.json (Required)\nextension.js 这个是扩展的核心文件，里面需要提供三个方法：init(), enable(), disable()。你可以像这样提供：\nclass Extension { constructor() {} enable() { log(\u0026#34;enabled\u0026#34;); } disable() { log(\u0026#34;disabled\u0026#34;); } } function init() { log(`initializing`); return new Extension(); } 也可以这样：\nfunction enable() { log(\u0026#34;enabled\u0026#34;); } function disable() { log(\u0026#34;disabled\u0026#34;); } function init() { log(`initializing...`); } 然后接下来最让我恼火的就来了。首先，开发扩展，必然要调用相关程序提供的 API 接口，因此，我就要去阅读相关文档。然而离谱的是，Gnome Shell 的 API 根本没有文档！！！文档中给的 GNOME APIs 的文档地址 访问返回 502 Bad Gateway，页面右上角的 API References 也根本不是并不是我要的那些。真正的 API 在文中是这么说的：\nHere are a few links to some commonly used modules.\nYou can browse around in the js/ui/ folder or any other JavaScript file under js/ for more code to be reused.\n然后下面给了相关链接，其中 js/ 对应的链接是：https://gitlab.gnome.org/GNOME/gnome-shell/-/tree/main/js/，我于是随便翻开了一个页面：\n我翻开文档一查，这文档没有排版，歪歪斜斜的每叶上都写着“/***/function”几个字。我横竖睡不着，仔细看了半夜，才从字缝里看出字来，满本都写着两个字是“源码”！\n我只能说大受震撼，我不理解，为什么它要让我直接看源码，明明我只要函数名参数返回值加注释就够了，然而加上源码之后翻起来麻烦得离谱，况且有些方法甚至都没有注释。更奇怪的是，源码中还把 private methods 暴露给了我，什么露出Play😅？（你只能眼巴巴地看着私有 API 为了遵守代码规范却又调不了气急败坏的样子真的很好笑呢~🤗）。为什么呀为什么😤？\n我实在我也不是谦虚，我一个调 API 的怎么看源码来了呢？但是呢，gnome-shell 讲“大家已经研究决定了”，所以后来我就唸了两首诗，叫“苟利国家生死以，岂因祸福避趋之”，那么所以我就直接翻源码了\n后续 就这样，将近过去了两周，这个项目还是没有什么进展。本来还想着能参考着一些其他扩展的源码，照葫芦画瓢，还能大体写出个样子呢。不过可能由于我只是一时兴起，开发文档又极其简陋，所以最终还是这样搁置了下去。目前的进度，倒是写出了目录栏，不过还只是写死的，还需要增加检测到焦点窗口切换时自动更新菜单栏内容的功能。所以先把源码贴一下，万一能帮到什么人呢（不过话说真的会有人接手这个屎山吗？）\nconst St = imports.gi.St; const GObject = imports.gi.GObject; const Gio = imports.gi.Gio; const Clutter = imports.gi.Clutter; const Shell = imports.gi.Shell; const WinTracker = imports.gi.Shell.WindowTracker.get_default(); const Main = imports.ui.main; const PanelMenu = imports.ui.panelMenu; const PopupMenu = imports.ui.popupMenu; const Me = imports.misc.extensionUtils.getCurrentExtension(); const buttonTexts = [\u0026#34;File\u0026#34;, \u0026#34;Edit\u0026#34;, \u0026#34;Selection\u0026#34;, \u0026#34;View\u0026#34;, \u0026#34;Go\u0026#34;, \u0026#34;Run\u0026#34;, \u0026#34;Terminal\u0026#34;, \u0026#34;Window\u0026#34;, \u0026#34;Help\u0026#34;] .reverse(); let MenuButtons = []; /** * @type {(title: string) =\u0026gt; any} */ const MenuButton = GObject.registerClass( class PopupClass extends PanelMenu.Button { /** * @type {(title: string) =\u0026gt; void} */ _init(title) { super._init(0); this.add_child(new St.Label({ text: title, y_align: Clutter.ActorAlign.CENTER })); let item = new PopupMenu.PopupMenuItem(\u0026#39;Test\u0026#39;); this.menu.addMenuItem(item); } } ) function init() { } function enable() { for (let i = 0; i \u0026lt; buttonTexts.length; i++) { MenuButtons.push(new MenuButton(buttonTexts[i])); Main.panel.addToStatusArea(buttonTexts[i], MenuButtons[i], 2, \u0026#39;left\u0026#39;); } // const focusApp = WinTracker.focus_app; // if (!focusApp) return; // const focusWindow = focusApp.get_windows()[0]; // if (!focusWindow) return; // const names = []; // for (let name in focusWindow) { // names.push(name) // } // log(names) // global.display.connect(\u0026#39;notify::focus-window\u0026#39;, (e) =\u0026gt; { // log(\u0026#34;focus something\u0026#34;); // log(e) // }); } function disable() { for (let i = 0; i \u0026lt; MenuButtons.length; i++) { MenuButtons[i].destroy(); } MenuButtons = [] } ","date":"2021-11-29T00:16:00+08:00","image":"https://lomirus.github.io/p/gnome-extention-development/cover_huc5fd00db66fd6af7b2bacec5fd3acda5_130750_120x120_fill_q75_box_smart1.jpg","permalink":"https://lomirus.github.io/p/gnome-extention-development/","title":"一次失败的尝试开发 Gnome Extension 经历"},{"content":"前言 首先简要介绍一下 Hall of Fame 吧，这其实就只是我自己开发的一个用于管理、分发我的一些朋友们的聊天记录截图表情包的 App。本来是想着和朋友合作，自己只负责后端开发来着，然而负责 Android 和 Web 客户端开发的那边一直还有其他需求，导致这边的工期一直在鸽。到了后面，我就接手的这个项目的客户端方面的开发，然而上面的其实并不是主要原因。主要还是因为最近我对 Flutter 这种大前端的技术栈比较感兴趣，想要学习一下。而且这个 App 的复杂度又恰到好处，因此就正好使用它来练手了。\n总的来说，Flutter 的上手难度在我个人角度看来还算是比较简单的。从从未接触过 Flutter，到独立开发出一个相对完整的 App，中间也不过只有两周左右。另外从一名 Web 前端开发者的视角来看，使用 Flutter 开发界面的难度还是要相对高于传统的 Web 开发的，尤其是在自定义方面，一旦写起样式来各种嵌套又要写一堆了\u0026hellip;但是 Google 默认提供的 Material Design UI 库对于没有视觉要求的指定风格的情况来说还是蛮够用的；另外官方也提供了一套 iOS 风格的 Cupertino UI 库，但是我还没有尝试过这个，不知道实际体验效果如何。至少就此来看，使用 Flutter 来进行一款跨端的小品类应用开发确实是一项不错的选择。至于大型项目，虽然 Flutter 版本已经迭代到了 2.5+，但是相对于其他已经发展了数年的 Native/Web 开发方案来说，还不能说是特别成熟。就比如我在下文中提到的一些坑，至今官方还没有提供相应的瀑布流库。闲鱼对此选择的路线则是自研，不过我种初学者自然是没有人家这种专业团队的实力，于是只能乖乖的在社区里找一些开源库先用着。\n至于性能方面，就我的 Hall of Fame 而言，采用 Release 模式下在 Android 平台上是几乎感受不到与 Native App 的差距的，包括我的做 Android 开发的朋友对此也是赞叹有加。另外说来离谱，在 Linux 环境下，用 C++ 编译成原生 Linux 二进制的可执行程序的动画性能，是肉眼可见地低于在 Linux 平台下 Chrome 上的性能的。Linux 原生程序运行时可以明显的看到掉帧，而在 Windows 和 Chrome 上则比较流畅。\n下面贴下这个项目的 Github 地址：https://github.com/hall-of-fame/hof-flutter-md，以及首屏图：\n下面则是讲一下我在使用 Flutter 进行开发的过程中遇到的一些问题：\n导航栏标签页 keep-alive 一般的标签页切换 在 Flutter 中，如果我们想通过 BottomNavigationBar 实现一个简单的标签页切换功能，可以在官方文档对于 BottomNavigationBar class 的介绍看到一些简单示例。这里我们以之为基础，再次对其进行简化，可以得到下面一个只有 32 行的简单结构：\nclass MyStatefulWidget extends StatefulWidget { const MyStatefulWidget({Key? key}) : super(key: key); State\u0026lt;MyStatefulWidget\u0026gt; createState() =\u0026gt; _MyStatefulWidgetState(); } class _MyStatefulWidgetState extends State\u0026lt;MyStatefulWidget\u0026gt; { int _selectedIndex = 0; static const List\u0026lt;Widget\u0026gt; _widgetOptions = \u0026lt;Widget\u0026gt;[ Text(\u0026#39;Index 0: Home\u0026#39;), Text(\u0026#39;Index 1: Settings\u0026#39;), ]; Widget build(BuildContext context) { return Scaffold( body: Center(child: _widgetOptions.elementAt(_selectedIndex)), bottomNavigationBar: BottomNavigationBar( items: const \u0026lt;BottomNavigationBarItem\u0026gt;[ BottomNavigationBarItem( icon: Icon(Icons.home), label: \u0026#39;Home\u0026#39;, ), BottomNavigationBarItem( icon: Icon(Icons.settings), label: \u0026#39;Settings\u0026#39;, ), ], currentIndex: _selectedIndex, onTap: (int index) =\u0026gt; setState(() =\u0026gt; _selectedIndex = index), ), ); } } 问题引入：无法保存组件状态 事实上，对于上文中的最小样例，这么写是完全没有问题的。但是随着软件功能的复杂化，一些问题可能就会暴露出来。比如，我们将上文中的 Text 组件换为 TextField 标签试一下：\nclass MyStatefulWidget extends StatefulWidget { const MyStatefulWidget({Key? key}) : super(key: key); State\u0026lt;MyStatefulWidget\u0026gt; createState() =\u0026gt; _MyStatefulWidgetState(); } class _MyStatefulWidgetState extends State\u0026lt;MyStatefulWidget\u0026gt; { int _selectedIndex = 0; static const List\u0026lt;Widget\u0026gt; _widgetOptions = \u0026lt;Widget\u0026gt;[ TextField(), TextField(), ]; Widget build(BuildContext context) { return Scaffold( body: Center(child: _widgetOptions.elementAt(_selectedIndex)), bottomNavigationBar: BottomNavigationBar( items: const \u0026lt;BottomNavigationBarItem\u0026gt;[ BottomNavigationBarItem( icon: Icon(Icons.home), label: \u0026#39;Home\u0026#39;, ), BottomNavigationBarItem( icon: Icon(Icons.settings), label: \u0026#39;Settings\u0026#39;, ), ], currentIndex: _selectedIndex, onTap: (int index) =\u0026gt; setState(() =\u0026gt; _selectedIndex = index), ), ); } } 如果你试着跑了一下上文的代码，你会发现代码依旧可以通过编译，也可以正常运行。但是如果你在其中一个 TextField 输入了一段文字，然后点击底部导航栏切换到了另一个标签页，然后再切换回来，你会发现你之前在 TextField 的内容已经被清空掉了。\n这是因为，当你切换到另一个标签页时，Flutter 会将原先的标签页的组件给销毁掉，并创建一个新的你所选择的标签页（或者说是组件）。当你返回原来的页面时，也会执行一遍同样的操作，这时，这个页面已经不是原来的那个页面了。\n如果我们使用是的 React (Native) 或者是 Vue，我们可以简单地通过 \u0026lt;keep-alive\u0026gt; 标签达到状态保存的目的，但是 Flutter 似乎就没有这么方便了😥。\n解决方案：Automatic Keep Alive Client Mixin 于是然后我在 Google, StackOverflow, Github 上的一番求索，最终所找到的解决方案，都还是不太完善，比如可能会触发组件多次不必要的重新渲染，使用 Stack \u0026amp; Opacity 隐藏组件导致性能问题等等。最后，反而是在俄语课课间休息摸鱼时在知乎上找到了一个解决方案。\n这个方案使用的是 AutomaticKeepAliveClientMixin，按照它的方法，对上文中的示例代码进行修改后可得：\nclass RootScreen extends StatefulWidget { _RootScreenState createState() =\u0026gt; _RootScreenState(); } class _RootScreenState extends State\u0026lt;RootScreen\u0026gt; { PageController _pageController = PageController(); int _pageIndex = 0; Widget build(BuildContext context) { return Scaffold( body: PageView( children: \u0026lt;Widget\u0026gt;[ HomeScreen(), SettingsScreen(), ], controller: _pageController, onPageChanged: (index) =\u0026gt; setState(() =\u0026gt; _pageIndex = index), ), bottomNavigationBar: BottomNavigator( selectTab: (index) =\u0026gt; _pageController.jumpToPage(index), selectedIndex: _pageIndex, ), ); } } 以其中的 HomeScreen 为例：\nclass HomeScreen extends StatefulWidget { _HomeScreenState createState() =\u0026gt; _HomeScreenState(); } class _HomeScreenState extends State\u0026lt;HomeScreen\u0026gt; with AutomaticKeepAliveClientMixin { bool get wantKeepAlive =\u0026gt; true; Widget build(BuildContext context) { super.build(context); return Center(child: Text(\u0026#34;Home\u0026#34;)); } } 即可。\nRef: Flutter Case Study: Multiple Navigators with BottomNavigationBar\n瀑布流展示 Scrollable View 嵌套 当我们尝试在可滚动 View（如ListView/GridView ）中的 children 中嵌套可滚动 View 时，会出现以下报错：\n════════ Exception caught by rendering library ═════════════════════════════════ The following assertion was thrown during performResize(): Vertical viewport was given unbounded height. Viewports expand in the scrolling direction to fill their container. In this case, a vertical viewport was given an unlimited amount of vertical space in which to expand. This situation typically happens when a scrollable widget is nested inside another scrollable widget. If this widget is always nested in a scrollable widget there is no need to use a viewport because there will always be enough vertical space for the children. In this case, consider using a Column instead. Otherwise, consider using the \u0026#34;shrinkWrap\u0026#34; property (or a ShrinkWrappingViewport) to size the height of the viewport to the sum of the heights of its children. 这时我们在内层的 View 中可以插入 shrinkWrap: true，即可解决报错。但是此时这个 View 将会无法滚动，我们可以继续在后面插入： physics: NeverScrollableScrollPhysics()，即可完美解决以上问题。\nflutter_staggered_grid_view 库的简单使用 flutter_staggered_grid_view 是一个可以便捷实现瀑布流布局的 Flutter 库。一般地，要想使用它，我们需要首先导入：\n### file: pubspec.yaml dependencies: // ... flutter_staggered_grid_view: ^0.4.1 /// file: your_widget.dart import \u0026#39;package:flutter_staggered_grid_view/flutter_staggered_grid_view.dart\u0026#39;; 由于官方文档比较残缺，所以这里简要记录一下对于“内部组件宽度相同、数量不定的纵向瀑布流”的实现：\nreturn ListView( padding: EdgeInsets.all(20), children: [ // 此处省略部分固定且无关的组件... StaggeredGridView.countBuilder( // 横向分两个“比例” crossAxisCount: 2, // 防止嵌套 Scrollable View 导致报错 physics: NeverScrollableScrollPhysics(), // 防止本例中的 ListView 无法滚动 shrinkWrap: true, // 样式相关 mainAxisSpacing: 4.0, crossAxisSpacing: 4.0, // 组件的数量，不填会一直调用 itemBuilder 并不断抛出异常 itemCount: filtedStickers.length, // 对于给定的 index，返回对应组件实例 itemBuilder: (context, index) =\u0026gt; StickerCard(filtedStickers[index]), // 对于给定的 index，返回对应组件的宽度占比（相对于 crossAxisCount） staggeredTileBuilder: (index) =\u0026gt; const StaggeredTile.fit(1), ), ], ); ","date":"2021-10-19T15:30:00+08:00","image":"https://lomirus.github.io/p/first-meet-to-flutter/cover_huf7a57ca01dd62cd64befafa39a2c7819_77572_120x120_fill_box_smart1_3.png","permalink":"https://lomirus.github.io/p/first-meet-to-flutter/","title":"与 Flutter 的初次接触（以及开发 Hall of Fame 的踩坑记录）"},{"content":"缘起：自动生成狗狗表情包 前几天找朋友给我加需求，钰姐便提了个“自动生成狗狗表情包”的需求。不过如果真的按照需求的原意，唯一的解决方案就只有用到人工智能了。然而本人技术力实在过菜，才不匹位，只能退而求其次，找一些其他的解决方案了。\n废案：爬取QQ历史头像 一开始想到的解决方案，自然是利用爬虫，这也正是本文的主要内容。后来由于细(xián)致(zhe)入(méi)微(shì)的观察，发现钰姐经常更新一些狗狗头像。于是便有了新思路，能否通过自动定时爬取钰姐的QQ头像，以自动获取狗狗表情包呢？\n关于这个思路，我一开始想到的是利用“获取QQ头像”的接口进行轮询，计算当前头像哈希值并与上一次获取到的头像的哈希值作比较，若不同则保存下载。但是轮询的时间间隔实在不太好设定。因为头像的更新时间并不固定，可能一天更新数次，也可能数天更新一次。如果设定轮询间隔时间过短，会导致服务器压力过大，严重的话说不定腾讯会直接把我给 ban 了。而如果设定轮询间隔时间过长，便会导致获取到的头像大概率是有遗漏的。\n考虑到更新头像终究是由人类来完成的，因此也需要考虑到利用一些社会工程学信息以对程序进行优化。比如在深夜凌晨的时候，可以适时停止爬虫以降低负载。但是考虑到这个作息规律\u0026hellip;咳咳\u0026hellip;还是算了吧，毕竟昨晚凌晨还刚刚看到钰姐又换了新头像来着。\n（那既然我能发现别人在熬夜内卷，那岂不是说明我也是在熬夜摸鱼?）\n（啊这，好像有道理诶😥）\n又考虑到人类是一种优柔寡断的生物，所以每次换完头像后的一段时间内，都有较高的概率再次换个头像。因此在侦测到头像更新后，可以调高在未来一段短时间内的轮询频率。但是这也不能排除在提高轮询频率之前的遗漏情况。\n况且，这个解决方案所收集到的表情包数量还是及其有限的，如果想要收集到足够数量的头像，估计早过 deadline 了。\n综上所述，这个方案还是被 pass 掉了。\n预备：从 Selenium 到 Puppeteer 上面的方案废弃后，自然便是在网上找一些适合爬取的网站进行爬虫了。\n在知乎上搜索“狗狗表情包”关键字，回答数量最多的问题下也不过只有十几个回答。Pass。\n找到一些表情包网站，搜索关键字，质量过低。Pass。\n百度图片搜索关键字，结果还行，然而对百度没什么好感，有谷歌我还用什么百度。Pass。\n于是将目标锁定到了 Google Images.\n预调试阶段，利用 devtools 的 network 栏发现虽然图片是动态加载，但是并没有使用 Fetch/XHR，而是在发送了一些 Other 类的 imgevent 请求，具体原理我也不清楚。因此这里也不能用普通的 Request 解决了。之前记得听说过一种叫做 Chrome headless 的东西，搜索之后发现了 Selenium，遂开始准备学习 Selenium 进行爬虫。不过文章写到这儿的时候又发现了 Google 搞了个 Puppeteer 东西，貌似对 NodeJS 更加易用一些，然后便又转战 Google Puppeteer 了。\nPuppeteer 的官方介绍：\nPuppeteer is a Node library which provides a high-level API to control Chrome or Chromium over the DevTools Protocol. Puppeteer runs headless by default, but can be configured to run full (non-headless) Chrome or Chromium.\n自己稍微翻译一下：\nPuppeteer 是一个 Node 库，它在 DevTools 协议之上提供了高度封装的 API，以用来控制 Chrome 或 Chromium. Puppeteer 会默认运行 headless, 但是可以通过进行配置来运行完整版的 (non-headless) Chrome 或 Chromium.\n正文：就硬爪巴 首先看一下 Puppeteer 的官方文档。\n接着老三样：\nmkdir dog-stickers cd dog-stickers npm init -y echo node_modules \u0026gt; .gitignore git init 安装 puppeteer：\nnpm install puppeteer 如果没有自动下载 Chromium，需要自己手动下载：\ncd node_modules/puppeteer npm install 接下来写个 demo 测试一下，在项目根目录新建一个 index.js，写入：\nconst puppeteer = require(\u0026#39;puppeteer\u0026#39;); (async () =\u0026gt; { const browser = await puppeteer.launch(); const page = await browser.newPage(); await page.goto(\u0026#39;https://example.com\u0026#39;); await page.screenshot({ path: \u0026#39;example.png\u0026#39; }); await browser.close(); })(); 然后 node index.js，如果项目根目录下面生成一张截图文件，说明安装成功了。\n然后只要再稍微加几行代码（迫真），我们的程序就完成了：\nimport { promises as fs } from \u0026#39;fs\u0026#39;; import puppeteer from \u0026#39;puppeteer\u0026#39;; async function isReachedBottom(page) { return await page.evaluate(() =\u0026gt; { const scrollHeight = document.documentElement.scrollHeight; const clientHeight = document.documentElement.clientHeight; const scrollTop = document.documentElement.scrollTop; return scrollHeight === Math.round(clientHeight + scrollTop); }) } async function getLoadingStatus(page) { return await page.evaluate(() =\u0026gt; { return document.querySelector(\u0026#34;.DwpMZe\u0026#34;).getAttribute(\u0026#39;data-status\u0026#39;) }) } (async () =\u0026gt; { const browser = await puppeteer.launch({ headless: true }); const page = await browser.newPage(); /* 这里要重新设置视窗大小， 一是因为默认的视窗大小会导致浏览器出现横向滚动条，调大窗口可以方便调试， 二是因为我猜测 Google Images 对于不在视窗范围内的图片 URL 可能不会进行加载， 使用默认视窗大小总会出现大量 Empty 的情况，不知道是不是我猜测的原因。*/ await page.setViewport({ width: 1280, height: 720, }); await page.goto(\u0026#39;https://www.google.com.hk/search?q=image\u0026amp;tbm=isch\u0026#39;); // 滚（doge /* 这里 scrollBy 和 waitForTimeout 的参数大小都是经过 N 多次调试确定的， scrollBy 太大、waitForTimeout 太小会因为滑动过快而导致出现遗漏情况，反之则会导致耗时过长。 这里的参数和运行环境的网速、配置等都有关系，所以在其他 PC 上并不能保证能够完美运行。*/ while (true) { await page.evaluate(() =\u0026gt; window.scrollBy(0, 200)) await page.waitForTimeout(100); if (await isReachedBottom(page)) { if (await getLoadingStatus(page) !== \u0026#34;1\u0026#34;) break; else console.log(`Loading new images...`) }; } // 爪巴.jpg const images = await page.evaluate(() =\u0026gt; { const list = [...document.querySelector(\u0026#39;.islrc\u0026#39;).children]; return list.map(div =\u0026gt; div.firstChild.firstChild.firstChild.src) }) console.log(`All: ${images.length}\\nEmpty: ${images.filter(src =\u0026gt; src === \u0026#34;\u0026#34;).length}`) // 拿来吧你.jpg await fs.writeFile(\u0026#39;images.json\u0026#39;, JSON.stringify(images, null, 4)); // 今天的狗狗就看到这儿了.jpg await browser.close(); })(); 说几个要注意的点，首先是我使用了 import 语句，所以需要在 package.json 中加一行 \u0026quot;type\u0026quot;: \u0026quot;module\u0026quot;。其他需要注意的点都写在代码注释里面了，这里就不赘述了。\n程序运行完成之后会在项目根目录创建 images.json 文件，里面保存图片的 URL 地址。其中有些是图片链接，有些是直接以 base64 的形式储存起来，还有的是 null。至于为什么会出现 null 我也懒得去深究了，反正总数还是很少的。\n对了，Puppeteer 的文档有这样一段话：\nPuppeteer has event-driven architecture, which removes a lot of potential flakiness. There’s no need for evil “sleep(1000)” calls in puppeteer scripts.\n感觉我代码里面也没少写 sleep() 呀😅，也许只是因为我太菜了吧。\n下载 获取到 images.json 后就好说了，遍历链接下载即可：\nimport { promises as fs } from \u0026#39;fs\u0026#39;; import download from \u0026#39;download\u0026#39;; async function downloadFromBase64(path, url) { const data = url.replace(/^data:image\\/\\w+;base64,/, \u0026#34;\u0026#34;); await fs.writeFile(path, data, \u0026#39;base64\u0026#39;); } async function downloadFromUrl(path, url) { await fs.writeFile(path, await download(url)); } (async () =\u0026gt; { const links = JSON.parse(await fs.readFile(\u0026#34;images.json\u0026#34;, { encoding: \u0026#34;utf-8\u0026#34;})); links.forEach(async (link, index) =\u0026gt; { if (/^http/.test(link)) { await downloadFromUrl(`images/${index}.jpeg`, link) console.log(`Downloaded images/${index}.jpeg...`) } else if (/^data/.test(link)) { await downloadFromBase64(`images/${index}.jpeg`, link) console.log(`Downloaded images/${index}.jpeg...`) } }) })() Google Images 的预览图好像都是 jpeg 格式的，所以这里就全部默认扩展名为 jpeg 了。\n下载的图片会保存在项目根目录的 images 文件夹。\n总结 通过这个项目，主要是学习了一点 Puppeteer 的基础使用（真的是非常基础了），尽管自己写的代码并不怎么优雅。不过日后也不知道也不知道还能不能再用到这个库。另外就是感觉自己最近一个月正经项目没怎么写，反倒是各种脚本都写了一堆了😹\n","date":"2021-08-28T12:42:00+08:00","image":"https://lomirus.github.io/p/puppeteer-dog-stickers/cover_huc6897c2f5887580bd568d12d3c01737e_12632_120x120_fill_q75_h2_box_smart1_2.webp","permalink":"https://lomirus.github.io/p/puppeteer-dog-stickers/","title":"使用 Puppeteer 爬取 Google Images 狗狗表情包"},{"content":"零 做这个感觉就是我单纯中二病犯了，暑假作业还没写完呢，就来整这个。不过作业毕竟也写不下去，写代码吧也是写不下去，感觉最近几天实在是太颓了。害~\n永真 - 出场 忍びよ、目覚めて下さい。貴方の、主の為に。\n弦一郎 - 芦苇原 久しな、御子よ。（おじゅうん？）の（ぼうぜん？）以来か。\n久しいな、御子よ。叔父上（おじじょう）の墓前（ぼぜん）以来か。\n久し 作为形容词少了个 い，此处应为 久しいな，无论是从长音还是语法上原来听的都不算对\u0026hellip;\n另外有两个生词，叔父上（おじじょう）和墓前（ぼぜん）\n弦一郎旦那。あたしはっ。済まぬ。\n弦一郎殿。あたしは。済まぬ。\n旦那（だんな） 与 殿（どの） 均有表示XX大人的意思，此处应用 殿（どの）\n御任せよ。\n御任せを。\n这里在语法上确实有些区别，不过在句意的理解上没啥影响。\n邪魔だってするか、御子のしのびよ。\n邪魔立てするか、御子のしのびよ。\nんっなれ、😵\nお、のれ、😵\nん？🤨\nは！😏\n忍びよ、（ヒキ？）事は（ユウマイ？）な。御子は貰って行くぞ。\n忍びよ、卑怯（ひきょう）とは言うまいな。御子は貰って行くぞ。\n弦一郎 - 天守阁 御爺様の（ごうゆうす？）はどうだ。\n御祖父様のご様子（ようす）はどうだ。\n日语里同音词这个设定真的离谱。\n一心様は、命を保って（ウラレル？）のは、不思議の事です。\n一心様は、命を保っておられるのは、不思議のほどです。\nおられる 是 居る（おる） 的敬语形式\nそうか。\n御子よ、もう一度と言う。不死の契りを俺と（もすぶ？）\n御子よ、もう一度言う。不死の契りを、俺と結べ（むすべ）\n結べ 是 むすぶ 的命令形\n出来ませんぬ、弦一郎旦那。\n出来ませんぬ、弦一郎殿。\n不说了，同上。\n（たとえひとたび？）敗れるのも、命を落とし、主に必ず取り戻し、其れが、我が忍びなれば。\nたとえ一度、敗れる（やぶれる）とも、命を賭し（とし）、主に必ず取り戻す、それが、我が忍びなれば。\n仮令（たとえ）...とも/ても 表示纵使、即使。\nお迎えに参上しました。今暫く、御待ち下さい。\nお迎えに参上いたしました。今、暫く、お待ち下さい。\nなるほどな。貴様を殺し（きらぬかぎる？）、龍胤を我が手に出来ぬよ。\nなるほどな。貴様を殺し切らぬ限り、龍胤を、我が手にはできぬような。\n見事な、忍びよ。\n見事な、御子の忍びよ。\n惜しいな、主を換える積りは無いか。\n（ざれ？）事。\n戯言（ざれごと）を。\n（ざれ？）事だと？俺は、此の葦名を守る為なれば、どうの（？？？）力で有れ、（したかえち？）見せる。（ともえ？）の雷、見せてやろ。\n戯言だと？俺は、此の葦名を守る為なれば、どうの異端の力で有れ、縦えて見せる。巴（ともえ）の雷、見せてやろ。\n这里弦一郎说 異端 的时候声音实在太小了，听不清。不过就这个单词本身而言我还算挺熟的，甚至还记得第一次是在哪儿见到的。如果没记错的话，应该是在看《进击的巨人》里面前几话的时候，里面阿尔敏在被几个小混混揍的时候被称为 異端者，所以我当时就顺手查了下词典记下了。\n葦名は、此の国は、俺の全てだ。其の為なら、俺は、人間を止めよ。\n葦名は、此の国は、俺の全てだ。其の為なら、俺は、人間を止めよう。\n我不做人了，JoJo！ 这段话着实印象深刻，甚至可以说我就是冲着这段来的🤣️\n（しびりと？）帰りか？\n死人（しびと）帰りか？\nさあ。\nさらば。\n弦一郎、一心 - 芦苇原 九郎様。\n久しいな、御子の忍び。見よ、不死斬りの（もうひとふり？）よ。\n久しいな、御子の忍び。見よ、不死斬りのもう一振りよ。\n一振り 在这里可以认为是量词，例如 Moji 辞書 上有一个例句：ひと振りの太刀（たち），意为 一把大刀\n弦一郎旦那、其の用の物では、（けんしで？）葦名の運命は、変わりませぬ。狼よ、龍胤等、誰の手に有るべきではないのだ。九郎を（かける？）な。\n弦一郎殿、其のような物では、決して（けっして）葦名の運命は、変わりませぬ。狼よ、竜胤等、誰の手にも、有るべきではないのだ。苦労をかけるな。\n把 苦労 听成 九郎 可太草了，不过毕竟只狼整天九郎九郎得叫，听错也不能全怪我嘛（\n其实当初听的时候就感觉很奇怪：把 九郎 给 かける 了是几个意思，应该是我听错了不是 かける 吧？没想到这里没听错，错的反而是前面。\n（ぎょうい？）。前る（まえる）。\n御意（ぎょい）。参る（まいる）。\n还是为 前る 是名词活用做动词\u0026hellip;结果发现原来是我自己生造的。\n嗚呼、（しまいとしゅう？）。\n嗚呼、終いとしよう。\n俺は、（きっきょく？）何も出来なかった。だっが、龍胤が、此の国を生かす。此れで葦名の夕（ゆう）は、開ける。ほんっ。\n俺は、結局（けっきょく）、何も出来なかった。だが、竜胤が、此の国を生かす。此れで葦名の夜（よ）は、明ける。\n划开/开启苇名的的日暮/夕阳 v.s. 苇名的黑夜即将破晓. 好像都能解释得过去（\n“结果我到头来，还是什么都没有做到”，划重点，感觉这句话放在这里对弦一郎的人物刻画真的是太适合了，尤其是那种体现出的无力与不甘。不过感觉其实我也和弦一郎差不多，终究是，“结果我到头来，还是什么都没有做到”😮‍💨️。\n哀れな（まも？）の、最後願えじゃ。わしは此の葦名を、（ゆみがえなせんねばなら？）、（ゆえに？）、隻狼、（おまし？）を斬るぞ。\n憐れな孫（まご）の、最後の願い（ねがい）じゃ。儂は此の葦名を、黄泉帰らせぬばならぬ、ゆえに隻狼、お主を斬るぞ。\n黄泉 一词太生僻了，怨不得我呀😭\n在 “憐れな孫（まご）の、最後の願い（ねがい）じゃ” 这句话的中文翻译中，憐れな孫 被翻译为 可怜孙儿，这种带有陌生而又熟悉的感觉的称谓，确实莫名地使我同情起了弦一郎。\n这是我可怜孙儿的，最后的愿望啊。\nかあ。やれ。（みごこ？）じゃ、隻狼。\nかあ。やれ。見事じゃ、隻狼。\nさらば。\n","date":"2021-08-26T00:00:00+08:00","image":"https://lomirus.github.io/p/sekiro-dictation/cover_hua91090e55ff23bbed1fcc151a5e52513_4702921_120x120_fill_box_smart1_3.png","permalink":"https://lomirus.github.io/p/sekiro-dictation/","title":"『隻狼』名シーンの日本語台詞を書き取りの練習"},{"content":"一 自上次期中总结过去也差不多两个月了，期末考试也已经过去了一个月，按说我早该动手这篇文章了，但实际上却迟迟没有动笔。这并不是说我没有时间如何如何，只是我变的愈发懒散了，于是乎便少了份写博客的动力。\n回忆起我之前每次写博客，无非是想去说什么什么，却无处施展，于是便到自己的博客上胡绉。既然如此，那每次博文的开头便少不了牢骚抱怨。每当自己去浏览自己的旧文，便发觉自己只是一个丧丧的駄目人間，不免心生愧意：将自己如此劣质的文字公诸网路，实属制造垃圾资源。又“于是乎”地，废弃了自己的博客。而这正是我上一个博客的结局。\n但是，有时候确实有些东西不吐不快。长久地将烦闷郁结在心中，绝然不能称之为一个好习惯。如此向来，将自己的博客作为自己倾吐不快的垃圾场，也算是物尽其用了。\n而今天之所以动笔，也自然是因为自己心中有所郁结，不得通其道，故述往事，思来者。\n二 从暑假开始计算，我们先是度过了一个毫无意义的军训。哦不对，话其实也不能这么说，因为其一，军训的存在令我厌恶，这也可以算是它的意义；其二，总有一些人居高临下，颐指气使的斥责鄙夷这那些吐槽军训的学生，这样看来，它们想必很热爱军训吧！毕竟军训也是福报不是？\n军训结束，我们搬迁了宿舍，搬迁宿舍本身没啥，反正我也我待了一年的舍友也没什么感情。另外虽说是“自由组队”，却还是组合到了有至少三个陌生同学的宿舍。\n然后是大约一周多的自由时间，就用来一边开发项目，一边继续学习 Vue。\n最后是为期一个月的暑期培训，截至写到本文的此段时，已过五天。这五天，则一直是在忙于开发《学长学姐帮帮忙》了。\n其间我的一位朋友问过我一个问题，他问，你如何判断一个开发者的能力高低？就拿前端来说，你的能力与开发多年的前端大佬有哪些区别？\n这个问题确实有点把我问住了。我便凭感觉回答道，可能是对一些框架的掌握和原生API的熟练程度吧。\n但是他则认为，只会用框架调接口未免太“脚本小子”了。我无法反驳，尽管实际上，大多数开发岗也无非都是做着搬砖的活。\n这是他的第一次问我这个问题，后面也有第二次提问。\n不过在他上次提问过后，我回去后其实也并没有进行过多的深入思考。但我还是尝试给出了与上次不同的答案。\n这次我提到了一个人的知识面的广度，譬如我个人，虽说只是一名切图仔，但是在其他方面也多有涉猎，倘以我们网校的部门举例，我首先是本来就在后端待过半年，在 SRE 也学习过一段时间，开发过一些 Android Apps，甚至还尝试学习像素画（这条还是忽略吧）。我个人以为，在网校范围内，前端本身（特指大前端/全栈）可能是仅次于运维的全栈部门了。\n不过这样的我其实也有一些问题：接触的挺多，深入的却很少。前端本身各种轮子层出不穷，更新迭代很快。真正喜欢前端的人，也常常痴迷于新技术。最近我在网校讲授了一节前端框架相关的课，讲到 TypeScript 时，顺口提了一下 Deno。而学员里有个同学和一勤奋蜂的前端学长聊天时提到了这个，于是勤奋蜂的那位学长便表示想和我聊一下天。那天，我们聊了许多。他也是喜欢新生技术的人。他说，他想要在 WebGL，WASM，Deno 里面的选择一个去深入学习。说来惭愧，虽然我对这些都早有耳闻，但却没有一个能称得上是比较深入了解的。我们网校的学姐也说过我们，喜欢新技术很好，但不要每次都是写了一个 Hello World 之后就扔一边儿了。而彼时，我也正如其所言，丢掉了刚做完一个 Hello World 的 Tarui。\n三 我感觉自己似乎处在某个瓶颈期，基础知识学得都差不多了，但是每当面对浩如烟海的前端进阶内容，却不知从何学起。也许刚踏入大学时，我还算比较有优势。但是随着时间的推移，我逐渐发现自己的优势正在逐渐消逝，泯然众人。我几乎已经很难说出在某个领域能够完胜其他学员了。\n但是学长却说，我们这个阶段恰好是最容易提升的时期。\n仔细想想，其实好像也对，我们现在的能力，也足以支撑我们去学习新的知识、独立开发项目和参与开源社区之类的了。\n正如狄更斯所言：\nIt was the best of times, it was the worst of times.\n四 上面大部分都还是技术方面的内容，周期总结也可以算是我的 routine 了。但其实，都并非我我写这篇文章的直接原因。\n直接原因也很简单，便是见到了某个人，使我回想起了某些事，以及随之而来的一系列巧合，让我再次怀疑世界的真实性。\n这种感觉，估计得追溯到初中，从我的 depression 开始。\n我似乎每个寒假都不会有什么好事儿，尽管坏事儿也都不一定是在寒假。\n有些事我希望它能够从未发生过，例如上次。但也有些事，例如初中的某次寒假，我对它的记忆其实很模糊，因为我曾竭力试图将其忘记，它使得我第一次对世界与自身的存在的意义产生怀疑；但是现在看来，我也很庆幸我有那段经历，它也重塑了我的人生观。\n但是有些事情实在过与巧合，不过也许只是我的幸存者偏差吧。我不知道这其中是否有什么深意，如果有的话，希望结局是一个 Good Ending.\n五 前几天我妈微信给我打了个电话，当时我没空，没来得及接。不过实际上，我爸妈大多数给我打的电话也都是些嘘寒问暖的话语，即使有空我也是不太愿意接的；但要是不接的话，我爸妈肯定也会不太开心的，所以一般都会回一下。这次也是，待到几天之后我有了空，我便回了一个电话。我妈在电话里说，之前之所以给我打电话，是因为我姥爷生病住院了，想让我和姥爷说说话、聊聊天之类的；不过现在已经出院了，无大碍。\n结果昨天（八月七日）晚上又给我打了个电话，自然还是少不了问一些像是“今晚饭吃了什么”这种我始终无法理解的毫无意义的话语。后面瞎侃谈到了我姥爷，我妈便吐槽我说之前谈到我姥爷生病时，我也不问问到底他是得了什么病。我便反驳说问了又能如何。\n她说，倒也确实，不过不知道我寒假回来的时候还能不能见着我姥爷。\n自然，从她的话语中，很明显能听出发生了什么样的事。但我依然没有多问。正如前文所说，问了又能如何。无非是被告知人至晚年，患了何病，大寿将至。\n说到这个，突然又想到，去年，我的奶奶也去世了，应该是在那一年的秋天吧。我其实是到了寒假才知道的：当时我正从机场出来，见我父亲等在门口，这是我第一次离开家乡，以异乡人的身外，离家近半年。父亲看到我急忙招手，和一同来的一位大叔帮我递过了行李。上车后，我爸提了一句我奶奶的事，很平静，甚至有一丝唠家常开玩笑的戏谑意。我的回复也只是一声简单的“哦”。我自然事前是不知道的，自然没去做什么心理准备。但是一切似乎如此稀松平常，我不知为何并没有太多的心理波动。我爸问我，你不说点什么吗。我反问，说些什么好呢。\n如果说非要找一些理由，以证明我尽管对祖母的去世无甚反应，却仍不是一个失掉人情味的人的话，或许我可以说，可能正是许久的不见，所造成的疏离与陌生感吧。\n我的奶奶自我在高中时，便一直卧病在床。从一开始的腿脚不便、到后来的下肢瘫痪、甚至是阿尔兹海默症，直至去世，中间其实也不过两三年。我的爷爷奶奶与我和我爸妈三口，平常并不是住在同一座房子里的。但实际上，我们两家的两座房子正门的直线距离，其实也不过几十步，所以我们家一般都是会聚在一起吃饭的。不过我奶奶自打生病，自然就不断地缺席一场又一场的每日小聚。加之我高中学业繁重，一个月回家不过二三日，与她的见面机会，便只有待短暂放假时偶尔家中做了什么佳肴，家中令我去为她送饭时了。一年所见次数不过寥寥几次，所言亦不多，自然，她的去世也并没有使我如何震撼。仿佛她的身影是逐渐褪色模糊的，而非骤然与世长辞。对于一个卧病在床者，这确实算不上什么稀奇事。\n而似乎也是去年，还是前年来着，我的老奶奶去世了。我其实并不知道“老奶奶”这个称呼的指代关系到底是什么。我对这种中国的辈份关系向来弄不清，更何况是带有方言的辈份称呼。至于她是我母亲的姥姥，还是父亲的奶奶，无论是至她的离世，还是至今，我都一直没弄清楚。\n她去世时，家人央我同去参加她的葬礼。虽然我知道，她肯定是挺爱我这个作为曾孙辈的人的，但是反过来，我其实对她并没有什么特别的感情。但毕竟是亲人离世，葬礼一人一生也不过一次，我便随去参加了。自然，他们还邀请了附近十里八乡我毫不认识的陌生面孔。礼节上，行一些跪拜礼、号哭礼（姑且这么叫吧，至少我无法理解他们对这啼笑的转变仪式是为何如此熟练），抬棺，烧纸，喊一些我听不懂的如同咒语般的长丧音的话语，最后入土。\n说实话，我其实对这类生老病死没什么太大的心理波动。人老而死本自然常理，非遇横祸，寿终正寝。却仍要活人披麻戴孝，摆席宴客，我实在接受不来。死了埋掉，或者烧掉。生者各有其事，各去忙自己的生活就好，何必如此。\n人死，无魂灵。却仍要造墓建碑。岂不也是浪费土地？抑或是烧香供物，号而通灵者，看了着实讽刺。\n但是，不如此，却也似乎是少了什么。人终究是感性的动物，无神论者在有实证之前，自然是不相信灵魂的。但人与人的纽带也并非会随着肉体腐烂，感情仍在，物是人非，便只好编造一些谎言，假装他们还在，还在听着我们说话。尽管最终却也还是没有什么回应就是了\u0026hellip;\n何况我本身也不善言辞，感情也都一直藏在心中，自然不喜欢这种暴露感情的仪式。时间久了，连父母都说我是冷血动物了。不过如果我真的是冷血动物，我恐怕甚至不会给予他们回应吧。\n————幸而我不是，我仍旧只是一只哺乳动物罢了。\n六 今晚上摸鱼时看到了 StackOverflow 的 2021 年的年度调查。感觉很有意思的，于是就去看了一下。\n一开始是国籍，自然，没有那个国家。\n接下来是编程开始的年龄，结果调查显示，有超过 50% 的受访者是在他们 11 - 17 岁时敲下了他们的第一行代码。即使是 5 - 10 岁的，也占到了 14.08%。果然感觉自己实在太弱小了。曾经每当见到各种年少的编程大佬，往往自我安慰他们只是少数，不过现在看来，少数派们也已高达半数了。\n再往下面翻，发现居然还有对性取向和是否为跨性别者的调查结果，顿时想起了那个最大同性交友平台 Github 的哏。实在没想到调查结果居然还会包括这个，于是饶有兴趣地看了一下，发现非 LGBTQ 人群似乎占的还不算少。他们人数的总和甚至比女性程序员的人数还要多。\n再往下看，则出现了残障人士，看到这里我似乎顿感严肃了起来。说来汗颜，其实我做前端页面时，很少考虑去为一些视觉障碍者适配。倘是盲人的话，单是浏览网页的话，已实属不易，何况开发。\n真的是很难想象这类人的生活，假如是我，恐怕肯定接受不了这种痛苦吧。不过也想起了“太可怕了”王子的故事，然而这也是后话了。\n再后面，似乎还有提到程序员的心理问题的，差不多有 10% 的人都有心理焦虑等一系列的问题，也不知我能否算得上他们当中的一员。\n七 最近我的一位朋友向我推荐了一首出自 To the Moon 的音乐 Born a Stranger。当时身边没有耳机，没有来得及去听。今天傍晚时戴上耳机，点开了这首歌。\n播放这首歌时，我正在学校的路上。在歌曲大约播放到一半时，我刚好走到了楼梯高处，看到西面的夕阳余晖躲在校园的高楼后面，虽然歌曲描述的是 To the Moon，但当时，那副黄昏的景象也着实令我的内心深受震撼。\n不知道为什么，感觉最近的故事也似乎都充满了巧合呢。\n八 最近心情一直不太好，虽然是一直待在网校里，但是也写不下去代码。\n于是早上我打开了《荒野大镖客：救赎 II》，想打游戏来放松一下。尽管嘴上和朋友说的是“摸鱼的一天又开始了”，但其实，我在游戏的过程中也并非是多么开心。游戏自然是好游戏，但是就这款游戏本身而言，它并不算得上一款适合宣泄的渠道。仿佛是在心情压抑的时候专门去听一些令人忧郁的纯音乐，实属南辕北辙。\n最近前几天心情压抑时可能会去找一些（好吧就一个😭）朋友摸鱼吹水，倘能恰好聊到互相都感兴趣的话题，便仿佛是遇到知己，打开了话匣子，说了许多一直想说却又未曾与人聊过的内容。\n但是每天和人家都聊这么久似乎也不太好，也显得我整日无所事事。所以这几天有空时，便经常会一个人去操场的观众席上，坐在那里，独自一个人，发呆，远眺，当然，还有摸鱼。\n一开始，说是要找个安静的去处来练习大舌音，不过说实话，练了这么久感觉也只是在原地踏步。后来的几天，我便带着电脑过去，自然，代码是不会写的，而是写点东西，比如说这篇文章。虽然说不出来，但即便只是写，也确实会让心情好受许多。\n昨天晚上又下了一场雨，当时我在仍在观众席上，躲在遮雨棚下。身后开启了夜灯，灯光下的跑道，雨滴淅淅沥沥的砸在水坑里。我来时，同我一起在观众席上的加上我共三人；我走时，只剩下了一个。我坐在最高处，看着他们，尽管并不知道他们在干什么。\n这是处暑后的第三日，身着短袖，自不敌入夜后的寒气，只好先行一步离开。\n离开时，我撑起雨伞，将自己送回了宿舍。\n（完）\n","date":"2021-08-05T18:25:17+08:00","permalink":"https://lomirus.github.io/p/2021-08/","title":"Some Impressions (2021-08)"},{"content":"When I started to write the article, I haven\u0026rsquo;t install the Chinese Input Method, and therefore I just completed it in English.\nForeword I\u0026rsquo;ve used Windows OS for a long time. I can still remember that time, when I was just a junior high school student. It\u0026rsquo;s 2015. I was still a fan to Microsoft at that time. And it\u0026rsquo;s also in that year, the Windows 10 was released. I was so excited but I didn\u0026rsquo;t have a good PC then that could reach the lowest requirement of Windows 10. But I still tried to recommend one of my friends and helped him install this newly released operation system. At that time, I couldn\u0026rsquo;t understand why there were so many people who did not want to try the new system, but kept the old and already-retired Windows XP. But many years have passed, and now it turns to me that I cannot understand why there are still so many bugs on Windows 10. So I was waiting for Windows 11 coming soon, hoping some breaking changes and improments. However, unfortunately, it is just not as good as what I thought.\nAbout a month ago, on Jun 17th, I installed the Manjaro with Gnome.\nBut just after a month, on Jul 19th, it crashed. (but Windows is worse still I think)\nAnd that\u0026rsquo;s why I wrote this article \u0026mdash;- to restore my customized system working environment quickly instead of searching the bug solutions for a whole day for everytime I reinstalled the system.\nCustomize Set Pacman Mirrors sudo nano /etc/pacman.d/mirrorlist Delete other unnecessary mirrors and add:\nServer = https://mirrors.tuna.tsinghua.edu.cn/manjaro/stable/$repo/$arch # Server = http://mirrors.redrock.team/manjaro/stable/$repo/$arch Disable mirrorlist automatically refreshing:\nsudo systemctl disable pamac-mirrorlist.timer Set the keyboard shortcuts Open:\ngnome-control-center Go by Keyboard -\u0026gt; Keyboard Shortcuts -\u0026gt; Customize Shortcuts\nName Command Shortcut Launch Terminal gnome-terminal Super + T Launch Nautilus nautilus Super + E Delay Screenshot gnome-screenshot --delay 3 Ctrl + Print Edit the VSCode Settings You need to installl VSCode before reading this section.\nEdit ~/.config/Code/User/settings.json:\n{ \u0026#34;window.zoomLevel\u0026#34;: 2, // Fix Terminal Font Display \u0026#34;terminal.integrated.fontFamily\u0026#34;: \u0026#34;NotoSansMono Nerd Font\u0026#34;, // Make tab size from 2 to 4 \u0026#34;vetur.format.options.tabSize\u0026#34;: 4 } Enable Chrome Parallel Downloading Open chrome://flags/#enable-parallel-downloading, and switch to Enable.\nFix Multisystem time synchronization problem timedatectl set-local-rtc 1 If you want to verify:\ntimedatectl Install Packages Basic base-devel The base-devel includes these packages:\nautoconf, automake, binutils, bison, fakeroot, file, findutils, flex, gawk, gcc, gettext, grep, groff, gzip, libtool, m4, make, pacman, patch, pkgconf, sed, sudo, texinfo, which\nIf it\u0026rsquo;s uninstalled, you may get some errors then like ERROR: Cannot find the fakeroot binary. when using yay. So run the command before you install other packages:\nsudo pacman -S base-devel Other Basic Packages sudo pacman -S yay sudo pacman -S vim sudo pacman -S net-tools Tools sudo pacman -S neofetch sudo pacman -S btop sudo pacman -S htop sudo pacman -S gnome-terminal-fedora sudo pacman -S wireshark-qt sudo pacman -S aria2 sudo pacman -S gpick yay -S marktext-bin yay -S visual-studio-code-bin yay -S obs-studio yay -S google-chrome yay -S firefox-developer-edition yay -S feishu # To install Netease Cloud Music (not official), run: yay -S electron-netease-cloud-music # Or a more beautiful version: yay -S yesplaymusic # Emoji Picker yay -S emote yay -S burpsuite yay -S postman-bin yay -S scrcpy Developing Environment NodeJS sudo pacman -S npm sudo pacman -S yarn sudo npm install -g nrm nrm use taobao sudo npm install -g @vue/cli sudo npm install -g create-react-app Deno sudo pacman -S deno Rust # Install Rust curl --proto \u0026#39;=https\u0026#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh Java sudo pacman -S jdk-openjdk Install Docker sudo pacman -S docker sudo systemctl enable docker Install Asia Languages Input Methods sudo pacman -S fcitx5 fcitx5-qt fcitx5-gtk For Chinese:\nsudo pacman -S fcitx5-rime For Japanese:\nsudo pacman -S fcitx5-mozc For Korean:\nsudo pacman -S fcitx5-hangul Edit ~/.xprofile for X11 users:\nexport GTK_IM_MODULE=fcitx5 export QT_IM_MODULE=fcitx5 export XMODIFIERS=\u0026#34;@im=fcitx5\u0026#34; Edit ~/.pam_environment for Wayland users:\nexport GTK_IM_MODULE=fcitx5 export QT_IM_MODULE=fcitx5 export XMODIFIERS=\u0026#34;@im=fcitx5\u0026#34; Open fcitx5-configtool to move the input methods from right that you are going to use to left.\nTo beautify the skin of the input methods, refer to thep0y / fcitx5-themes.\nInstall icalingua(Electron QQ) yay -S mongodb-bin yay -S mongodb-tools-bin sudo systemctl enable mongodb.service sudo systemctl start mongodb.service yay -S icalingua Install clash sudo pacman -S clash Move your config.yaml to ~/.config/clash. Then:\nsudo systemctl enable clash@$USER sudo systemctl start clash@$USER Open the dashboard for configuration.\n","date":"2021-07-20T00:00:00+08:00","image":"https://lomirus.github.io/p/customize-manjaro/cover_hu81f578c0819d5c459ae1161b90d3bf82_144962_120x120_fill_q75_box_smart1.jpg","permalink":"https://lomirus.github.io/p/customize-manjaro/","title":"Customize the Manjaro with Gnome"},{"content":"起因 最近我用 rust 写了个 shogi game. 考虑到性能优化及用户体验，控制台采用 raw mode 进行渲染。结果发现兼容性不是很好，在各种 shell/terminal 上表现不尽相同。而在字体渲染上，有一说一，除了 Windows Terminal 其余的都是辣鸡。\n我（之前）平常最常用的 shell 是 Git Bash，但是正如前文所言，界面着实拉跨；而使用 Windows Terminal 打开 Git Bash 时，按退格键时又会出现闪烁现象。最终忍无可忍，于是把这些 bash/shell 全都拉出来批判一番：\nCMD: 费拉不堪 Powershell：费拉不堪 Gitbash: 费拉不堪 由于 Windows 上的 shell 人均费拉不堪，所以问了一位后端朋(dà)友(lǎo)有没有什么推荐：\n结果发现人家对 shell 根本就不像我这么挑剔😂，不过也可能确实是受方向影响。因为毕竟后端首先在 Windows 方面上有成熟的 Goland IDE，确实一般情况下用不到控制台，用到终端的话一般就都是在服务器上了，而服务器则一般都是用的 Linux，所以通常没啥顾虑。而我等苦逼前端菜鸡还是要经常和各种 CLI 打交道的，所以最好还是去找一款优秀的终端软件。\n然后最终选定了 WSL 2 + Windows Terminal + VSCode.\n安装 如果 Windows 10 OS Version 大于 20262，可通过 wsl --install 安装。\n虽然我有加入 Windows Insider 计划，不过系统还是用的 Stable，所以没有采取上述简化方式进行安装，而是采用的以下内容。\n首先，以管理员权限打开 Powershell 并输入以下命令：\ndism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart 输入以下命令启用“虚拟机平台”功能，然后重启：\ndism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart 然后下载适用于 x64 计算机的 WSL2 Linux 内核更新包并安装，以将 WSL 1 更新至 WSL 2。\n安装好后设置 WSL 2 为默认版本：\nwsl --set-default-version 2 打开Microsoft Store，随便选择一种发行版并安装。这里我选的是大众喜闻乐见的 Ubuntu。安装完后启动，执行一些配置就 OK 了。\n最后可以查看一下已安装的 WSL 发行版的版本信息：\nwsl --list --verbose 顺便说一下，安装新的发行版的操作并不会使你旧的发行版被替换掉。如果你之前安装过 WSL 1 的 Linux 发行版，而又不想将其保留，也可以将其删除掉。比如，如果我想将之前的安装的 WSL 1 Debian 删除掉，可执行以下命令：\nwsl --unregister debian 其余操作可以使用 wsl -h 或查看官方文档。\n网络代理 由于 WSL 2 是通过虚拟机的方式实现，所以不能像 WSL 1 时期那样直接使用 127.0.0.1 修改 WSL 内的网络代理。此时正确的处理方式应该是向 ~/.bashrc 添加如下内容：\nhostip=$(cat /etc/resolv.conf | grep nameserver | awk \u0026#39;{ print $2 }\u0026#39;) port=7890 # 此处端口可根据个人情况进行更改 PROXY_HTTP=\u0026#34;http://${hostip}:${port}\u0026#34; export http_proxy=\u0026#34;${PROXY_HTTP}\u0026#34; export HTTP_PROXY=\u0026#34;${PROXY_HTTP}\u0026#34; export https_proxy=\u0026#34;${PROXY_HTTP}\u0026#34; export HTTPS_proxy=\u0026#34;${PROXY_HTTP}\u0026#34; 参考文章：WSL2 中访问宿主机 Windows 的代理\n环境变量 在 WSL 2 中默认可获取到宿主机中的环境变量，这可能会导致某些错误，比如获取到一些没有意义的环境变量，导致环境混乱。\n若要禁止在 WSL 2 中访问 Windows 环境变量，可以先创建/etc/wsl.conf：\ntouch /etc/wsl.conf 然后修改其内容为：\n[interop] appendWindowsPath = false 常用软件的安装 接下来安装几个我常用的软件包，这部分没什么技术含量，仅供以后查阅方面使用。\n首先更新软件源：\nsudo apt update 然后安装：\n# python sudo apt install python3 ln -s /usr/bin/python3 /usr/bin/python ## node/npm sudo apt install nodejs sudo apt install npm ## yarn sudo npm install -g yarn ## deno sudo apt install unzip curl -fsSL https://deno.land/x/install/install.sh | sh ## rust curl --proto \u0026#39;=https\u0026#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh # 建议选择 `default toolchain` 为 `nightly` 其他坑（先占位） 由于 WSL 2 用到了虚拟化平台功能，可能会导致其他虚拟机（如 VirtualBox）无法运行。目前我还没解决这个问题，啥时候用空解决了再更。\n更新：解决方案：卸载 VirtualBox, 安装VMWare.\n","date":"2021-05-28T00:00:00+08:00","image":"https://lomirus.github.io/p/wsl2/cover_hu942fe59d1722165a0491fd14e8631074_1587106_120x120_fill_box_smart1_3.png","permalink":"https://lomirus.github.io/p/wsl2/","title":"WSL 2 入门使用与踩坑记录"},{"content":"学习 Vue 与 Vite 项目搭建的踩坑记录 Vue 2.0 + Webpack Installation 虽然 Vue 的最新版已经是 3.0，而且 Vite 也似乎是大势所趋，不过我还是选择了先从 Vue 2.0 + Webpack 这种比较传统的方式开始学习。主要是因为这几个方面：\n现在仍有许多项目没有从 Vue 2.0 迁移到 3.0，使用 Vue 2.0 进行开发在实际生产中还是比较常见的，所以以后还可能会用到 2.0； Vue 2.0 的资料相对比较多，踩坑时更容易查到资料； 学习 2.0 之后再学习 3.0，会对 3.0 的改进有更深的体会，比如能够切身体会到 Vue 3.0 为什么这么那么设计、这样设计有什么好处、它解决了哪些痛处与弊端等； 入门曲线相对平缓。 好了，前言就先讲到这里，接下来进入正题。\n首先创建项目：\n$ mkdir vue-learning $ cd vue-learning $ npm init -y 接着安装相关库：\n$ npm install -D webpack webpack-cli webpack-dev-server html-webpack-plugin $ npm install vue 创建相关文件，创建后的目录结构：\n$ tree -I \u0026#34;node_modules\u0026#34; . |-- dist | `-- main.js |-- package-lock.json |-- package.json |-- public | `-- index.html |-- src | `-- index.js `-- webpack.config.js 3 directories, 6 files webpack.config.js :\nconst { resolve } = require(\u0026#39;path\u0026#39;) const HtmlWebpackPlugin = require(\u0026#39;html-webpack-plugin\u0026#39;) module.exports = { mode: \u0026#34;production\u0026#34;, entry: \u0026#34;./src/index.js\u0026#34;, output: { path: resolve(\u0026#34;dist\u0026#34;), filename: \u0026#34;[name].js\u0026#34; }, plugins: [ new HtmlWebpackPlugin({ template: \u0026#34;./public/index.html\u0026#34; }) ], devtool: \u0026#34;source-map\u0026#34; } 然后基础部分就做完了，接下来开始加入 Vue：\n// src/index.js import Vue from \u0026#39;vue\u0026#39;; const app = new Vue() 打包之后可以看到 dist/main.js 中已经引入了 Vue 的 runtime。\nRuntime + Compiler vs. Runtime-only 按照官网文档中的第一个例子，修改 index.html 的 body 为：\n\u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; {{ message }} \u0026lt;/div\u0026gt; 并修改 index.js 为以下内容：\nimport Vue from \u0026#39;vue\u0026#39;; const app = new Vue({ el: \u0026#34;#app\u0026#34;, data: { message: \u0026#34;Hello World!\u0026#34; } }) 然后 npx webpack serve ，打开 http://127.0.0.1:8080，发现控制台报错：\nYou are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.\n原因是我们导入 Vue 时使用的语句是 import Vue from 'vue';。这行语句默认会导入 Runtime-only 版本的 Vue，而这个版本的 Vue 是不含编译器的，因此无法编译像 {{ message }} 这种模板语句。\n为了解决这个问题，我们可以修改一下 webpack.config.js 的内容，向其 module.exports assign 以下内容\n{ resolve: { alias: { \u0026#39;vue$\u0026#39;: \u0026#39;vue/dist/vue.esm.js\u0026#39; } } } 然后编译，运行，成功！\n相关参考资料：\nhttps://vuejs.org/v2/guide/installation.html#Runtime-Compiler-vs-Runtime-only Single File Components 接下来介绍一下单文件组件，这也是我比较推崇的方式。之前我写 React 时，就是采取了 CSS in JS 的方案，而不是 SCSS 或者是 Less；因为如果将.less 和 .jsx 分割开来的话，后期维护就会变得非常难受了。而单文件组件不仅目录结构看起来更舒服，在可维护性上也更加友好。不过 Vue 的单文件组件相比非单文件组件来说，并不仅仅是以上这些方面，比如说原生的 JavaScript 并不支持 jsx 语法，用模板字符串就显得丑了吧唧的等等。具体可参考官方文档，这里就不赘述了。\n然后正式开始，首先安装 vue-loader 和 vue-template-compiler:\n$ npm install -D vue-loader vue-template-compiler 修改 webpack.config.js，将以下内容添加到 module.exports:\nconst { VueLoaderPlugin } = require(\u0026#39;vue-loader\u0026#39;) module: { rules: [{ test: /\\.vue$/, use: \u0026#34;vue-loader\u0026#34; }], plugins: [ new VueLoaderPlugin() ] }, 参考文档：https://vue-loader.vuejs.org/guide/#manual-setup\n然后修改index.html，div#app里面的内容全删掉就可以了，只留下：\n\u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 创建文件App.vue：\n\u0026lt;template\u0026gt; \u0026lt;div\u0026gt; {{ message }} \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { message: \u0026#34;Hello World!\u0026#34; } } } \u0026lt;/script\u0026gt; 修改 index.js：\nimport Vue from \u0026#39;vue\u0026#39;; import App from \u0026#39;./App.vue\u0026#39; new Vue({ el: \u0026#34;#app\u0026#34;, template: \u0026#34;\u0026lt;App /\u0026gt;\u0026#34;, components: { App } }) 此时目录结构：\n$ tree -I \u0026#34;node_modules|dist\u0026#34; . |-- package-lock.json |-- package.json |-- public | `-- index.html |-- src | |-- App.vue | `-- index.js `-- webpack.config.js 2 directories, 6 files 完成。\nVue 3.0 + Vite Creation $ npm init @vitejs/app √ Project name: · vite-project √ Select a framework: · vue √ Select a variant: · JavaScript $ cd vite-project $ npm install 安装就这么完成了，没啥好说的。\nSimplification 如果正在阅读这篇文章的你是一名初学者的话，可能对这复杂（或许？）的目录结构毫无头绪，而且事实上它也确实用到了许多高级/新特性。所以我们可以试着将它简化并还原一下。\n简化后：\nsrc/components/HelloWorld.vue\n\u0026lt;template\u0026gt; \u0026lt;h1\u0026gt;{{ msg }}\u0026lt;/h1\u0026gt; \u0026lt;/template\u0026gt; src/App.vue\n\u0026lt;template\u0026gt; \u0026lt;HelloWorld msg=\u0026#34;Hello Vue 3 + Vite\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import HelloWorld from \u0026#39;./components/HelloWorld.vue\u0026#39; export default { components: { HelloWorld } } \u0026lt;/script\u0026gt; Next 既然基础的项目搭建学会了，接下来就可以直接⏩到实战了（雾）。而且我最近正好要参加一个学校组织的叫什么什么数据库的比赛，或许可以考虑用比赛项目的前端部分来给 Vue 练手一下（）。那么接下来，就继续学习 Vue \u0026amp; Vite 吧！\n","date":"2021-05-22T18:25:17+08:00","image":"https://lomirus.github.io/p/vue-vite-start/cover_hu04a4e276885eb709cbeaf2dacb0788b9_351809_120x120_fill_box_smart1_3.png","permalink":"https://lomirus.github.io/p/vue-vite-start/","title":"Vue \u0026 Vite 项目搭建入门"},{"content":"我这半学期学了什么 寒假的时候我一直在写考核作业。但有一说一，虽说我肝得挺厉害（至少自我感觉是），但实际上我感觉我并没学到什么太多的新东西。当然，倒不是说一点也没有，只是感觉太少了。\n寒假的时候一直想学下 Webpack 和 React 的相关知识，但苦于没时间，而到了开学之后反倒是有时间了（离谱）。于是乎我便先学习了这两个比较基础且常用的。我之所以将首选框架选为 React 而不是 Vue，主要是因为我跨平台开发框架很感兴趣，而 Flutter 对我这个前端还算比较比较遥远，因此考虑到 React Native 就先学了 React。\ncounter-trainer-deprecated 我第一有关 React 的项目是 counter-trainer （现在更名为 counter-trainer-deprecated），里面还顺便用到了 Less。这个项目算我前端工程化的开荒，更多的还是为了练习。开发初期的规划是想通过自适应以兼容各种分辨率，结果发现远比自己想象的复杂，加之当时对于组件间通信不甚熟悉，以及审美堪忧，最终导致代码堆成屎山，因此终止了开发。\ncounter-trainer 紧接着不久我就开始了第二个项目，同时也是前者的续作，也叫做 counter-trainer。吸取了上一次的教训，这次只针对了移动平台进行适配，因此我选择了使用 React Native 进行开发。我从这这个项目中学习到的主要有这么几方面：\n学习了 Redux，了解了组件间通信、生命周期、Context、Fragment 等相对进阶的内容； 开发的复杂程度不断增加，迫使我去寻找已有的库而不是重复造轮子，而在这个过程中我不得不去直接阅读一些框架的官方英文文档、去 Issues 里寻找 bugs 的解决方案。在此之前我顶多会使用像 Redux，Babel 这种近乎 Official 性质的库，对于那些小众的库还是有些抵触的，不过最后，相比于自己从头开发，直接 import 还是让我直呼真香。比如随便举几个这次用到的一些库：react-navigation, react-native-tts 等等，像其中的 tts 这种库，就绝不是现在的我能够徒手撸出来的，所以我也学会了不要去造一些没有必要的轮子。 （复习了 Android 开发？（继上一次的 Kotlin 计算器）） （直接读英文文档进一步提升了英文水准？） （了解了语义化版本？） sekiro-symbols-generator 这个项目应该是我最近的项目中完成度最高，也是唯一没有弃坑且最终按照原计划圆满完成了的。最终代码量约1000行。下面说一下我从这个项目中学到的东西（或者是这个项目的一些 features）：\nReact Hooks：该项目全部使用函数式组件；同时在组件间通信方案的选择上废弃了 Redux ，改为了使用 React 原生 hooks； Typescript：该项目全部使用 Typescript； ESlint：该项目使用了 ESlint（这个好像不算什么亮点）； CSS in JS：该项目没有采取传统的 Less or SASS/SCSS，而是选择了 css in js 的方案。并且在经过了多方权衡之后，最终决定了采用 emotion 作为样式框架 Webpack：打包时的一些优化，如 source-map, code splitting； Github Actions：自己写了个脚本自动部署并发布网站； Other: 如 React automatic runtime, Forwarding Refs,.gitattributes 文件的使用等。 Deno 学了点 Deno，不过生态还是太匮乏，暂时还没什么卵用。\n有个叫 Aleph 的框架可以用 React， 不过是 SSR, 不太符合我口味。\nRust 这学期还学习了一门新语言，那就是 Rust. 打老早之前就见到很多人都在吹它，而且后来又看到 Rust 大佬 @ahabhgk 的身体力行，以及 Rust 在 WebAssembly 上无可比拟的优势以及其他各种优秀特性等等。所以就开始学习这门语言了。\n目前基础语法方面已经学完了，最近在学一些智能指针、并发等相关操作。而且开发的过程中甚至遇到了一些语言本身的 \u0026ldquo;feature\u0026rdquo;，以至于我还专门跑去官方仓库的 Issues 寻找解决方案，官方则表示只能暂时使用 unstable 的 nightly 特性作为临时解决方案，说明 Rust 还是挺早期的，还有很多坑都没填\u0026hellip;\nVue 今天才刚刚开始学 Vue/Vite，所以暂时还没什么好说的。\n（不过我还是要吐槽一下 Vue 文档辣鸡（小声））\n接下来要做什么 😅说了这么多，还是得先把课内各种 damn courses 给解决掉，虽然有些水课设立就是为了恶心人的，但是我们也无可奈何。\n立几个 flag，不过不要求要在本学期内完成，也不一定完全按照它执行，只是当作一个 Todo List 而已：\nWeb Vue \u0026amp; Vite； React/Vue Router； WebAssembly; Next.js (SSR); WebRTC Hybrid Dart \u0026amp; Flutter Game Bevy/Godot; Other Decentralization, Blockchain ","date":"2021-05-09T01:00:00+08:00","permalink":"https://lomirus.github.io/p/2021-05/","title":"大一第二学期中期总结与反思 (2021-05)"},{"content":"我写前端至今也已有五六年了，不过这数字其实很水，前五年的大部分时间也都并没有将主要精力放在开发上，不过自己好歹也多多少少做过地做过一些项目。我第一个大型（或许？）前端项目就是一个简单的网站，有留言，还有井字棋什么的几个小游戏。再后来学过后端后，我又用 Golang 做后端，原生 JS 做前端，徒手撸了一个博客。\n我向来是没有什么写博客的习惯的，因为感觉其枯燥且无用。上次写博客主要是因为隔壁运维作业要求搭建一个博客，而我又懒得学习什么 Hexo, Wordpress 这类东西，所以就自己先简单写了一个原型，后续又不断完善，时而不时水几篇文章，然后就有了这个博客。\n不过现在这个博客已经被废弃了，一是因为博客源码太烂，二是因为文章太水，所以不愿再维护了。\n但是我时而又萌生了继续写点博客的想法，然而正如杜拉斯在《情人》的开头所言，“我已经老了”（无端？），所以我也已经不太想折腾了。网上搜资料时发现有的人直接拿 Github Issues 来写博客，想了想也确实挺符合我的需求：支持 Markdown， 可编辑，可评论，而且现在据说也可以限制他人在自己仓库里乱发 issue 了，所以我就决定选择 Github Issues 作为我的新的博客平台了。不过日后倘若又要迁居，那也是后话了。\n为防止自己继续写一些水文来占版面，所以这次可能更新频率会降低。不过有时可能受外力影响要求比如每周上交至少一篇博文，emmm，以后再具体看情况办吧。\n先写到这。\n","date":"2021-05-09T00:00:00+08:00","permalink":"https://lomirus.github.io/p/start-writing-blogs/","title":"Writing Blogs in Github Issues"},{"content":"（顺带一提，标题抄袭引用改编自著名博文 TypeScript with Babel: A Beautiful Marriage）\nOrigin 看了下 cqupt-help-mp 的源码，发现里面用了许多库。感觉自己对这些工具还不太熟练，所以想先趁机练习一下。\n对于题目中的五个工具，除去 ESlint之外，其实其他的都多多少少用过一段时间。特别是 Webpack Babel React 这三个，用的时间也算是比较久了。TypeScript 倒是用过，但是感觉 JS 加上类型限制后写起来就不那么自由了，所以尝试用它写了一个模块之后就将它卸载了。但是这些这个工具终究还是太常用，早晚逃不了还是得学，所以就试着用它们做个简单的小项目练练手。毕竟当初我学 Webpack 时也是学得很憋屈，一直不知道这玩意儿打个包为啥还非得用 js 文件做入口，直到后来学了 React 才豁然开朗，所以我至今认为如果是要做跑在浏览器的网页而且不用什么框架的话 Webpack 还真没什么卵用。当然，有了之后自然用处就大了。\n不过说了这么多好像有点跑题，先回到正题：让我们来讨论一下究竟怎么把这五个架子给支楞到一块儿去。\nIntroductions of the packages 这种东西还用得着在这介绍？官网文档，维基百科，请~\nTSC or Babel, it\u0026rsquo;s a question. 老实说，单是在两个之间进行选择就够让我想半天了。但是实际上，摆在我面前的包括但不限于：ts-loader,awesome-typescript-loader, babel-loader等一堆loaders/packages。而且由于我开始参考了过时的中文文档，所以先下载了awesome-typescript-loader，后来才意识到被坑（😅）。而在剩余的两者之间，参考TypeScript with Babel: A Beautiful Marriage后，决定选择了后者。\n安装好之后，我又顺着我的思路捋了一遍，发现整个过程中编译是babel做的，根本没用到typescript什么事儿呀。我于是就想，把它卸载之后会怎么样呢？接着神奇的现象发生了，我卸载了typescipt，删除了它的配置文件tsconfig.json，结果发现我的用typescript写的项目居然还能正常编译并运行（谢谢有被震惊到）。我就想既然如此那我还用ts干啥呀，赶紧卸了得了，可别再让我见着你了（😅）。\nAnti-human ESLint 听说 ESLint 可以用在团队协作中来保证代码风格的一致性？好，名单赶紧安排上，加急。\n安装过程中被问了几个问题，回答之后他给我推荐了几个插件。行，听您的。选择 YES，进行安装。看起来一切顺利，然后\u0026hellip;果不其然，报错了。报啥呢：\nOops! Something went wrong! :(\rESLint: 7.24.0\rError: An error occurred while generating your JavaScript config file. A config file was still generated, but the config file itself may not follow your linting rules.\rError: Failed to load plugin \u0026#39;@typescript-eslint\u0026#39; declared in \u0026#39;BaseConfig\u0026#39;: Cannot find module \u0026#39;typescript\u0026#39; 我心想，这不废话嘛，我又没安装 typescipt 您能到哪儿找模块去？不过话又说回来，刚才，它倒是的确问过我这么一句：\nDoes your project use TypeScript? · No / Yes 唔，我要用 TypeScript 倒是没错，不过这和我安没安装 TypeScript 的 package 也没什么必然的联系吧。\n然后经过摸滚带爬的上下求索，终于意识到 typescript 貌似还是有点儿用的，再加上后面用到的 @types/react，@types/react-dom，感觉是在类型推断和自动补全方面有些作用（应该）\nModule or CommonJS, it\u0026rsquo;s a question. 刚才 ESLint 问我用的是 Module 还是 CommonJS，秉着“啥新用啥，用嘛嘛新”的原则，我当然选择的ES6的Module。\n然后由于我的webpack.config.js用到了module.exports = {}，所以 ESLint报错了。\n\u0026#39;require\u0026#39; is not defined. eslint(no-undef)\r\u0026#39;module\u0026#39; is not defined. eslint(no-undef) 好，那我改。\n我把 module.exports改成了export default，把require改成了import。结果又报错了：\nSyntaxError: Cannot use import statement outside a module 好，那我改。 我在package.json里加了句 \u0026quot;type\u0026quot;: \u0026quot;module\u0026quot;。结果又报错了：\nReferenceError: __dirname is not defined __dirname 用不了可不行，那还是再改回来吧。 好，那我改。 于是回到了原点：\n\u0026#39;require\u0026#39; is not defined. eslint(no-undef)\r\u0026#39;module\u0026#39; is not defined. eslint(no-undef) （闹着玩是吧？😅）\n然后在.eslintrc.js的\u0026quot;env\u0026quot;中加了行\u0026quot;node\u0026quot;: true，行，终于，不报错了。\nESLint Comes Again App.js里有这么一段：\nconst Box = ({ title, children }) =\u0026gt; ( \u0026lt;div\u0026gt; \u0026lt;h2\u0026gt;{title}\u0026lt;/h2\u0026gt; {children} \u0026lt;/div\u0026gt; ) ESLint报错：\nMissing return type on function. eslint(@typescript-eslint/explicit-module-boundary-types) 接着修改代码为：\n// has imported ReactElement... const Box = ({ title, children }): ReactElement =\u0026gt; ( \u0026lt;div\u0026gt; \u0026lt;h2\u0026gt;{title}\u0026lt;/h2\u0026gt; {children} \u0026lt;/div\u0026gt; ) ESLint报错：\nObject pattern argument should be typed. eslint(@typescript-eslint/explicit-module-boundary-types)\r\u0026#39;title\u0026#39; is missing in props validation eslint(react/prop-types)\rBinding element \u0026#39;children\u0026#39; implicitly has an \u0026#39;any\u0026#39; type. ts(7031) 接着修改代码为：\n// has imported ReactElement... type BoxProps = { title: string, children: ReactElement } const Box = ({ title, children }: BoxProps): ReactElement =\u0026gt; ( \u0026lt;div\u0026gt; \u0026lt;h2\u0026gt;{title}\u0026lt;/h2\u0026gt; {children} \u0026lt;/div\u0026gt; ) ESLint在这块儿倒是不报错了，不过当其他地方调用Box又报错了：\nThis JSX tag\u0026#39;s \u0026#39;children\u0026#39; prop expects a single child of type \u0026#39;ReactElement\u0026lt;any, string | JSXElementConstructor\u0026lt;any\u0026gt;\u0026gt;\u0026#39;, but multiple children were provided. 查了下资料，发现除了ReactElement之外原来还有ReactNode和JSX.Element（参考 When to use JSX.Element vs ReactNode vs ReactElement?）。\n简单总结下，原因：拉胯TS的历史遗留问题；解决方法：将children类型改成ReactNode\nreact-jsx 在上面的 StackOverflow 里看到了 create-react-app，这才想到可以去参考一下它的代码，话不多说，开始安装。\nnpm init -y npm install create-react-app npx create-react-app ts --template typescript 进去之后发现他在tsconfig.json里的\u0026quot;compilerOptions\u0026quot;写有\u0026quot;jsx\u0026quot;: \u0026quot;react-jsx\u0026quot;，而我之前一直都是用的\u0026quot;jsx\u0026quot;: \u0026quot;react\u0026quot;。好奇他们之间的差别，所以去 TypeScript官网文档查了下资料：\nControls how JSX constructs are emitted in JavaScript files. This only affects output of JS files that started in .tsx files.\nreact: Emit .js files with JSX changed to the equivalent React.createElement calls react-jsx: Emit .js files with the JSX changed to _jsx calls react-jsxdev: Emit .js files with the JSX to _jsx calls preserve: Emit .jsx files with the JSX unchanged react-native: Emit .js files with the JSX unchanged Umm，说实话没看懂，继续往下滑，发现一个链接，点进去，读了下，发现react-jsx相对react有许多优点，例如：\nWith the new transform, you can use JSX without importing React. Depending on your setup, its compiled output may slightly improve the bundle size. It will enable future improvements that reduce the number of concepts you need to learn React. 继续秉承着“啥新用啥”的信条，我便将tsconfig.json里的\u0026quot;jsx\u0026quot;: \u0026quot;react-jsx\u0026quot;改成了\u0026quot;jsx\u0026quot;: \u0026quot;react\u0026quot;。但是过了会儿突然想起来我使用的babel-loader编译的，所以写在tsconfig.json里其实并没有什么卵用\u0026hellip;\n所以应该修改babel.config.js的module.exports，添加以下属性：\nmodule.exports = { \u0026#34;presets\u0026#34;: [ // ... [ \u0026#34;@babel/preset-react\u0026#34;, { // ... \u0026#34;runtime\u0026#34;: \u0026#34;automatic\u0026#34; } ] ] } 不过单单这么改还是会报错，这是因为 ESLint 的缘故，实际上代码是可以正常编译的。不过 ESLint 总是报错看着很不爽呀，说实话我都想把它给卸载了。但是转念又想到将来团队协作肯定是要用到的，只好再硬着头皮继续写了。\n修改 ESLint 配置文件：\n{ // ... \u0026#34;rules\u0026#34;: { // ... \u0026#34;react/jsx-uses-react\u0026#34;: \u0026#34;off\u0026#34;, \u0026#34;react/react-in-jsx-scope\u0026#34;: \u0026#34;off\u0026#34; } } ","date":"2021-04-14T00:00:00+08:00","image":"https://lomirus.github.io/p/not-such-a-beautiful-marriage/cover_hu344cc44c010eb8a4625e74adaa2a9ef7_57613_120x120_fill_box_smart1_3.png","permalink":"https://lomirus.github.io/p/not-such-a-beautiful-marriage/","title":"TypeScript \u0026 Webpack \u0026 Babel \u0026 Eslint \u0026 React: Not Such a Beautiful Marriage"},{"content":" This is a fiction that was written as my assignment of the Comprehensive English during my freshman in CQUPT. The bold fonts here are used to mark the new words of this semester as my teacher requested. Upon the Mere It\u0026rsquo;s a long dream, I\u0026rsquo;ve had, for the whole night, at the cramped cabin, in a village, my old home, from dusk to dawn. It\u0026rsquo;s a quiet place, reeds growing around it and a river soaked the nearby earth. A lake branched out from the river was just behind the village. I had never been a regular there since my childhood, because I was still so young on those days, that even the reeds could cover upon my head and make me drowned. Sometimes I would stare at the surface of the lake absent-mindedly or wondered if there was a monster lurking in the bottom of the lake. Though honestly, this lake was not so big, probably no more than twenty meters wide. But I can still remembered the story that my grandma once told me with a serious expression: \u0026ldquo;Once upon a time, there was an old man who was living alone near the lake. But one day he vanished, and his body was never found after that. No one knew where he\u0026rsquo;d gone\u0026rdquo;\n\u0026ldquo;So have you tried to search for him?\u0026rdquo; I asked.\n\u0026ldquo;Perhaps, I am not sure,\u0026rdquo; she answered. \u0026ldquo;He\u0026rsquo;s an odd man, and seldom went out from his house. So we just didn\u0026rsquo;t notice any anomalies for his disappearance at the first days. \u0026quot;\n\u0026ldquo;But when we realized,\u0026rdquo; she added, \u0026ldquo;at least in my opinion, it\u0026rsquo;s been too late.\u0026rdquo;\n\u0026ldquo;——Umm, maybe you don\u0026rsquo;t like this story?\u0026rdquo; again it\u0026rsquo;s she that proposed. \u0026ldquo;Well, we can just leave it alone and go home for a rest now. What do you think?\u0026rdquo;\n\u0026ldquo;Whew, you\u0026rsquo;re right, \u0026quot; so I seconded, \u0026ldquo;Why need we talk such boring and scary topics. \u0026quot;\nAnd so I reached home, played all the left day, until the sun went down, and the stars came out beyond the clouds.\nI still miss those days of my childhood. Children like us then were always curious about the the world which they had never seen before. But with the days in and out, continuous stimulations from various novelties had been gradually making us become numb to re-perceive the world. Sometimes I might fantasized and wished there would be a Deus ex Machina to renew or even reconstruct my world. But all of those might forever only remain in my nostalgia.\nI sounds like a sad story, as if my childhood was so ordinary and boring. And as a matter of fact, I can hardly deny it, since it\u0026rsquo;s not a false description of the life, that I\u0026rsquo;ve experienced by myself. But on the other hand while in my view, most of the people just wasted their life and were busy handling all kinds of meaningless affairs forcedly or unconsciously, and finally died with doubts and regrets, but said \u0026ldquo;I\u0026rsquo;ve enjoyed my life and been enough\u0026rdquo;. And I do not think that everyone have an obligation to live an exceptional story.\nBut what I said above maybe just self-comforting words. After all, no one would like to spend the whole life for their goals unswervingly and then finally turn into the dust that no one knows and remembers, as if they had never come before. I don\u0026rsquo;t know which side is right. It\u0026rsquo;s like a ultimate question. So I can say with certainty, that I cannot handle it.\nBut I did not think much about such things in that afternoon. For me, that afternoon was just a trivial one, of my thousands of afternoons. Many years later, when I tried to recall this period, I might have even forgotten it and cannot even utter any words about it. But I did remember that there was a time when I was truly living in that afternoon, which was enough. At least now I can still recall the dusk of that day, when the night gathered, and the darkness of forests were prolonged till the horizon. The moonlight cast on the mottled leaves, and I strolled along the path leading to the distance, no one with me except my shadow.\nBoth of the evening breeze and the morning breeze were cool and refreshing. And in fact, I was just a kid afraid of the dark like most kids then. So I cannot ensure that my memory is right, since I can even not believe that I was so brave to walk outside the darkness alone. either. So more particularly, it was like at a summer morning, on which time I was passing the path.\nAnd therefore it brought me back to that distant morning again, when I was still a student. I was studying in the school of my village. It\u0026rsquo;s a small one, whose tallest building was only two floors. Ever since I started my school, I had constantly witnessed that it was encroached gradually by surround growing houses and other buildings. The school also lacked the teachers. And by the way, it was said that my class teacher, also responsible for my math and other several main courses, teaching us for years, was used to be just a cook in our school, until no more teachers could be found.\nAnd here I want to talk about Tony, my classmate. It doesn\u0026rsquo;t mean that he\u0026rsquo;s the special one, but just, the first one that appears in my mind when I am thinking back now. He\u0026rsquo;s neither my desk-mate, nor front-desk- or back-desk-mate. To be honest, he was a guy who was a little short, quiet, and perhaps also a nerd at certain angle. But in the other hand, he was not an academic-excellent student either. Perhaps on the opposite as what you think, he just performed bad in his nearly every courses.\nBut everyone at least has some areas in which (s)he is expert. And as for him, it is the origami. With no cut or paste, just by folding, the papers turned into various animals, like senbazurus[1], as if given the breath of life.\n[1] From the Japanese word 千羽鶴（せんばづる）, meaning one thousand origami cranes. Considering its English name is too lengthy when put here and below, which may cause the inconsistent language sense from the source language, therefore here I just used its romaji.\nI was interested by this kind of marvelous work and asked him if he would like to teach me how to make it. \u0026ldquo;It seems to flutter away once you throw it into the air,\u0026rdquo; I flattered.\n\u0026ldquo;But it cannot be true,\u0026rdquo; he responded, without looking up, just sitting on the chair and concentrating on the desk. \u0026ldquo;Senbazurus are just the senbazurus, instead the cranes indeed after all. There\u0026rsquo;s no sleep, no diet, and no joy, no pain for it. In short: \u0026lsquo;it doesn\u0026rsquo;t think, therefore it is not\u0026rsquo;.\u0026rdquo;\nI was astonished by his words and could not retort for the moment. I cannot deny that it is he that was at the true side, but I just did not understand why he was so serious about my request and his works in a sudden without any omens. \u0026ldquo;Perhaps he just in a bad mood today,\u0026rdquo; I thought to myself. \u0026ldquo;Maybe I should have not bothered him.\u0026rdquo;\nBut except him, most of my classmates were all playing noisily in the spare time between or after classes. And Arnold was the kid king among the whole grade in the school, though there might be only a dozen of people among a whole grade in the school of this remote village of mine. But he still had many friends, yet I was not sure if they were the friends indeed or in awe. I was the one of the kind of people who were taciturn and introverted, so rarely have I called any of my friends to play outside, and always on the contrary——it\u0026rsquo;s they called me. And just as what I mentioned, one day, Arnold called me out——of course I would not have dared to refuse. After all, he even took me to play truant together before, so what else could be more severe than that in the world, for me then the kid?\nAnd what did we do then? It\u0026rsquo;s already beyond my memory. What I could only remember was that Arnold seemed to have found some new preys while we were heading towards the Tony\u0026rsquo;s home. His house was just located near the lake that I mentioned above. So specifically, our destination was not Tony\u0026rsquo;s home, but was the lakefront.\n\u0026ldquo;Hey, there\u0026rsquo;s David and Mark,\u0026rdquo; Arnold said, \u0026ldquo;I\u0026rsquo;ll go to join them now. You can stay here for the moment or go back. Anyway it\u0026rsquo;s not what I need to care about.\u0026rdquo; And I chose the former. After all, David and Mark was even one grade higher than me. Since I was not too familiar with them, to stay with a relative acquaintance like Tony would be surely a better choice obviously.\nSo we were just watching TV to kill time. But that\u0026rsquo;s not the only thing we used to spend. We then went out and sit around the lake to continue our words. We talked much, from tales to myths, from unicorn to phoenix, and from monsters to thrillers. I was so amazed by the unconstrained world that existed in his mind.\nI used to have such a limited outlook during my childhood, and I can prove this by telling you a another story. It was when I was playing the cobbles behind the yard of my house, of course it might be boring in your eyes, but not in mine, at least at that time. Then one of my neighbors, an elder sister several years older than me, just came back from her travel to the urban district, where row upon row of skyscrapers, as she described, stood upright there. But it is not the point I am going to say, because the story I am telling now actually began with her introduction about the zoo, yes, just the zoo of animals.\nShe said she had seen tigers, lions, elephants and many other various animals there. But in fact, I was doubtful about her words: \u0026ldquo;No joking please,\u0026rdquo; I laughed. \u0026ldquo;There were never such things like tigers that had even existed in the world.\u0026rdquo; And then it was her turn to be surprised: \u0026ldquo;What? Why do you have such thoughts?\u0026rdquo; She laughed, too. But I was serious: \u0026ldquo;Because I\u0026rsquo;ve never seen so-called beasts in the real world, but only in TV programs or cartoons.\u0026rdquo;\nThat\u0026rsquo;s really ridiculous, to only believe the things that we\u0026rsquo;ve seen, but ignore those unknown existences. Now I\u0026rsquo;ve been not so naïve anymore. However, what\u0026rsquo;s more ironical is that, up to now I have not seen the tigers or lions personally yet.\nBut Tony is not the same, I hardly doubted his words.\nWatching the TV for a long time would finally turned a boring activity, therefore we then went away from the chairs and just hung out in his house.\nI\u0026rsquo;ve never taken a close look at the interior of his house before. I mean, it\u0026rsquo;s the first time that I\u0026rsquo;ve taken, but, could also be the last time I did, though I still didn\u0026rsquo;t realized it at that time.\n\u0026ldquo;Let\u0026rsquo;s see something interesting,\u0026rdquo; he supposed. And then he took out a picture from the drawer, and passed it to me. \u0026ldquo;That\u0026rsquo;s it,\u0026rdquo; he smiled. And in fact, it actually aroused my curiosity successfully.\nIt was a black \u0026amp; white photo, slightly yellowed color reflecting the old stories beyond its experienced ages. There was a Japanese woman who stood at the prominent position of the photo, which could be easily inferred through the exotic kimono she wore, and the oil-paper umbrella she held. And apart from these, beside her was also a man who was standing upright.\nSo I started wondering——that who they were, and why they should appear in such picture——if they were still alive, or gone——was it a romance, or tragedy.\nSo I started trying to think about anything that might had some relations about this but was just in vain. Tony was an American, which I was sure about, so his parents should also be the same, apparently. I could also confirm from the accents of their tongues and appearance of their faces easily, because they were just coming back outside, opening the door, standing in front of us, and staring at us.\nSo I tried to look up, and then saw his father. I attempted to greet to him or say something, but his fury suddenly erupted before my hello somehow when he noticed the picture on the desk. He tried to hold back his anger to me at first but finally still shouted to me: \u0026ldquo;Go out here, now.\u0026rdquo; And then he turned his head to Tony. The atmosphere became solemn and both me and Tony could feel the pressure from the air. The pressure seemed to push me out, and then I realized that I was just an unexpected guest, instead of the intimate of them or someone else.\nTherefore I was only to leave. Perhaps in order to avoid my suffocation due to the high pressure, Tony\u0026rsquo;s mom pulled out a piece of bread from their bag and gave it me, \u0026ldquo;You are Tony\u0026rsquo;s friend, right? Don\u0026rsquo;t be nervous or worry about Tony\u0026rsquo;s father, he is always like that——oh, well, would you like this? Just take it as a gift\u0026rdquo;. But what she said didn\u0026rsquo;t relaxed me, instead, I was even more worried when I heard the word \u0026ldquo;always\u0026rdquo;. But I did not want to intensify the tension anymore so I just took it symbolically.\nBut of course, no one would have any appetite at such situation. So I just threw it away on the side of the path once the figure of their house had faded away beyond my view.\nThat was the last time I met him, without farewell. The next term, I transferred to the school located in the county, the town district.\n\u0026ldquo;You know, the school of our village, is so\u0026hellip;\u0026rdquo;, my mother said.\n\u0026ldquo;Up to you,\u0026rdquo; I just replied casually.\nAs a matter of fact, I was not the only one who transferred. According to my friends who still stayed there, after our leavings, two whole grades of the school did have classes in one classroom. Yes, just two grades, third of the primary school.\nAnd the next time I come back, though in fact just passing through, I found that the gate has been locked, and the yard was only left with ruined walls under overgrown weeds.\nI\u0026rsquo;ve left my hometown for education for nearly ten years. But most of my childhood friends have dropped out in their ninth grade year, drawing the period of their study career. It might seem a bit strange that though we were just living in the same village, we haven\u0026rsquo;t met each other for so many years.\nSome of them now are working on street barbecue, some do the barber and some become laborers. Some are enjoying their lives and looking forward to tomorrow. Some are dreaming of getting rich overnight and write it down as a slogan in their social medias. Some of them are just another me that lost the dreams, doing the tedious work for living. Some of them have had the thick barriers with me, and I am also not the boy that denied the existence of tigers back then. Somehow I started to miss the old time\u0026hellip;\nWe were all changed, never the same, like I was once travelling through the reeds forest, but now walking on the weeds meadow at the same place.\nIt\u0026rsquo;s been many years since my last time came here. Things were not, and so were the people. Air smelt damp, which made me a little bit chill in addition to the evening breeze. And just like an arranged coincidence, it started to sprinkle after a while, soaked my body and extinguished the flaring flames under the lake surface. Raindrop wrinkled the lake surface, just like the origami folding the ripples. The chirp of cicada was also silenced at that night. Moon shed its lights from lake bottom, scattering into beams of light. I was trying to flying to the sky, and finally touched the ceil, only to find that I had already been there, and someone was smiling to me.\n\u0026ldquo;It\u0026rsquo;s getting late. Now go home and have a rest.\u0026rdquo;\nSo I was trying to go back and have a rest. Though I haven\u0026rsquo;t been a regular there for the recent years, I still managed to find my way to that old house following the reeds, and then slept by following his words, and therefore then I awoke——\nFrom a long dream, I\u0026rsquo;ve had, for the whole day, at the cramped cabin, in a village, my old home, from dawn to dusk\u0026hellip;\n","date":"2021-03-31T18:25:17+08:00","image":"https://lomirus.github.io/p/upon-the-mere/cover_hud7e36f7e20e71be184458283bdae4646_55974_120x120_fill_q75_box_smart1.jpg","permalink":"https://lomirus.github.io/p/upon-the-mere/","title":"Fiction: Upon the Mere"}]