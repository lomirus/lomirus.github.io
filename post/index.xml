<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Lomirus' Site</title><link>https://lomirus.github.io/post/</link><description>Recent content in Posts on Lomirus' Site</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 19 Dec 2021 00:01:05 +0800</lastBuildDate><atom:link href="https://lomirus.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Bevy v0.5~0.6 基础入门（基于 Github bevy/main Dec 18, 21 构建版本）</title><link>https://lomirus.github.io/p/bevy-tutorial/</link><pubDate>Sun, 19 Dec 2021 00:01:05 +0800</pubDate><guid>https://lomirus.github.io/p/bevy-tutorial/</guid><description>&lt;img src="https://lomirus.github.io/p/bevy-tutorial/cover.png" alt="Featured image of post Bevy v0.5~0.6 基础入门（基于 Github bevy/main Dec 18, 21 构建版本）" />&lt;h2 id="一些碎碎念">一些碎碎念&lt;/h2>
&lt;h3 id="年轻人的第一款开源游戏引擎godot">年轻人的第一款开源游戏引擎：Godot&lt;/h3>
&lt;p>许久以前就一直有做游戏的想法。中学时或多或少地接触或听说过 CocosCreator、Erget、Unity 和 Unreal
等著名引擎，然而这些都是商业引擎，且对我来说太过笨重。大一的时候听说了
Godot，得知它应该是当前世界范围内最完善，也是知名与流行度最广的开源游戏引擎了。而且体积极其精简，只有不过百兆；与其他大型引擎动辄几 GB
的体积相比，实属一股清流。于是深得我心，我后面也开始学习这款引擎。&lt;/p>
&lt;p>这款引擎主要面向的应该是独立游戏开发者，预设了开发者技术能力不强的立场，同时也是为了使更多人接触到游戏开发，所以内置的官方语言是一门叫做 GDScript
的脚本语言，语法极其类似 Python。同时为了秉持开放性，也提供了 GDNative 供开发者使用几乎是任意语言（如 C/C++/Rust 等）进行开发。&lt;/p>
&lt;p>首先谈一下这个 Python，哦不，是 GDScript，我个人其实并不是很喜欢这门语言，简要列举一些原因：&lt;/p>
&lt;ul>
&lt;li>个人不喜欢 Python 的缩进语法&lt;/li>
&lt;li>GDScript 语言本身过于小众（但小众本身不是原罪），适用范围狭窄，语法设计拉跨，不够优雅&lt;/li>
&lt;li>性能拉跨，之前看过测试速度比 Python 还慢&lt;/li>
&lt;/ul>
&lt;p>当然 Godot 也可以通过 GDNative 使用我最喜欢的 Rust。但是中间终究隔着一层转译层，如同隔着一层可悲的厚壁障（什么奇妙比喻？）。其次,
Godot 本身使用的 Node 架构也会带来一定性能上的问题,参见官方文档：&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>When and how to avoid using nodes for everything&lt;/strong>&lt;/p>
&lt;p>Nodes are cheap to produce, but even they have their limits. A project may
have tens of thousands of nodes all doing things. The more complex their
behavior though, the larger the strain each one adds to a project&amp;rsquo;s
performance.&lt;/p>
&lt;p>(&lt;a class="link" href="https://docs.godotengine.org/en/stable/getting_started/workflow/best_practices/node_alternatives.html" target="_blank" rel="noopener"
>https://docs.godotengine.org/en/stable/getting_started/workflow/best_practices/node_alternatives.html&lt;/a>)&lt;/p>
&lt;/blockquote>
&lt;p>那么问题来了：&lt;/p>
&lt;blockquote>
&lt;p>你就一臭做独游的，还考虑个锤子性能？&lt;/p>
&lt;/blockquote>
&lt;p>话虽如此，可有哪个开发者能拒绝对性能的追求呢？再者，开发体验对我来说才是它更大的痛点。&lt;/p>
&lt;h3 id="从-godot-园到-bevy-书屋">从 Godot 园到 Bevy 书屋&lt;/h3>
&lt;p>后来，我又不知道在哪看到了 Bevy 这个游戏引擎。一开始没怎么注意它，最近见我加的一个 Godot 游戏开发的群组也时而提到它，但开始对它再次萌生好奇之心。&lt;/p>
&lt;p>印象里，Rust 里面之前比较火的开源游戏引擎有两个，一个 &lt;a class="link" href="https://github.com/amethyst/amethyst" target="_blank" rel="noopener"
>Amethyst&lt;/a>
和一个 &lt;a class="link" href="https://github.com/bevyengine/bevy" target="_blank" rel="noopener"
>Bevy&lt;/a>。看 Bevy 之前特意也查了下
Amethyst，发现它已经处于近乎停止维护的状态了；又去翻了一下它的论坛，发现里面也有一些谈到 Bevy
的优秀特性甚至是推荐转 Bevy 的帖子，遂不禁唏嘘。不过同时，这也坚定了我转向 Bevy 的决心，为下文中与 Bevy 的邂逅埋下了伏笔（阅读理解后遗症了属于是）。&lt;/p>
&lt;p>总之，接触到 Bevy 后不久，我就确定全面转向它了。它吸引我的地方实在太多，再简单列几条：&lt;/p>
&lt;ul>
&lt;li>Open Source, Free(自由) &amp;amp; Free(免费)&lt;/li>
&lt;li>源码与开发语言均为我最喜欢的 Rust（JS 谁啊，不是很熟🤔）&lt;/li>
&lt;li>采用新潮的 ECS 架构，天生并发友好，性能优异&lt;/li>
&lt;li>对原生工具链友好，如 VSCode/Cargo 等，开发环境对我来说更熟悉&lt;/li>
&lt;li>可以调用 Rust 的丰富生态&lt;/li>
&lt;li>&lt;del>无 GUI，学习成本低（x）&lt;/del>&lt;/li>
&lt;li>&lt;del>它作者本人也很让我喜欢👀&lt;/del>&lt;/li>
&lt;/ul>
&lt;p>话不多说，赶紧进入我们今天的正题，Bevy 的基础教程吧&lt;/p>
&lt;p>（本文假定你已经有一定的 Rust 语法基础，对其使用上的语法细节不会过多讲解）&lt;/p>
&lt;h2 id="ecs-架构扫盲">ECS 架构扫盲&lt;/h2>
&lt;blockquote>
&lt;p>什么呀，ECS，我知道，不就是阿里云的那个云服务器吗，好像全称是什么弹性计算服务（Elastic Compute Service）？&lt;/p>
&lt;/blockquote>
&lt;p>少年，莫急，此 ECS 非彼 ECS，这里的 ECS，指的是：&lt;code>Entity-Component-System&lt;/code>。&lt;/p>
&lt;p>ECS 是相对于传统的 OOP 思想而言的，遵循“组合大于继承”的原则。在 ECS 架构的游戏中，游戏单元由无数的 &lt;code>Entity&lt;/code> 构成，其中
&lt;code>Entity&lt;/code> 可类比做常见编程概念中的实例。而每个 &lt;code>Entity&lt;/code> 则由多个或单个 &lt;code>Component&lt;/code> 组成，&lt;code>Component&lt;/code>
是存储数据的结构类型，不包含任何方法。如果想要更新游戏数据，则需要通过 &lt;code>System&lt;/code> 来完成。&lt;/p>
&lt;p>如果需要进一步介绍，可自行百度/谷歌。&lt;/p>
&lt;p>光说不练略显抽象，还是一起来看下面的代码吧：&lt;/p>
&lt;h2 id="使用-bevy-实现简单的-ecs-架构">使用 Bevy 实现简单的 ECS 架构&lt;/h2>
&lt;p>Bevy 是一款基于 ECS 架构的游戏引擎，它的官网上就这么写道：&lt;/p>
&lt;blockquote>
&lt;p>Massively Parallel and Cache-Friendly. The fastest ECS according to some
benchmarks&lt;/p>
&lt;/blockquote>
&lt;p>简单翻译下就是：大规模并行&amp;amp;缓存友好，据某些测评说是最快的 ECS 游戏引擎&lt;/p>
&lt;p>因此，接下来我们就使用 Bevy 来实践一下 ECS：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">cargo new bevy-demo
&lt;span class="nb">cd&lt;/span> bevy-demo
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改 &lt;code>Cargo.toml&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-toml" data-lang="toml">&lt;span class="p">[&lt;/span>&lt;span class="nx">package&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nx">name&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;bevy-demo&amp;#34;&lt;/span>
&lt;span class="nx">version&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;0.1.0&amp;#34;&lt;/span>
&lt;span class="nx">edition&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;2021&amp;#34;&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="nx">dependencies&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bevy&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nx">git&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;https://github.com/bevyengine/bevy&amp;#34;&lt;/span>
&lt;span class="nx">rev&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13&amp;#34;&lt;/span>
&lt;span class="nx">features&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;dynamic&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意，这里没有使用 crate.io 上的最新版 0.5.0，而是使用了其 Github 上的最新版。原因是 0.6.0 发布在即（估计还有几个月），当前版本与
0.5.0 的用法已经存在较大差异。所以直接使用较新的版本也可以降低今后的学习成本。&lt;/p>
&lt;p>请确保你的配置中 &lt;code>rev&lt;/code> 与此处相同。本文所基于的版本为 Github 上 2021-12-18 的最新提交。&lt;/p>
&lt;p>&lt;code>features&lt;/code> 中的 &lt;code>dynamic&lt;/code> 是用于加快构建速度的，但是当你正式发布 Release
时最好去掉此特性，至于为什么，你可以自己去观察下当开启或关闭此特性后的生成的编译产物分别是什么。&lt;/p>
&lt;p>简简单单一个 Hello World 级别的主文件(&lt;code>main.rs&lt;/code>)：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="k">use&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">bevy&lt;/span>::&lt;span class="n">prelude&lt;/span>::&lt;span class="o">*&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">App&lt;/span>::&lt;span class="n">new&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>跑起来试试&lt;/p>
&lt;pre>&lt;code>cargo run
&lt;/code>&lt;/pre>&lt;p>啥输出也没有，正常预期。&lt;/p>
&lt;p>接下来再加上点 ECS 架构：&lt;/p>
&lt;p>首先，定义 &lt;code>Component&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="cp">#[derive(Component)]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">Person&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>: &lt;span class="nb">String&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">job&lt;/span>: &lt;span class="nb">String&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">age&lt;/span>: &lt;span class="kt">u32&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>写一个创建 &lt;code>Entity&lt;/code> 的 &lt;code>System&lt;/code>（函数）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="k">fn&lt;/span> &lt;span class="nf">init_people&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">commands&lt;/span>: &lt;span class="nc">Commands&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">commands&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">spawn&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">insert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Person&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>: &lt;span class="s">&amp;#34;野獣先輩&amp;#34;&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">to_string&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">job&lt;/span>: &lt;span class="s">&amp;#34;学生&amp;#34;&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">to_string&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">age&lt;/span>: &lt;span class="mi">24&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">});&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">commands&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">spawn&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">insert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Person&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>: &lt;span class="s">&amp;#34;田所浩二&amp;#34;&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">to_string&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">job&lt;/span>: &lt;span class="s">&amp;#34;学生&amp;#34;&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">to_string&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">age&lt;/span>: &lt;span class="mi">114514&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">});&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>接着再写一个遍历所有 &lt;code>Entities&lt;/code> 并输出的 &lt;code>System&lt;/code>（函数）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="k">fn&lt;/span> &lt;span class="nf">print_people&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">query&lt;/span>: &lt;span class="nc">Query&lt;/span>&lt;span class="o">&amp;lt;&amp;amp;&lt;/span>&lt;span class="n">Person&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">person&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">query&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">iter&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;{}：{} 歳、{}です&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">person&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">person&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">age&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">person&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">job&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>接下来我们就要把这些东西整合起来，也就是添加到 &lt;code>main()&lt;/code> 中的 &lt;code>App&lt;/code> 上。&lt;/p>
&lt;p>这里要先介绍 &lt;code>App&lt;/code> 的两个方法，&lt;code>add_system()&lt;/code> 和 &lt;code>add_startup_system()&lt;/code>。&lt;code>add_system()&lt;/code>
顾名思义，就是用来添加 &lt;code>system&lt;/code> 到 &lt;code>App&lt;/code> 上的；而 &lt;code>add_startup_system()&lt;/code>，则是会在游戏初始化阶段也就是最开始执行某个
&lt;code>system&lt;/code>。因此，我们可以把主函数改成这样：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="k">fn&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">App&lt;/span>::&lt;span class="n">new&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">add_startup_system&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">init_people&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">add_system&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">print_people&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行 &lt;code>cargo run&lt;/code>，输出结果是：&lt;/p>
&lt;pre>&lt;code>$ cargo run
Compiling rust-demo v0.1.0 (/home/lomirus/demo/rust-demo)
Finished dev [unoptimized + debuginfo] target(s) in 3.03s
Running `target/debug/rust-demo`
野獣先輩：24 歳、学生です
田所浩二：114514 歳、学生です
&lt;/code>&lt;/pre>&lt;h2 id="bevy-基础开发">Bevy 基础开发&lt;/h2>
&lt;p>有些小伙伴可能会问了：&lt;/p>
&lt;blockquote>
&lt;p>正经人谁玩控制台黑框框游戏呀？&lt;/p>
&lt;/blockquote>
&lt;p>确实，Bevy 毕竟也不是用来写 CLI 的。所以接下来我们再实现一个简单的图形界面。&lt;/p>
&lt;h3 id="准备资源">准备资源&lt;/h3>
&lt;p>首先，在项目目录创建一个 &lt;code>assets&lt;/code> 文件夹，在里面放一张图片。比如我放了一张 &lt;code>image.jpg&lt;/code> 进去，但是这里要注意，bevy 默认是不支持载入
jpg 格式的图片的，这时需要修改一下 Cargo.toml&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-toml" data-lang="toml">&lt;span class="p">[&lt;/span>&lt;span class="nx">dependencies&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bevy&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nx">git&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;https://github.com/bevyengine/bevy&amp;#34;&lt;/span>
&lt;span class="nx">rev&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13&amp;#34;&lt;/span>
&lt;span class="c"># features = [&amp;#34;dynamic&amp;#34;]&lt;/span>
&lt;span class="nx">features&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;jpeg&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;dynamic&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样就可以支持载入 jpg 格式的图片了。&lt;/p>
&lt;p>然后，再在 &lt;code>assets&lt;/code> 文件夹下创建一个字体文件。由于我是 Linux 用户，所以直接复制了一份系统自带的
&lt;code>NotoSansMono-Regular.ttf&lt;/code> 字体。这里你当然也可以选自己喜欢的，记得后面的相应操作改成你的字体名就行。&lt;/p>
&lt;h3 id="创建窗口">创建窗口&lt;/h3>
&lt;p>Bevy 的设计是很模块化的，许多功能都被拆成了不同的模块，利用添加插件的形式使用。不过幸好 Bevy 也为我们提供了默认的插件配置。比如我们可以使用：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="n">App&lt;/span>::&lt;span class="n">new&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">add_plugins&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">DefaultPlugins&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">add_startup_system&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">init_people&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">add_system&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">print_people&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>以此导入默认插件，然后我们运行，会发现控制台不断输出内容，同时也弹出了一个窗口：&lt;/p>
&lt;p>&lt;img src="https://lomirus.github.io/p/bevy-tutorial/1.png"
width="1373"
height="797"
srcset="https://lomirus.github.io/p/bevy-tutorial/1_hue148111860adebf77525104457fa5750_112513_480x0_resize_box_3.png 480w, https://lomirus.github.io/p/bevy-tutorial/1_hue148111860adebf77525104457fa5750_112513_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="172"
data-flex-basis="413px"
>&lt;/p>
&lt;p>这就说明添加成功了，至于控制台里会出现无限输出的现象，是因为添加 &lt;code>DefaultPlugins&lt;/code> 的时候，同时也引入了 eventloop。&lt;/p>
&lt;h3 id="载入图片">载入图片&lt;/h3>
&lt;p>现在我们之前写的函数都可以扬了，再重新创建一个新的 &lt;code>main&lt;/code> 函数：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="k">fn&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">App&lt;/span>::&lt;span class="n">new&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">add_plugins&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">DefaultPlugins&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">add_startup_system&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">setup&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>接下来我们将在 &lt;code>setup&lt;/code> 函数中实现载入图片的逻辑：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="k">fn&lt;/span> &lt;span class="nf">setup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">commands&lt;/span>: &lt;span class="nc">Commands&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">asset_server&lt;/span>: &lt;span class="nc">Res&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">AssetServer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">commands&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">spawn&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">insert_bundle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">SpriteBundle&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">texture&lt;/span>: &lt;span class="nc">asset_server&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">load&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;image.jpg&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">..&lt;/span>&lt;span class="nb">Default&lt;/span>::&lt;span class="n">default&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">});&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这就就添加了图片到游戏里面，但是我们并看不到图片，原因是我们没有添加摄像头，所以接下来我们再添加一个“正交相机”：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="n">commands&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">spawn&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">insert_bundle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">OrthographicCameraBundle&lt;/span>::&lt;span class="n">new_2d&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">commands&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">spawn&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">insert_bundle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">SpriteBundle&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">texture&lt;/span>: &lt;span class="nc">asset_server&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">load&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;image.jpg&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">..&lt;/span>&lt;span class="nb">Default&lt;/span>::&lt;span class="n">default&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">});&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此外，&lt;code>spawn().insert_bundle(bundle)&lt;/code> 还可以简化成 &lt;code>spawn_bundle(bundle)&lt;/code>，所以上面的代码可以改成：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="n">commands&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">spawn_bundle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">OrthographicCameraBundle&lt;/span>::&lt;span class="n">new_2d&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">commands&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">spawn_bundle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">SpriteBundle&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">texture&lt;/span>: &lt;span class="nc">asset_server&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">load&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;image.jpg&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">..&lt;/span>&lt;span class="nb">Default&lt;/span>::&lt;span class="n">default&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">});&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行看看效果：&lt;/p>
&lt;p>&lt;img src="https://lomirus.github.io/p/bevy-tutorial/2.png"
width="1047"
height="780"
srcset="https://lomirus.github.io/p/bevy-tutorial/2_hu0a6691a004755614bb9814156d75c6f2_125093_480x0_resize_box_3.png 480w, https://lomirus.github.io/p/bevy-tutorial/2_hu0a6691a004755614bb9814156d75c6f2_125093_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="134"
data-flex-basis="322px"
>&lt;/p>
&lt;h3 id="键盘输入">键盘输入&lt;/h3>
&lt;p>为 &lt;code>App&lt;/code> 增加读取键盘输入的系统：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="n">App&lt;/span>::&lt;span class="n">new&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">add_plugins&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">DefaultPlugins&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">add_startup_system&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">setup&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">add_system&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">keyboard_input_system&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>下面编写 &lt;code>keyboard_input_system&lt;/code> 函数：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="k">fn&lt;/span> &lt;span class="nf">keyboard_input_system&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">keyboard_input&lt;/span>: &lt;span class="nc">Res&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Input&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">KeyCode&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">keyboard_input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">pressed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">KeyCode&lt;/span>::&lt;span class="n">A&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Go Left!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">keyboard_input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">pressed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">KeyCode&lt;/span>::&lt;span class="n">D&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Go Right!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>接下来运行一下，按下键盘的 &lt;code>A&lt;/code> 和 &lt;code>D&lt;/code> 键，便会看到控制台出现相应的输出。另外此处的 &lt;code>keyboard_input&lt;/code> 常用的方法还有两个 &lt;code>just_pressed()&lt;/code> 和 &lt;code>just_released()&lt;/code>，它们各自具体的用途可以自己分别试一下，看看是什么效果。&lt;/p>
&lt;h3 id="角色移动">角色移动&lt;/h3>
&lt;p>为了更加使函数名更加语义化，我们先把 &lt;code>keyboard_input_system()&lt;/code> 改成 &lt;code>move_system()&lt;/code>，然后修改函数：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="k">fn&lt;/span> &lt;span class="nf">move_system&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">keyboard_input&lt;/span>: &lt;span class="nc">Res&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Input&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">KeyCode&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">players&lt;/span>: &lt;span class="nc">Query&lt;/span>&lt;span class="o">&amp;lt;&amp;amp;&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Transform&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">keyboard_input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">pressed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">KeyCode&lt;/span>::&lt;span class="n">A&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">player&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">players&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">iter_mut&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">translation&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mf">1.0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">keyboard_input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">pressed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">KeyCode&lt;/span>::&lt;span class="n">D&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">player&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">players&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">iter_mut&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">translation&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mf">1.0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>由于我们的在之前的 &lt;code>setup&lt;/code> 中添加的 &lt;code>SpriteBundle&lt;/code> 中含有 &lt;code>Transform&lt;/code> &lt;code>Component&lt;/code>，所以这里会获取到所有的 &lt;code>Transform&lt;/code>。然后我们对它遍历，并修改它的 &lt;code>translate&lt;/code> 属性，如果用户按 &lt;code>A&lt;/code> 则角色向左移动，按 &lt;code>D&lt;/code> 则向右移动。&lt;/p>
&lt;p>如果现在你试着运行，你会发现按键后角色并没有移动。之所以这样，是因为我们前面还添加了一个“正交相机”，它也具有 &lt;code>Transform&lt;/code> 组件。而根据著名的锡进定律，我们易证：&lt;/p>
&lt;blockquote>
&lt;p>所有组件都移动了，就等于所有组件都没移动。😅&lt;/p>
&lt;/blockquote>
&lt;p>这里体现了运动的相对性，由于相机和角色是一起移动的，所以在相机看来，角色相当于就是没有移动。&lt;/p>
&lt;p>为了解决这个问题，我们需要再给角色添加一个特殊的组件（&lt;code>Component&lt;/code>）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="cp">#[derive(Component)]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">Player&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>接着再向角色实体 &lt;code>Entity&lt;/code> 添加上该 &lt;code>Component&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="k">fn&lt;/span> &lt;span class="nf">setup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">commands&lt;/span>: &lt;span class="nc">Commands&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">asset_server&lt;/span>: &lt;span class="nc">Res&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">AssetServer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">commands&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">spawn_bundle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">OrthographicCameraBundle&lt;/span>::&lt;span class="n">new_2d&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">commands&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">spawn_bundle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">SpriteBundle&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">texture&lt;/span>: &lt;span class="nc">asset_server&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">load&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;image.jpg&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">..&lt;/span>&lt;span class="nb">Default&lt;/span>::&lt;span class="n">default&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">})&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">insert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Player&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后再修改一下角色移动系统，要求查询（&lt;code>Query&lt;/code>）到的角色需要含有 &lt;code>Player&lt;/code> 组件：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="k">fn&lt;/span> &lt;span class="nf">move_system&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">keyboard_input&lt;/span>: &lt;span class="nc">Res&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Input&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">KeyCode&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">players&lt;/span>: &lt;span class="nc">Query&lt;/span>&lt;span class="o">&amp;lt;&amp;amp;&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Transform&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">With&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Player&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">keyboard_input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">pressed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">KeyCode&lt;/span>::&lt;span class="n">A&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">player&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">players&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">iter_mut&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">translation&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mf">1.0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">keyboard_input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">pressed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">KeyCode&lt;/span>::&lt;span class="n">D&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">player&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">players&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">iter_mut&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">translation&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mf">1.0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>接下来运行一下，角色就可以移动起来了。&lt;/p>
&lt;p>另外，由于这里的玩家只有一个，我们可以把 for 循环给去掉，简化一下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="k">fn&lt;/span> &lt;span class="nf">move_system&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">keyboard_input&lt;/span>: &lt;span class="nc">Res&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Input&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">KeyCode&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">players&lt;/span>: &lt;span class="nc">Query&lt;/span>&lt;span class="o">&amp;lt;&amp;amp;&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Transform&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">With&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Player&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">keyboard_input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">pressed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">KeyCode&lt;/span>::&lt;span class="n">A&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">players&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">iter_mut&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">unwrap&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">translation&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mf">1.0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">keyboard_input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">pressed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">KeyCode&lt;/span>::&lt;span class="n">D&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">players&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">iter_mut&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">unwrap&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">translation&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mf">1.0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>另外的另外，这里除了修改实体外，你也可以把玩家定义为全局唯一的资源类，这里就不再演示了。&lt;/p>
&lt;h3 id="移动优化">移动优化&lt;/h3>
&lt;p>我们有时候会需要获取并修改多个组件，这里可以通过元组(&lt;code>tuple&lt;/code>)来查询：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="k">fn&lt;/span> &lt;span class="nf">move_system&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">keyboard_input&lt;/span>: &lt;span class="nc">Res&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Input&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">KeyCode&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">players&lt;/span>: &lt;span class="nc">Query&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Transform&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Sprite&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">With&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Player&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">player&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sprite&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">players&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">iter_mut&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">unwrap&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">keyboard_input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">pressed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">KeyCode&lt;/span>::&lt;span class="n">A&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sprite&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">flip_x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">translation&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mf">1.0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">keyboard_input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">pressed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">KeyCode&lt;/span>::&lt;span class="n">D&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sprite&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">flip_x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">translation&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mf">1.0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里通过修改 &lt;code>sprite.flip_x&lt;/code>，使角色图片在移动时随着方向的不同而进行镜面反转。&lt;/p>
&lt;h2 id="next-steps">Next Steps&lt;/h2>
&lt;p>Bevy 的进一步学习建议阅读&lt;a class="link" href="https://github.com/bevyengine/bevy/tree/latest/examples" target="_blank" rel="noopener"
>官方示例&lt;/a>&lt;/p>
&lt;p>至于我自己，除了学习游戏引擎，我觉得也该去先学点画画了😥毕竟我的 Aseprite 都不知道吃灰多久了&lt;/p></description></item><item><title>一次失败的尝试开发 Gnome Extension 经历</title><link>https://lomirus.github.io/p/gnome-extention-development/</link><pubDate>Mon, 29 Nov 2021 00:16:00 +0800</pubDate><guid>https://lomirus.github.io/p/gnome-extention-development/</guid><description>&lt;img src="https://lomirus.github.io/p/gnome-extention-development/cover.jpg" alt="Featured image of post 一次失败的尝试开发 Gnome Extension 经历" />&lt;h2 id="引子">引子&lt;/h2>
&lt;p>众所周知，MacOS 有一个 global menu bar 的功能。不同于 Windows 会将 menu bar 单独置于每个窗口的 title bar 下面的设计，MacOS 则是将他们统一地放在 panel 上。这样不仅充分利用并节约了空间，也显得更加美观。&lt;/p>
&lt;p>&lt;img src="https://lomirus.github.io/p/gnome-extention-development/macos_example.jpeg"
width="1244"
height="576"
srcset="https://lomirus.github.io/p/gnome-extention-development/macos_example_hu3e3fcaedcb84b877bf9c3cac96eadb6c_67992_480x0_resize_q75_box.jpeg 480w, https://lomirus.github.io/p/gnome-extention-development/macos_example_hu3e3fcaedcb84b877bf9c3cac96eadb6c_67992_1024x0_resize_q75_box.jpeg 1024w"
loading="lazy"
alt="MacOS Example"
class="gallery-image"
data-flex-grow="215"
data-flex-basis="518px"
>&lt;/p>
&lt;p>然而我用的是 Linux，桌面环境是 Gnome，默认自然是没有这种功能的。幸而 Linux 的桌面环境一般可定制化程度都比较高。对于 Gnome 来说，它也有着一套自己的插件体系。因此，我一开始试着在它的&lt;a class="link" href="https://extensions.gnome.org/" target="_blank" rel="noopener"
>官方网站&lt;/a>上查找相关的扩展，然后就找到一款叫做 &lt;a class="link" href="https://extensions.gnome.org/extension/4114/fildem-global-menu/" target="_blank" rel="noopener"
>Fildem global menu&lt;/a> 的扩展：&lt;/p>
&lt;p>&lt;img src="https://lomirus.github.io/p/gnome-extention-development/fildem.png"
width="1281"
height="843"
srcset="https://lomirus.github.io/p/gnome-extention-development/fildem_hu8d62c7b626ba29a9774cb52939fb57e7_110903_480x0_resize_box_3.png 480w, https://lomirus.github.io/p/gnome-extention-development/fildem_hu8d62c7b626ba29a9774cb52939fb57e7_110903_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Fildem global menu"
class="gallery-image"
data-flex-grow="151"
data-flex-basis="364px"
>&lt;/p>
&lt;p>可惜的是这个扩展年久失修，并不能完美支持 Gnome40（况且我用的都是 41 了），而且体验也不怎么样。比如有时当你点击 File 目录将其展开后，再将鼠标滑动到旁边的 View 栏，并不能使当前聚焦的目录自动转移过来，导致手感及其生硬。&lt;/p>
&lt;p>可我心里又始终放不下 MacOS 的 Global Menu Bar（🤤），而既然作为 Linux 用户，自然要有自己动手丰衣足食的觉悟嘛。因此我便尝试开始学习 Gnome Shell 的插件开发。&lt;/p>
&lt;h2 id="gnome-extension-目录结构">Gnome Extension 目录结构&lt;/h2>
&lt;h3 id="概览">概览&lt;/h3>
&lt;p>经过简单地 Google 搜索后，我找到了 Gnome Extension 开发的&lt;a class="link" href="https://gjs.guide/" target="_blank" rel="noopener"
>官方文档&lt;/a>。&lt;/p>
&lt;p>下面简单介绍一下相关的基础知识。首先，一个扩展的目录下面一般是类似下面这种结构：&lt;/p>
&lt;pre>&lt;code>example@shell.gnome.org.zip
locale/
de/
LC_MESSAGES/
example.mo
schemas/
gschemas.compiled
org.gnome.shell.extensions.example.gschema.xml
extension.js
metadata.json
prefs.js
stylesheet.css
&lt;/code>&lt;/pre>&lt;p>其中，最重要并且也是唯二 required 的是 &lt;code>metadata.json&lt;/code> 和 &lt;code>extension.js&lt;/code>。&lt;/p>
&lt;h3 id="metadatajson">metadata.json&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;uuid&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;example@shell.gnome.org&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Example&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;description&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;This is an example extension.&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;shell-version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="s2">&amp;#34;3.38&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;40&amp;#34;&lt;/span> &lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;url&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;https://gitlab.gnome.org/World/ShellExtensions/example&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>一个 &lt;code>metadata.json&lt;/code> 的结构就类似上面这样，但凡有点开发经验的人都能看出来每条规则代表什么意思，我这里也就不多讲废话了。如果有对哪几项不确定的，建议直接去翻官方文档的介绍：&lt;a class="link" href="https://gjs.guide/extensions/overview/anatomy.html#metadata-json-required" target="_blank" rel="noopener"
>metadata.json (Required)&lt;/a>&lt;/p>
&lt;h3 id="extensionjs">extension.js&lt;/h3>
&lt;p>这个是扩展的核心文件，里面需要提供三个方法：&lt;code>init()&lt;/code>, &lt;code>enable()&lt;/code>, &lt;code>disable()&lt;/code>。你可以像这样提供：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kr">class&lt;/span> &lt;span class="nx">Extension&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">constructor&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;span class="nx">enable&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;enabled&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">disable&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;disabled&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">init&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`initializing`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Extension&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>也可以这样：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kd">function&lt;/span> &lt;span class="nx">enable&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;enabled&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">disable&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;disabled&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">init&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`initializing...`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后接下来最让我恼火的就来了。首先，开发扩展，必然要调用相关程序提供的 API 接口，因此，我就要去阅读相关文档。然而离谱的是，Gnome Shell 的 API 根本没有文档！！！文档中给的 GNOME APIs 的&lt;a class="link" href="http://devdocs.baznga.org/" target="_blank" rel="noopener"
>文档地址&lt;/a> 访问返回 502 Bad Gateway，页面右上角的 &lt;a class="link" href="https://gjs-docs.gnome.org/" target="_blank" rel="noopener"
>API References&lt;/a> 也根本不是并不是我要的那些。真正的 API 在文中是这么说的：&lt;/p>
&lt;blockquote>
&lt;p>Here are a few links to some commonly used modules.&lt;/p>
&lt;p>You can browse around in the js/ui/ folder or any other JavaScript file under js/ for more code to be reused.&lt;/p>
&lt;/blockquote>
&lt;p>然后下面给了相关链接，其中 &lt;code>js/&lt;/code> 对应的链接是：&lt;a class="link" href="https://gitlab.gnome.org/GNOME/gnome-shell/-/tree/main/js/" target="_blank" rel="noopener"
>https://gitlab.gnome.org/GNOME/gnome-shell/-/tree/main/js/&lt;/a>，我于是随便翻开了一个页面：&lt;/p>
&lt;p>&lt;img src="https://lomirus.github.io/p/gnome-extention-development/docs.png"
width="748"
height="787"
srcset="https://lomirus.github.io/p/gnome-extention-development/docs_hu1668c951d5c427d33899b28b8386ca30_117987_480x0_resize_box_3.png 480w, https://lomirus.github.io/p/gnome-extention-development/docs_hu1668c951d5c427d33899b28b8386ca30_117987_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="95"
data-flex-basis="228px"
>&lt;/p>
&lt;blockquote>
&lt;p>我翻开文档一查，这文档没有排版，歪歪斜斜的每叶上都写着“&lt;code>/***/function&lt;/code>”几个字。我横竖睡不着，仔细看了半夜，才从字缝里看出字来，满本都写着两个字是“源码”！&lt;/p>
&lt;/blockquote>
&lt;p>我只能说大受震撼，我不理解，为什么它要让我直接看源码，明明我只要函数名参数返回值加注释就够了，然而加上源码之后翻起来麻烦得离谱，况且有些方法甚至都没有注释。更奇怪的是，源码中还把 private methods 暴露给了我，什么露出Play😅？（你只能眼巴巴地看着私有 API 为了遵守代码规范却又调不了气急败坏的样子真的很好笑呢~🤗）。为什么呀为什么😤？&lt;/p>
&lt;blockquote>
&lt;p>我实在我也不是谦虚，我一个调 API 的怎么看源码来了呢？但是呢，gnome-shell 讲“大家已经研究决定了”，所以后来我就唸了两首诗，叫“苟利国家生死以，岂因祸福避趋之”，那么所以我就直接翻源码了&lt;/p>
&lt;/blockquote>
&lt;h2 id="后续">后续&lt;/h2>
&lt;p>就这样，将近过去了两周，这个项目还是没有什么进展。本来还想着能参考着一些其他扩展的源码，照葫芦画瓢，还能大体写出个样子呢。不过可能由于我只是一时兴起，开发文档又极其简陋，所以最终还是这样搁置了下去。目前的进度，倒是写出了目录栏，不过还只是写死的，还需要增加检测到焦点窗口切换时自动更新菜单栏内容的功能。所以先把源码贴一下，万一能帮到什么人呢（不过话说真的会有人接手这个屎山吗？）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kr">const&lt;/span> &lt;span class="nx">St&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">imports&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">gi&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">St&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">GObject&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">imports&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">gi&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">GObject&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">Gio&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">imports&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">gi&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Gio&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">Clutter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">imports&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">gi&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Clutter&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">Shell&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">imports&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">gi&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Shell&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">WinTracker&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">imports&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">gi&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Shell&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">WindowTracker&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get_default&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">Main&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">imports&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ui&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">main&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">PanelMenu&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">imports&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ui&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">panelMenu&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">PopupMenu&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">imports&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ui&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">popupMenu&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">Me&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">imports&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">misc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">extensionUtils&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getCurrentExtension&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">buttonTexts&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;File&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Edit&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Selection&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;View&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Go&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Run&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Terminal&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Window&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Help&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">reverse&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">MenuButtons&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[];&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * @type {(title: string) =&amp;gt; any}
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">MenuButton&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">GObject&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">registerClass&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="kr">class&lt;/span> &lt;span class="nx">PopupClass&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">PanelMenu&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Button&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * @type {(title: string) =&amp;gt; void}
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="mi">_&lt;/span>&lt;span class="nx">init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">title&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">super&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">_&lt;/span>&lt;span class="nx">init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">add_child&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="nx">St&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Label&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">text&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">title&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">y_align&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Clutter&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ActorAlign&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">CENTER&lt;/span>
&lt;span class="p">}));&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">item&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">PopupMenu&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">PopupMenuItem&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Test&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">menu&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addMenuItem&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">item&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">init&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">enable&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="nx">buttonTexts&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">MenuButtons&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="nx">MenuButton&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">buttonTexts&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]));&lt;/span>
&lt;span class="nx">Main&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">panel&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addToStatusArea&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">buttonTexts&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nx">MenuButtons&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;left&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// const focusApp = WinTracker.focus_app;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// if (!focusApp) return;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// const focusWindow = focusApp.get_windows()[0];
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// if (!focusWindow) return;
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// const names = [];
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// for (let name in focusWindow) {
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// names.push(name)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// }
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// log(names)
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// global.display.connect(&amp;#39;notify::focus-window&amp;#39;, (e) =&amp;gt; {
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// log(&amp;#34;focus something&amp;#34;);
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// log(e)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// });
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">disable&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="nx">MenuButtons&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">MenuButtons&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">destroy&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">MenuButtons&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>与 Flutter 的初次接触（以及开发 Hall of Fame 的踩坑记录）</title><link>https://lomirus.github.io/p/first-meet-to-flutter/</link><pubDate>Tue, 19 Oct 2021 15:30:00 +0800</pubDate><guid>https://lomirus.github.io/p/first-meet-to-flutter/</guid><description>&lt;img src="https://lomirus.github.io/p/first-meet-to-flutter/cover.png" alt="Featured image of post 与 Flutter 的初次接触（以及开发 Hall of Fame 的踩坑记录）" />&lt;h2 id="前言">前言&lt;/h2>
&lt;p>首先简要介绍一下 &lt;code>Hall of Fame&lt;/code> 吧，这其实就只是我自己开发的一个用于管理、分发我的一些朋友们的聊天记录截图表情包的 App。本来是想着和朋友合作，自己只负责后端开发来着，然而负责 Android 和 Web 客户端开发的那边一直还有其他需求，导致这边的工期一直在鸽。到了后面，我就接手的这个项目的客户端方面的开发，然而上面的其实并不是主要原因。主要还是因为最近我对 Flutter 这种大前端的技术栈比较感兴趣，想要学习一下。而且这个 App 的复杂度又恰到好处，因此就正好使用它来练手了。&lt;/p>
&lt;p>总的来说，Flutter 的上手难度在我个人角度看来还算是比较简单的。从从未接触过 Flutter，到独立开发出一个相对完整的 App，中间也不过只有两周左右。另外从一名 Web 前端开发者的视角来看，使用 Flutter 开发界面的难度还是要相对高于传统的 Web 开发的，尤其是在自定义方面，一旦写起样式来各种嵌套又要写一堆了&amp;hellip;但是 Google 默认提供的 Material Design UI 库对于没有视觉要求的指定风格的情况来说还是蛮够用的；另外官方也提供了一套 iOS 风格的 Cupertino UI 库，但是我还没有尝试过这个，不知道实际体验效果如何。至少就此来看，使用 Flutter 来进行一款跨端的小品类应用开发确实是一项不错的选择。至于大型项目，虽然 Flutter 版本已经迭代到了 2.5+，但是相对于其他已经发展了数年的 Native/Web 开发方案来说，还不能说是特别成熟。就比如我在下文中提到的一些坑，至今官方还没有提供相应的瀑布流库。闲鱼对此选择的路线则是自研，不过我种初学者自然是没有人家这种专业团队的实力，于是只能乖乖的在社区里找一些开源库先用着。&lt;/p>
&lt;p>至于性能方面，就我的 Hall of Fame 而言，采用 Release 模式下在 Android 平台上是几乎感受不到与 Native App 的差距的，包括我的做 Android 开发的朋友对此也是赞叹有加。另外说来离谱，在 Linux 环境下，用 C++ 编译成原生 Linux 二进制的可执行程序的动画性能，是肉眼可见地低于在 Linux 平台下 Chrome 上的性能的。Linux 原生程序运行时可以明显的看到掉帧，而在 Windows 和 Chrome 上则比较流畅。&lt;/p>
&lt;p>下面贴下这个项目的 Github 地址：&lt;a class="link" href="https://github.com/hall-of-fame/hof-flutter-md" target="_blank" rel="noopener"
>https://github.com/hall-of-fame/hof-flutter-md&lt;/a>，以及首屏图：&lt;/p>
&lt;p>&lt;img src="https://lomirus.github.io/p/first-meet-to-flutter/screenshot.jpeg"
width="1080"
height="2400"
srcset="https://lomirus.github.io/p/first-meet-to-flutter/screenshot_hu4c394e80cc29ab44829d2e73678e69e3_1461556_480x0_resize_q75_box.jpeg 480w, https://lomirus.github.io/p/first-meet-to-flutter/screenshot_hu4c394e80cc29ab44829d2e73678e69e3_1461556_1024x0_resize_q75_box.jpeg 1024w"
loading="lazy"
alt="展示图"
class="gallery-image"
data-flex-grow="45"
data-flex-basis="108px"
>&lt;/p>
&lt;p>下面则是讲一下我在使用 Flutter 进行开发的过程中遇到的一些问题：&lt;/p>
&lt;h2 id="导航栏标签页-keep-alive">导航栏标签页 keep-alive&lt;/h2>
&lt;h3 id="一般的标签页切换">一般的标签页切换&lt;/h3>
&lt;p>在 Flutter 中，如果我们想通过 BottomNavigationBar 实现一个简单的标签页切换功能，可以在官方文档对于
&lt;code>BottomNavigationBar class&lt;/code> 的介绍看到一些简单示例。这里我们以之为基础，再次对其进行简化，可以得到下面一个只有 32 行的简单结构：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-dart" data-lang="dart">&lt;span class="kd">class&lt;/span> &lt;span class="nc">MyStatefulWidget&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">StatefulWidget&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">const&lt;/span> &lt;span class="n">MyStatefulWidget&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="n">Key&lt;/span>&lt;span class="o">?&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">})&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">super&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nl">key:&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">State&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">MyStatefulWidget&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">createState&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="n">_MyStatefulWidgetState&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">class&lt;/span> &lt;span class="nc">_MyStatefulWidgetState&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">State&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">MyStatefulWidget&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">_selectedIndex&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kd">static&lt;/span> &lt;span class="kd">const&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Widget&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">_widgetOptions&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Widget&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">[&lt;/span>
&lt;span class="n">Text&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Index 0: Home&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="n">Text&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Index 1: Settings&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="p">];&lt;/span>
&lt;span class="n">Widget&lt;/span> &lt;span class="n">build&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">BuildContext&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Scaffold&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nl">body:&lt;/span> &lt;span class="n">Center&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nl">child:&lt;/span> &lt;span class="n">_widgetOptions&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">elementAt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">_selectedIndex&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="nl">bottomNavigationBar:&lt;/span> &lt;span class="n">BottomNavigationBar&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nl">items:&lt;/span> &lt;span class="kd">const&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">BottomNavigationBarItem&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">[&lt;/span>
&lt;span class="n">BottomNavigationBarItem&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nl">icon:&lt;/span> &lt;span class="n">Icon&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Icons&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">home&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nl">label:&lt;/span> &lt;span class="s1">&amp;#39;Home&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">),&lt;/span>
&lt;span class="n">BottomNavigationBarItem&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nl">icon:&lt;/span> &lt;span class="n">Icon&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Icons&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">settings&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nl">label:&lt;/span> &lt;span class="s1">&amp;#39;Settings&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">),&lt;/span>
&lt;span class="p">],&lt;/span>
&lt;span class="nl">currentIndex:&lt;/span> &lt;span class="n">_selectedIndex&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nl">onTap:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">index&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="n">setState&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="n">_selectedIndex&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">index&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="p">),&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="问题引入无法保存组件状态">问题引入：无法保存组件状态&lt;/h3>
&lt;p>事实上，对于上文中的&lt;a class="link" href="#%e6%9c%80%e5%b0%8f%e6%a0%b7%e4%be%8b" >最小样例&lt;/a>，这么写是完全没有问题的。但是随着软件功能的复杂化，一些问题可能就会暴露出来。比如，我们将上文中的 &lt;code>Text&lt;/code>
组件换为 &lt;code>TextField&lt;/code> 标签试一下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-dart" data-lang="dart">&lt;span class="kd">class&lt;/span> &lt;span class="nc">MyStatefulWidget&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">StatefulWidget&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">const&lt;/span> &lt;span class="n">MyStatefulWidget&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="n">Key&lt;/span>&lt;span class="o">?&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">})&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">super&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nl">key:&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">State&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">MyStatefulWidget&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">createState&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="n">_MyStatefulWidgetState&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">class&lt;/span> &lt;span class="nc">_MyStatefulWidgetState&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">State&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">MyStatefulWidget&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">_selectedIndex&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kd">static&lt;/span> &lt;span class="kd">const&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Widget&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">_widgetOptions&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Widget&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">[&lt;/span>
&lt;span class="n">TextField&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;span class="n">TextField&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;span class="p">];&lt;/span>
&lt;span class="n">Widget&lt;/span> &lt;span class="n">build&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">BuildContext&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Scaffold&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nl">body:&lt;/span> &lt;span class="n">Center&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nl">child:&lt;/span> &lt;span class="n">_widgetOptions&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">elementAt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">_selectedIndex&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="nl">bottomNavigationBar:&lt;/span> &lt;span class="n">BottomNavigationBar&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nl">items:&lt;/span> &lt;span class="kd">const&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">BottomNavigationBarItem&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">[&lt;/span>
&lt;span class="n">BottomNavigationBarItem&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nl">icon:&lt;/span> &lt;span class="n">Icon&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Icons&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">home&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nl">label:&lt;/span> &lt;span class="s1">&amp;#39;Home&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">),&lt;/span>
&lt;span class="n">BottomNavigationBarItem&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nl">icon:&lt;/span> &lt;span class="n">Icon&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Icons&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">settings&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nl">label:&lt;/span> &lt;span class="s1">&amp;#39;Settings&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">),&lt;/span>
&lt;span class="p">],&lt;/span>
&lt;span class="nl">currentIndex:&lt;/span> &lt;span class="n">_selectedIndex&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nl">onTap:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">index&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="n">setState&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="n">_selectedIndex&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">index&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="p">),&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果你试着跑了一下上文的代码，你会发现代码依旧可以通过编译，也可以正常运行。但是如果你在其中一个 &lt;code>TextField&lt;/code>
输入了一段文字，然后点击底部导航栏切换到了另一个标签页，然后再切换回来，你会发现你之前在 &lt;code>TextField&lt;/code> 的内容已经被清空掉了。&lt;/p>
&lt;p>这是因为，当你切换到另一个标签页时，Flutter 会将原先的标签页的组件给销毁掉，并创建一个新的你所选择的标签页（或者说是组件）。当你返回原来的页面时，也会执行一遍同样的操作，这时，这个页面已经不是原来的那个页面了。&lt;/p>
&lt;p>如果我们使用是的 React (Native) 或者是 Vue，我们可以简单地通过 &lt;code>&amp;lt;keep-alive&amp;gt;&lt;/code> 标签达到状态保存的目的，但是 Flutter 似乎就没有这么方便了😥。&lt;/p>
&lt;h3 id="解决方案automatic-keep-alive-client-mixin">解决方案：Automatic Keep Alive Client Mixin&lt;/h3>
&lt;p>于是然后我在 Google, StackOverflow, Github 上的一番求索，最终所找到的解决方案，都还是不太完善，比如可能会触发组件多次不必要的重新渲染，使用 Stack &amp;amp; Opacity 隐藏组件导致性能问题等等。最后，反而是在俄语课课间休息摸鱼时在知乎上找到了一个&lt;a class="link" href="https://zhuanlan.zhihu.com/p/61458683" target="_blank" rel="noopener"
>解决方案&lt;/a>。&lt;/p>
&lt;p>这个方案使用的是 &lt;code>AutomaticKeepAliveClientMixin&lt;/code>，按照它的方法，对上文中的示例代码进行修改后可得：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-dart" data-lang="dart">&lt;span class="kd">class&lt;/span> &lt;span class="nc">RootScreen&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">StatefulWidget&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">_RootScreenState&lt;/span> &lt;span class="n">createState&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="n">_RootScreenState&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">class&lt;/span> &lt;span class="nc">_RootScreenState&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">State&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">RootScreen&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">PageController&lt;/span> &lt;span class="n">_pageController&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">PageController&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">_pageIndex&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">Widget&lt;/span> &lt;span class="n">build&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">BuildContext&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Scaffold&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nl">body:&lt;/span> &lt;span class="n">PageView&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nl">children:&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Widget&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">[&lt;/span>
&lt;span class="n">HomeScreen&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;span class="n">SettingsScreen&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;span class="p">],&lt;/span>
&lt;span class="nl">controller:&lt;/span> &lt;span class="n">_pageController&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nl">onPageChanged:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="n">setState&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="n">_pageIndex&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">index&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="p">),&lt;/span>
&lt;span class="nl">bottomNavigationBar:&lt;/span> &lt;span class="n">BottomNavigator&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nl">selectTab:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="n">_pageController&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">jumpToPage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nl">selectedIndex:&lt;/span> &lt;span class="n">_pageIndex&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">),&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>以其中的 &lt;code>HomeScreen&lt;/code> 为例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-dart" data-lang="dart">&lt;span class="kd">class&lt;/span> &lt;span class="nc">HomeScreen&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">StatefulWidget&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">_HomeScreenState&lt;/span> &lt;span class="n">createState&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="n">_HomeScreenState&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">class&lt;/span> &lt;span class="nc">_HomeScreenState&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">State&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">HomeScreen&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="kd">with&lt;/span> &lt;span class="n">AutomaticKeepAliveClientMixin&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">bool&lt;/span> &lt;span class="kd">get&lt;/span> &lt;span class="n">wantKeepAlive&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">Widget&lt;/span> &lt;span class="n">build&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">BuildContext&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">super&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">build&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Center&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nl">child:&lt;/span> &lt;span class="n">Text&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Home&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>即可。&lt;/p>
&lt;p>Ref:
&lt;a class="link" href="https://medium.com/coding-with-flutter/flutter-case-study-multiple-navigators-with-bottomnavigationbar-90eb6caa6dbf" target="_blank" rel="noopener"
>Flutter Case Study: Multiple Navigators with BottomNavigationBar&lt;/a>&lt;/p>
&lt;h2 id="瀑布流展示">瀑布流展示&lt;/h2>
&lt;h3 id="scrollable-view-嵌套">Scrollable View 嵌套&lt;/h3>
&lt;p>当我们尝试在可滚动 View（如ListView/GridView ）中的 children 中嵌套可滚动 View 时，会出现以下报错：&lt;/p>
&lt;pre>&lt;code>════════ Exception caught by rendering library ═════════════════════════════════
The following assertion was thrown during performResize():
Vertical viewport was given unbounded height.
Viewports expand in the scrolling direction to fill their container. In this case, a vertical viewport was given an unlimited amount of vertical space in which to expand. This situation typically happens when a scrollable widget is nested inside another scrollable widget.
If this widget is always nested in a scrollable widget there is no need to use a viewport because there will always be enough vertical space for the children. In this case, consider using a Column instead. Otherwise, consider using the &amp;quot;shrinkWrap&amp;quot; property (or a ShrinkWrappingViewport) to size the height of the viewport to the sum of the heights of its children.
&lt;/code>&lt;/pre>&lt;p>这时我们在内层的 View 中可以插入 &lt;code>shrinkWrap: true&lt;/code>，即可解决报错。但是此时这个 View 将会无法滚动，我们可以继续在后面插入：
&lt;code>physics: NeverScrollableScrollPhysics()&lt;/code>，即可完美解决以上问题。&lt;/p>
&lt;h3 id="flutter_staggered_grid_view-库的简单使用">flutter_staggered_grid_view 库的简单使用&lt;/h3>
&lt;p>&lt;a class="link" href="https://pub.dev/packages/flutter_staggered_grid_view" target="_blank" rel="noopener"
>flutter_staggered_grid_view&lt;/a> 是一个可以便捷实现瀑布流布局的 Flutter 库。一般地，要想使用它，我们需要首先导入：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="c">### file: pubspec.yaml&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">dependencies&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">// ...&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">flutter_staggered_grid_view&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">^0.4.1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-dart" data-lang="dart">&lt;span class="c1">/// file: your_widget.dart
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="k">import&lt;/span> &lt;span class="s1">&amp;#39;package:flutter_staggered_grid_view/flutter_staggered_grid_view.dart&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>由于官方文档比较残缺，所以这里简要记录一下对于“内部组件宽度相同、数量不定的纵向瀑布流”的实现：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-dart" data-lang="dart">&lt;span class="k">return&lt;/span> &lt;span class="n">ListView&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nl">padding:&lt;/span> &lt;span class="n">EdgeInsets&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">all&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">20&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nl">children:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="c1">// 此处省略部分固定且无关的组件...
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">StaggeredGridView&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">countBuilder&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="c1">// 横向分两个“比例”
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nl">crossAxisCount:&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="c1">// 防止嵌套 Scrollable View 导致报错
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nl">physics:&lt;/span> &lt;span class="n">NeverScrollableScrollPhysics&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;span class="c1">// 防止本例中的 ListView 无法滚动
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nl">shrinkWrap:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="c1">// 样式相关
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nl">mainAxisSpacing:&lt;/span> &lt;span class="m">4.0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nl">crossAxisSpacing:&lt;/span> &lt;span class="m">4.0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="c1">// 组件的数量，不填会一直调用 itemBuilder 并不断抛出异常
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nl">itemCount:&lt;/span> &lt;span class="n">filtedStickers&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="c1">// 对于给定的 index，返回对应组件实例
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nl">itemBuilder:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">index&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span>
&lt;span class="n">StickerCard&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">filtedStickers&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">]),&lt;/span>
&lt;span class="c1">// 对于给定的 index，返回对应组件的宽度占比（相对于 crossAxisCount）
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nl">staggeredTileBuilder:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="kd">const&lt;/span> &lt;span class="n">StaggeredTile&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">fit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="p">),&lt;/span>
&lt;span class="p">],&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>使用 Puppeteer 爬取 Google Images 狗狗表情包</title><link>https://lomirus.github.io/p/puppeteer-dog-stickers/</link><pubDate>Sat, 28 Aug 2021 12:42:00 +0800</pubDate><guid>https://lomirus.github.io/p/puppeteer-dog-stickers/</guid><description>&lt;img src="https://lomirus.github.io/p/puppeteer-dog-stickers/cover.webp" alt="Featured image of post 使用 Puppeteer 爬取 Google Images 狗狗表情包" />&lt;h2 id="缘起自动生成狗狗表情包">缘起：自动生成狗狗表情包&lt;/h2>
&lt;p>前几天找朋友给我加需求，钰姐便提了个“自动生成狗狗表情包”的需求。不过如果真的按照需求的原意，唯一的解决方案就只有用到人工智能了。然而本人技术力实在过菜，才不匹位，只能退而求其次，找一些其他的解决方案了。&lt;/p>
&lt;h2 id="废案爬取qq历史头像">废案：爬取QQ历史头像&lt;/h2>
&lt;p>一开始想到的解决方案，自然是利用爬虫，这也正是本文的主要内容。后来由于细(xián)致(zhe)入(méi)微(shì)的观察，发现钰姐经常更新一些狗狗头像。于是便有了新思路，能否通过自动定时爬取钰姐的QQ头像，以自动获取狗狗表情包呢？&lt;/p>
&lt;p>关于这个思路，我一开始想到的是利用“获取QQ头像”的接口进行轮询，计算当前头像哈希值并与上一次获取到的头像的哈希值作比较，若不同则保存下载。但是轮询的时间间隔实在不太好设定。因为头像的更新时间并不固定，可能一天更新数次，也可能数天更新一次。如果设定轮询间隔时间过短，会导致服务器压力过大，严重的话说不定腾讯会直接把我给
ban 了。而如果设定轮询间隔时间过长，便会导致获取到的头像大概率是有遗漏的。&lt;/p>
&lt;p>考虑到更新头像终究是由人类来完成的，因此也需要考虑到利用一些社会工程学信息以对程序进行优化。比如在深夜凌晨的时候，可以适时停止爬虫以降低负载。但是考虑到这个作息规律&amp;hellip;咳咳&amp;hellip;还是算了吧，毕竟昨晚凌晨还刚刚看到钰姐又换了新头像来着。&lt;/p>
&lt;p>&lt;del>（那既然我能发现别人在熬夜内卷，那岂不是说明我也是在熬夜摸鱼?）&lt;/del>&lt;/p>
&lt;p>&lt;del>（啊这，好像有道理诶😥）&lt;/del>&lt;/p>
&lt;p>&lt;img src="https://lomirus.github.io/p/puppeteer-dog-stickers/0.jpg"
width="163"
height="191"
srcset="https://lomirus.github.io/p/puppeteer-dog-stickers/0_hu6b9ac2b103235a60dc91adad1f518b66_5197_480x0_resize_q75_box.jpg 480w, https://lomirus.github.io/p/puppeteer-dog-stickers/0_hu6b9ac2b103235a60dc91adad1f518b66_5197_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="85"
data-flex-basis="204px"
>&lt;/p>
&lt;p>又考虑到人类是一种优柔寡断的生物，所以每次换完头像后的一段时间内，都有较高的概率再次换个头像。因此在侦测到头像更新后，可以调高在未来一段短时间内的轮询频率。但是这也不能排除在提高轮询频率之前的遗漏情况。&lt;/p>
&lt;p>况且，这个解决方案所收集到的表情包数量还是及其有限的，如果想要收集到足够数量的头像，估计早过 deadline 了。&lt;/p>
&lt;p>综上所述，这个方案还是被 pass 掉了。&lt;/p>
&lt;h2 id="预备从-selenium-到-puppeteer">预备：从 Selenium 到 Puppeteer&lt;/h2>
&lt;p>上面的方案废弃后，自然便是在网上找一些适合爬取的网站进行爬虫了。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>在知乎上搜索“狗狗表情包”关键字，回答数量最多的问题下也不过只有十几个回答。Pass。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>找到一些表情包网站，搜索关键字，质量过低。Pass。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>百度图片搜索关键字，结果还行，然而对百度没什么好感，有谷歌我还用什么百度。Pass。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>于是将目标锁定到了 Google Images.&lt;/p>
&lt;p>预调试阶段，利用 devtools 的 network 栏发现虽然图片是动态加载，但是并没有使用 Fetch/XHR，而是在发送了一些 Other 类的 imgevent 请求，具体原理我也不清楚。因此这里也不能用普通的 Request 解决了。之前记得听说过一种叫做 Chrome headless 的东西，搜索之后发现了 Selenium，遂开始准备学习 Selenium 进行爬虫。不过文章写到这儿的时候又发现了 Google 搞了个 Puppeteer 东西，貌似对 NodeJS 更加易用一些，然后便又转战 Google Puppeteer 了。&lt;/p>
&lt;p>Puppeteer 的官方介绍：&lt;/p>
&lt;blockquote>
&lt;p>Puppeteer is a Node library which provides a high-level API to control Chrome or Chromium over the DevTools Protocol. Puppeteer runs headless by default, but can be configured to run full (non-headless) Chrome or Chromium.&lt;/p>
&lt;/blockquote>
&lt;p>自己稍微翻译一下：&lt;/p>
&lt;blockquote>
&lt;p>Puppeteer 是一个 Node 库，它在 DevTools 协议之上提供了高度封装的 API，以用来控制 Chrome 或 Chromium. Puppeteer 会默认运行 headless, 但是可以通过进行配置来运行完整版的 (non-headless) Chrome 或 Chromium.&lt;/p>
&lt;/blockquote>
&lt;h2 id="正文就硬爪巴">正文：就硬爪巴&lt;/h2>
&lt;p>首先看一下 Puppeteer 的&lt;a class="link" href="https://pptr.dev/" target="_blank" rel="noopener"
>官方文档&lt;/a>。&lt;/p>
&lt;p>接着老三样：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">mkdir dog-stickers
&lt;span class="nb">cd&lt;/span> dog-stickers
npm init -y
&lt;span class="nb">echo&lt;/span> node_modules &amp;gt; .gitignore
git init
&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装 &lt;code>puppeteer&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">npm install puppeteer
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果没有自动下载 Chromium，需要自己手动下载：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="nb">cd&lt;/span> node_modules/puppeteer
npm install
&lt;/code>&lt;/pre>&lt;/div>&lt;p>接下来写个 demo 测试一下，在项目根目录新建一个 &lt;code>index.js&lt;/code>，写入：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kr">const&lt;/span> &lt;span class="nx">puppeteer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;puppeteer&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="kr">async&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">browser&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">puppeteer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">launch&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">page&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">browser&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">newPage&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="kr">await&lt;/span> &lt;span class="nx">page&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kr">goto&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;https://example.com&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">await&lt;/span> &lt;span class="nx">page&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">screenshot&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">path&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;example.png&amp;#39;&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="kr">await&lt;/span> &lt;span class="nx">browser&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">close&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">})();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后 &lt;code>node index.js&lt;/code>，如果项目根目录下面生成一张截图文件，说明安装成功了。&lt;/p>
&lt;p>&lt;img src="https://lomirus.github.io/p/puppeteer-dog-stickers/example.png"
width="800"
height="600"
srcset="https://lomirus.github.io/p/puppeteer-dog-stickers/example_hu4e04f2c2ba688b12e1a8e3f758ae1272_27069_480x0_resize_box_3.png 480w, https://lomirus.github.io/p/puppeteer-dog-stickers/example_hu4e04f2c2ba688b12e1a8e3f758ae1272_27069_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="example.png"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/p>
&lt;p>然后只要再稍微加几行代码（迫真），我们的程序就完成了：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">promises&lt;/span> &lt;span class="nx">as&lt;/span> &lt;span class="nx">fs&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;fs&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">import&lt;/span> &lt;span class="nx">puppeteer&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;puppeteer&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">async&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">isReachedBottom&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">page&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">page&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">evaluate&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">scrollHeight&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">documentElement&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">scrollHeight&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">clientHeight&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">documentElement&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">clientHeight&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">scrollTop&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">documentElement&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">scrollTop&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">scrollHeight&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">round&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">clientHeight&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">scrollTop&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kr">async&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">getLoadingStatus&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">page&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">page&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">evaluate&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">querySelector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;.DwpMZe&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">getAttribute&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;data-status&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="kr">async&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">browser&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">puppeteer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">launch&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">headless&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">page&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">browser&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">newPage&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="cm">/* 这里要重新设置视窗大小，
&lt;/span>&lt;span class="cm"> 一是因为默认的视窗大小会导致浏览器出现横向滚动条，调大窗口可以方便调试，
&lt;/span>&lt;span class="cm"> 二是因为我猜测 Google Images 对于不在视窗范围内的图片 URL 可能不会进行加载，
&lt;/span>&lt;span class="cm"> 使用默认视窗大小总会出现大量 Empty 的情况，不知道是不是我猜测的原因。*/&lt;/span>
&lt;span class="kr">await&lt;/span> &lt;span class="nx">page&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setViewport&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">width&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">1280&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">height&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">720&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="kr">await&lt;/span> &lt;span class="nx">page&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kr">goto&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;https://www.google.com.hk/search?q=image&amp;amp;tbm=isch&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// 滚（doge
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="cm">/* 这里 scrollBy 和 waitForTimeout 的参数大小都是经过 N 多次调试确定的，
&lt;/span>&lt;span class="cm"> scrollBy 太大、waitForTimeout 太小会因为滑动过快而导致出现遗漏情况，反之则会导致耗时过长。
&lt;/span>&lt;span class="cm"> 这里的参数和运行环境的网速、配置等都有关系，所以在其他 PC 上并不能保证能够完美运行。*/&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">await&lt;/span> &lt;span class="nx">page&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">evaluate&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nb">window&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">scrollBy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">200&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="kr">await&lt;/span> &lt;span class="nx">page&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">waitForTimeout&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kr">await&lt;/span> &lt;span class="nx">isReachedBottom&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">page&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kr">await&lt;/span> &lt;span class="nx">getLoadingStatus&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">page&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">!==&lt;/span> &lt;span class="s2">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`Loading new images...`&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 爪巴.jpg
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">images&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">page&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">evaluate&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">list&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[...&lt;/span>&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">querySelector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;.islrc&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">children&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">list&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">div&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">div&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">firstChild&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">firstChild&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">firstChild&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">src&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`All: &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">images&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">\nEmpty: &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">images&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">filter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">src&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">src&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// 拿来吧你.jpg
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">fs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">writeFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;images.json&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">JSON&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">stringify&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">images&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="c1">// 今天的狗狗就看到这儿了.jpg
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">browser&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">close&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">})();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>说几个要注意的点，首先是我使用了 &lt;code>import&lt;/code> 语句，所以需要在 &lt;code>package.json&lt;/code> 中加一行 &lt;code>&amp;quot;type&amp;quot;: &amp;quot;module&amp;quot;&lt;/code>。其他需要注意的点都写在代码注释里面了，这里就不赘述了。&lt;/p>
&lt;p>程序运行完成之后会在项目根目录创建 &lt;code>images.json&lt;/code> 文件，里面保存图片的 URL 地址。其中有些是图片链接，有些是直接以 base64 的形式储存起来，还有的是 &lt;code>null&lt;/code>。至于为什么会出现 &lt;code>null&lt;/code> 我也懒得去深究了，反正总数还是很少的。&lt;/p>
&lt;p>对了，Puppeteer 的文档有这样一段话：&lt;/p>
&lt;blockquote>
&lt;p>Puppeteer has event-driven architecture, which removes a lot of potential flakiness. There’s no need for evil “sleep(1000)” calls in puppeteer scripts.&lt;/p>
&lt;/blockquote>
&lt;p>感觉我代码里面也没少写 &lt;code>sleep()&lt;/code> 呀😅，也许只是因为我太菜了吧。&lt;/p>
&lt;h2 id="下载">下载&lt;/h2>
&lt;p>获取到 &lt;code>images.json&lt;/code> 后就好说了，遍历链接下载即可：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">promises&lt;/span> &lt;span class="nx">as&lt;/span> &lt;span class="nx">fs&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;fs&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">import&lt;/span> &lt;span class="nx">download&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;download&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">async&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">downloadFromBase64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">path&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">url&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">url&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/^data:image\/\w+;base64,/&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kr">await&lt;/span> &lt;span class="nx">fs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">writeFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">path&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;base64&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kr">async&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">downloadFromUrl&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">path&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">url&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">await&lt;/span> &lt;span class="nx">fs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">writeFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">path&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">download&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">url&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="kr">async&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">links&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">JSON&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kr">await&lt;/span> &lt;span class="nx">fs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">readFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;images.json&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">encoding&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;utf-8&amp;#34;&lt;/span>&lt;span class="p">}));&lt;/span>
&lt;span class="nx">links&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">forEach&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kr">async&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">link&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">index&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="sr">/^http/&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">link&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">await&lt;/span> &lt;span class="nx">downloadFromUrl&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`images/&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">index&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">.jpeg`&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">link&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`Downloaded images/&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">index&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">.jpeg...`&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="sr">/^data/&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">link&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">await&lt;/span> &lt;span class="nx">downloadFromBase64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`images/&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">index&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">.jpeg`&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">link&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`Downloaded images/&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">index&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">.jpeg...`&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="p">})()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Google Images 的预览图好像都是 &lt;code>jpeg&lt;/code> 格式的，所以这里就全部默认扩展名为 &lt;code>jpeg&lt;/code> 了。&lt;/p>
&lt;p>下载的图片会保存在项目根目录的 &lt;code>images&lt;/code> 文件夹。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>通过这个项目，主要是学习了一点 Puppeteer 的基础使用（真的是非常基础了），尽管自己写的代码并不怎么优雅。不过日后也不知道也不知道还能不能再用到这个库。另外就是感觉自己最近一个月正经项目没怎么写，反倒是各种脚本都写了一堆了😹&lt;/p></description></item><item><title>Some Impressions (2021-08)</title><link>https://lomirus.github.io/p/2021-08/</link><pubDate>Thu, 05 Aug 2021 18:25:17 +0800</pubDate><guid>https://lomirus.github.io/p/2021-08/</guid><description>&lt;h2 id="一">一&lt;/h2>
&lt;p>自上次期中总结过去也差不多两个月了，期末考试也已经过去了一个月，按说我早该动手这篇文章了，但实际上却迟迟没有动笔。这并不是说我没有时间如何如何，只是我变的愈发懒散了，于是乎便少了份写博客的动力。&lt;/p>
&lt;p>回忆起我之前每次写博客，无非是想去说什么什么，却无处施展，于是便到自己的博客上胡绉。既然如此，那每次博文的开头便少不了牢骚抱怨。每当自己去浏览自己的旧文，便发觉自己只是一个丧丧的駄目人間，不免心生愧意：将自己如此劣质的文字公诸网路，实属制造垃圾资源。又“于是乎”地，废弃了自己的博客。而这正是我上一个博客的结局。&lt;/p>
&lt;p>但是，有时候确实有些东西不吐不快。长久地将烦闷郁结在心中，绝然不能称之为一个好习惯。如此向来，将自己的博客作为自己倾吐不快的垃圾场，也算是物尽其用了。&lt;/p>
&lt;p>而今天之所以动笔，也自然是因为自己心中有所郁结，不得通其道，故述往事，思来者。&lt;/p>
&lt;h2 id="二">二&lt;/h2>
&lt;p>从暑假开始计算，我们先是度过了一个毫无意义的军训。哦不对，话其实也不能这么说，因为其一，军训的存在令我厌恶，这也可以算是它的意义；其二，总有一些人居高临下，颐指气使的斥责鄙夷这那些吐槽军训的学生，这样看来，它们想必很热爱军训吧！毕竟军训也是福报不是？&lt;/p>
&lt;p>军训结束，我们搬迁了宿舍，搬迁宿舍本身没啥，反正我也我待了一年的舍友也没什么感情。另外虽说是“自由组队”，却还是组合到了有至少三个陌生同学的宿舍。&lt;/p>
&lt;p>然后是大约一周多的自由时间，就用来一边开发项目，一边继续学习 Vue。&lt;/p>
&lt;p>最后是为期一个月的暑期培训，截至写到本文的此段时，已过五天。这五天，则一直是在忙于开发《学长学姐帮帮忙》了。&lt;/p>
&lt;p>其间我的一位朋友问过我一个问题，他问，你如何判断一个开发者的能力高低？就拿前端来说，你的能力与开发多年的前端大佬有哪些区别？&lt;/p>
&lt;p>这个问题确实有点把我问住了。我便凭感觉回答道，可能是对一些框架的掌握和原生API的熟练程度吧。&lt;/p>
&lt;p>但是他则认为，只会用框架调接口未免太“脚本小子”了。我无法反驳，尽管实际上，大多数开发岗也无非都是做着搬砖的活。&lt;/p>
&lt;p>这是他的第一次问我这个问题，后面也有第二次提问。&lt;/p>
&lt;p>不过在他上次提问过后，我回去后其实也并没有进行过多的深入思考。但我还是尝试给出了与上次不同的答案。&lt;/p>
&lt;p>这次我提到了一个人的知识面的广度，譬如我个人，虽说只是一名切图仔，但是在其他方面也多有涉猎，倘以我们网校的部门举例，我首先是本来就在后端待过半年，在 SRE 也学习过一段时间，开发过一些 Android Apps，甚至还尝试学习像素画（这条还是忽略吧）。我个人以为，在网校范围内，前端本身（特指大前端/全栈）可能是仅次于运维的全栈部门了。&lt;/p>
&lt;p>不过这样的我其实也有一些问题：接触的挺多，深入的却很少。前端本身各种轮子层出不穷，更新迭代很快。真正喜欢前端的人，也常常痴迷于新技术。最近我在网校讲授了一节前端框架相关的课，讲到 TypeScript 时，顺口提了一下 Deno。而学员里有个同学和一勤奋蜂的前端学长聊天时提到了这个，于是勤奋蜂的那位学长便表示想和我聊一下天。那天，我们聊了许多。他也是喜欢新生技术的人。他说，他想要在 WebGL，WASM，Deno 里面的选择一个去深入学习。说来惭愧，虽然我对这些都早有耳闻，但却没有一个能称得上是比较深入了解的。我们网校的学姐也说过我们，喜欢新技术很好，但不要每次都是写了一个 Hello World 之后就扔一边儿了。而彼时，我也正如其所言，丢掉了刚做完一个 Hello World 的 Tarui。&lt;/p>
&lt;h2 id="三">三&lt;/h2>
&lt;p>我感觉自己似乎处在某个瓶颈期，基础知识学得都差不多了，但是每当面对浩如烟海的前端进阶内容，却不知从何学起。也许刚踏入大学时，我还算比较有优势。但是随着时间的推移，我逐渐发现自己的优势正在逐渐消逝，泯然众人。我几乎已经很难说出在某个领域能够完胜其他学员了。&lt;/p>
&lt;p>但是学长却说，我们这个阶段恰好是最容易提升的时期。&lt;/p>
&lt;p>仔细想想，其实好像也对，我们现在的能力，也足以支撑我们去学习新的知识、独立开发项目和参与开源社区之类的了。&lt;/p>
&lt;p>正如狄更斯所言：&lt;/p>
&lt;blockquote>
&lt;p>It was the best of times, it was the worst of times.&lt;/p>
&lt;/blockquote>
&lt;h2 id="四">四&lt;/h2>
&lt;p>上面大部分都还是技术方面的内容，周期总结也可以算是我的 routine 了。但其实，都并非我我写这篇文章的直接原因。&lt;/p>
&lt;p>直接原因也很简单，便是见到了某个人，使我回想起了某些事，以及随之而来的一系列巧合，让我再次怀疑世界的真实性。&lt;/p>
&lt;p>这种感觉，估计得追溯到初中，从我的 depression 开始。&lt;/p>
&lt;p>我似乎每个寒假都不会有什么好事儿，尽管坏事儿也都不一定是在寒假。&lt;/p>
&lt;p>有些事我希望它能够从未发生过，例如上次。但也有些事，例如初中的某次寒假，我对它的记忆其实很模糊，因为我曾竭力试图将其忘记，它使得我第一次对世界与自身的存在的意义产生怀疑；但是现在看来，我也很庆幸我有那段经历，它也重塑了我的人生观。&lt;/p>
&lt;p>但是有些事情实在过与巧合，不过也许只是我的幸存者偏差吧。我不知道这其中是否有什么深意，如果有的话，希望结局是一个 Good Ending.&lt;/p>
&lt;h2 id="五">五&lt;/h2>
&lt;p>前几天我妈微信给我打了个电话，当时我没空，没来得及接。不过实际上，我爸妈大多数给我打的电话也都是些嘘寒问暖的话语，即使有空我也是不太愿意接的；但要是不接的话，我爸妈肯定也会不太开心的，所以一般都会回一下。这次也是，待到几天之后我有了空，我便回了一个电话。我妈在电话里说，之前之所以给我打电话，是因为我姥爷生病住院了，想让我和姥爷说说话、聊聊天之类的；不过现在已经出院了，无大碍。&lt;/p>
&lt;p>结果昨天（八月七日）晚上又给我打了个电话，自然还是少不了问一些像是“今晚饭吃了什么”这种我始终无法理解的毫无意义的话语。后面瞎侃谈到了我姥爷，我妈便吐槽我说之前谈到我姥爷生病时，我也不问问到底他是得了什么病。我便反驳说问了又能如何。&lt;/p>
&lt;p>她说，倒也确实，不过不知道我寒假回来的时候还能不能见着我姥爷。&lt;/p>
&lt;p>自然，从她的话语中，很明显能听出发生了什么样的事。但我依然没有多问。正如前文所说，问了又能如何。无非是被告知人至晚年，患了何病，大寿将至。&lt;/p>
&lt;p>说到这个，突然又想到，去年，我的奶奶也去世了，应该是在那一年的秋天吧。我其实是到了寒假才知道的：当时我正从机场出来，见我父亲等在门口，这是我第一次离开家乡，以异乡人的身外，离家近半年。父亲看到我急忙招手，和一同来的一位大叔帮我递过了行李。上车后，我爸提了一句我奶奶的事，很平静，甚至有一丝唠家常开玩笑的戏谑意。我的回复也只是一声简单的“哦”。我自然事前是不知道的，自然没去做什么心理准备。但是一切似乎如此稀松平常，我不知为何并没有太多的心理波动。我爸问我，你不说点什么吗。我反问，说些什么好呢。&lt;/p>
&lt;p>如果说非要找一些理由，以证明我尽管对祖母的去世无甚反应，却仍不是一个失掉人情味的人的话，或许我可以说，可能正是许久的不见，所造成的疏离与陌生感吧。&lt;/p>
&lt;p>我的奶奶自我在高中时，便一直卧病在床。从一开始的腿脚不便、到后来的下肢瘫痪、甚至是阿尔兹海默症，直至去世，中间其实也不过两三年。我的爷爷奶奶与我和我爸妈三口，平常并不是住在同一座房子里的。但实际上，我们两家的两座房子正门的直线距离，其实也不过几十步，所以我们家一般都是会聚在一起吃饭的。不过我奶奶自打生病，自然就不断地缺席一场又一场的每日小聚。加之我高中学业繁重，一个月回家不过二三日，与她的见面机会，便只有待短暂放假时偶尔家中做了什么佳肴，家中令我去为她送饭时了。一年所见次数不过寥寥几次，所言亦不多，自然，她的去世也并没有使我如何震撼。仿佛她的身影是逐渐褪色模糊的，而非骤然与世长辞。对于一个卧病在床者，这确实算不上什么稀奇事。&lt;/p>
&lt;p>而似乎也是去年，还是前年来着，我的老奶奶去世了。我其实并不知道“老奶奶”这个称呼的指代关系到底是什么。我对这种中国的辈份关系向来弄不清，更何况是带有方言的辈份称呼。至于她是我母亲的姥姥，还是父亲的奶奶，无论是至她的离世，还是至今，我都一直没弄清楚。&lt;/p>
&lt;p>她去世时，家人央我同去参加她的葬礼。虽然我知道，她肯定是挺爱我这个作为曾孙辈的人的，但是反过来，我其实对她并没有什么特别的感情。但毕竟是亲人离世，葬礼一人一生也不过一次，我便随去参加了。自然，他们还邀请了附近十里八乡我毫不认识的陌生面孔。礼节上，行一些跪拜礼、号哭礼（姑且这么叫吧，至少我无法理解他们对这啼笑的转变仪式是为何如此熟练），抬棺，烧纸，喊一些我听不懂的如同咒语般的长丧音的话语，最后入土。&lt;/p>
&lt;p>说实话，我其实对这类生老病死没什么太大的心理波动。人老而死本自然常理，非遇横祸，寿终正寝。却仍要活人披麻戴孝，摆席宴客，我实在接受不来。死了埋掉，或者烧掉。生者各有其事，各去忙自己的生活就好，何必如此。&lt;/p>
&lt;p>人死，无魂灵。却仍要造墓建碑。岂不也是浪费土地？抑或是烧香供物，号而通灵者，看了着实讽刺。&lt;/p>
&lt;p>但是，不如此，却也似乎是少了什么。人终究是感性的动物，无神论者在有实证之前，自然是不相信灵魂的。但人与人的纽带也并非会随着肉体腐烂，感情仍在，物是人非，便只好编造一些谎言，假装他们还在，还在听着我们说话。尽管最终却也还是没有什么回应就是了&amp;hellip;&lt;/p>
&lt;p>何况我本身也不善言辞，感情也都一直藏在心中，自然不喜欢这种暴露感情的仪式。时间久了，连父母都说我是冷血动物了。不过如果我真的是冷血动物，我恐怕甚至不会给予他们回应吧。&lt;/p>
&lt;p>————幸而我不是，我仍旧只是一只哺乳动物罢了。&lt;/p>
&lt;h2 id="六">六&lt;/h2>
&lt;p>今晚上摸鱼时看到了 StackOverflow 的 2021 年的年度调查。感觉很有意思的，于是就去看了一下。&lt;/p>
&lt;p>一开始是国籍，自然，没有那个国家。&lt;/p>
&lt;p>接下来是编程开始的年龄，结果调查显示，有超过 50% 的受访者是在他们 11 - 17 岁时敲下了他们的第一行代码。即使是 5 - 10 岁的，也占到了 14.08%。果然感觉自己实在太弱小了。曾经每当见到各种年少的编程大佬，往往自我安慰他们只是少数，不过现在看来，少数派们也已高达半数了。&lt;/p>
&lt;p>再往下面翻，发现居然还有对性取向和是否为跨性别者的调查结果，顿时想起了那个最大同性交友平台 Github 的哏。实在没想到调查结果居然还会包括这个，于是饶有兴趣地看了一下，发现非 LGBTQ 人群似乎占的还不算少。他们人数的总和甚至比女性程序员的人数还要多。&lt;/p>
&lt;p>再往下看，则出现了残障人士，看到这里我似乎顿感严肃了起来。说来汗颜，其实我做前端页面时，很少考虑去为一些视觉障碍者适配。倘是盲人的话，单是浏览网页的话，已实属不易，何况开发。&lt;/p>
&lt;p>真的是很难想象这类人的生活，假如是我，恐怕肯定接受不了这种痛苦吧。不过也想起了“太可怕了”王子的故事，然而这也是后话了。&lt;/p>
&lt;p>再后面，似乎还有提到程序员的心理问题的，差不多有 10% 的人都有心理焦虑等一系列的问题，也不知我能否算得上他们当中的一员。&lt;/p>
&lt;h2 id="七">七&lt;/h2>
&lt;p>最近我的一位朋友向我推荐了一首出自 &lt;em>To the Moon&lt;/em> 的音乐 &lt;em>Born a Stranger&lt;/em>。当时身边没有耳机，没有来得及去听。今天傍晚时戴上耳机，点开了这首歌。&lt;/p>
&lt;p>播放这首歌时，我正在学校的路上。在歌曲大约播放到一半时，我刚好走到了楼梯高处，看到西面的夕阳余晖躲在校园的高楼后面，虽然歌曲描述的是 &lt;em>To the Moon&lt;/em>，但当时，那副黄昏的景象也着实令我的内心深受震撼。&lt;/p>
&lt;p>不知道为什么，感觉最近的故事也似乎都充满了巧合呢。&lt;/p>
&lt;h2 id="八">八&lt;/h2>
&lt;p>最近心情一直不太好，虽然是一直待在网校里，但是也写不下去代码。&lt;/p>
&lt;p>于是早上我打开了《荒野大镖客：救赎 II》，想打游戏来放松一下。尽管嘴上和朋友说的是“摸鱼的一天又开始了”，但其实，我在游戏的过程中也并非是多么开心。游戏自然是好游戏，但是就这款游戏本身而言，它并不算得上一款适合宣泄的渠道。仿佛是在心情压抑的时候专门去听一些令人忧郁的纯音乐，实属南辕北辙。&lt;/p>
&lt;p>最近前几天心情压抑时可能会去找一些（好吧就一个😭）朋友摸鱼吹水，倘能恰好聊到互相都感兴趣的话题，便仿佛是遇到知己，打开了话匣子，说了许多一直想说却又未曾与人聊过的内容。&lt;/p>
&lt;p>但是每天和人家都聊这么久似乎也不太好，也显得我整日无所事事。所以这几天有空时，便经常会一个人去操场的观众席上，坐在那里，独自一个人，发呆，远眺，当然，还有摸鱼。&lt;/p>
&lt;p>一开始，说是要找个安静的去处来练习大舌音，不过说实话，练了这么久感觉也只是在原地踏步。后来的几天，我便带着电脑过去，自然，代码是不会写的，而是写点东西，比如说这篇文章。虽然说不出来，但即便只是写，也确实会让心情好受许多。&lt;/p>
&lt;p>昨天晚上又下了一场雨，当时我在仍在观众席上，躲在遮雨棚下。身后开启了夜灯，灯光下的跑道，雨滴淅淅沥沥的砸在水坑里。我来时，同我一起在观众席上的加上我共三人；我走时，只剩下了一个。我坐在最高处，看着他们，尽管并不知道他们在干什么。&lt;/p>
&lt;p>这是处暑后的第三日，身着短袖，自不敌入夜后的寒气，只好先行一步离开。&lt;/p>
&lt;p>离开时，我撑起雨伞，将自己送回了宿舍。&lt;/p>
&lt;p>（完）&lt;/p></description></item><item><title>WSL 2 入门使用与踩坑记录</title><link>https://lomirus.github.io/p/wsl2/</link><pubDate>Fri, 28 May 2021 00:00:00 +0800</pubDate><guid>https://lomirus.github.io/p/wsl2/</guid><description>&lt;img src="https://lomirus.github.io/p/wsl2/cover.png" alt="Featured image of post WSL 2 入门使用与踩坑记录" />&lt;h2 id="起因">起因&lt;/h2>
&lt;p>最近我用 rust 写了个 shogi game. 考虑到性能优化及用户体验，控制台采用 raw mode 进行渲染。结果发现兼容性不是很好，在各种 shell/terminal 上表现不尽相同。而在字体渲染上，有一说一，除了 Windows Terminal 其余的都是辣鸡。&lt;/p>
&lt;p>我（之前）平常最常用的 shell 是 Git Bash，但是正如前文所言，界面着实拉跨；而使用 Windows Terminal 打开 Git Bash 时，按退格键时又会出现闪烁现象。最终忍无可忍，于是把这些 bash/shell 全都拉出来批判一番：&lt;/p>
&lt;ul>
&lt;li>CMD: 费拉不堪&lt;/li>
&lt;li>Powershell：费拉不堪&lt;/li>
&lt;li>Gitbash: 费拉不堪&lt;/li>
&lt;/ul>
&lt;p>由于 Windows 上的 shell 人均费拉不堪，所以问了一位后端朋(dà)友(lǎo)有没有什么推荐：&lt;/p>
&lt;p>&lt;img src="https://z3.ax1x.com/2021/05/28/2FXjHS.jpg"
loading="lazy"
alt="2FXjHS.jpg"
>&lt;/p>
&lt;p>结果发现人家对 shell 根本就不像我这么挑剔😂，不过也可能确实是受方向影响。因为毕竟后端首先在 Windows 方面上有成熟的 Goland IDE，确实一般情况下用不到控制台，用到终端的话一般就都是在服务器上了，而服务器则一般都是用的 Linux，所以通常没啥顾虑。而我等苦逼前端菜鸡还是要经常和各种 CLI 打交道的，所以最好还是去找一款优秀的终端软件。&lt;/p>
&lt;p>然后最终选定了 WSL 2 + Windows Terminal + VSCode.&lt;/p>
&lt;h2 id="安装">安装&lt;/h2>
&lt;p>如果 Windows 10 OS Version 大于 20262，可通过 &lt;code>wsl --install&lt;/code> 安装。&lt;/p>
&lt;p>虽然我有加入 Windows Insider 计划，不过系统还是用的 Stable，所以没有采取上述简化方式进行安装，而是采用的以下内容。&lt;/p>
&lt;p>首先，以管理员权限打开 Powershell 并输入以下命令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="n">dism&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">exe&lt;/span> &lt;span class="p">/&lt;/span>&lt;span class="n">online&lt;/span> &lt;span class="p">/&lt;/span>&lt;span class="nb">enable-feature&lt;/span> &lt;span class="p">/&lt;/span>&lt;span class="n">featurename&lt;/span>&lt;span class="err">:&lt;/span>&lt;span class="nb">Microsoft-Windows&lt;/span>&lt;span class="n">-Subsystem-Linux&lt;/span> &lt;span class="p">/&lt;/span>&lt;span class="n">all&lt;/span> &lt;span class="p">/&lt;/span>&lt;span class="n">norestart&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>输入以下命令启用“虚拟机平台”功能，然后重启：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="n">dism&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">exe&lt;/span> &lt;span class="p">/&lt;/span>&lt;span class="n">online&lt;/span> &lt;span class="p">/&lt;/span>&lt;span class="nb">enable-feature&lt;/span> &lt;span class="p">/&lt;/span>&lt;span class="n">featurename&lt;/span>&lt;span class="err">:&lt;/span>&lt;span class="n">VirtualMachinePlatform&lt;/span> &lt;span class="p">/&lt;/span>&lt;span class="n">all&lt;/span> &lt;span class="p">/&lt;/span>&lt;span class="n">norestart&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后下载&lt;a class="link" href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi" target="_blank" rel="noopener"
>适用于 x64 计算机的 WSL2 Linux 内核更新包&lt;/a>并安装，以将 WSL 1 更新至 WSL 2。&lt;/p>
&lt;p>安装好后设置 WSL 2 为默认版本：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="n">wsl&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-set-default-version&lt;/span> &lt;span class="n">2&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>打开&lt;a class="link" href="https://aka.ms/wslstore" target="_blank" rel="noopener"
>Microsoft Store&lt;/a>，随便选择一种发行版并安装。这里我选的是大众喜闻乐见的 Ubuntu。安装完后启动，执行一些配置就 OK 了。&lt;/p>
&lt;p>最后可以查看一下已安装的 WSL 发行版的版本信息：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="n">wsl&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-list&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-verbose&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>顺便说一下，安装新的发行版的操作并不会使你旧的发行版被替换掉。如果你之前安装过 WSL 1 的 Linux 发行版，而又不想将其保留，也可以将其删除掉。比如，如果我想将之前的安装的 WSL 1 Debian 删除掉，可执行以下命令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="n">wsl&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-unregister&lt;/span> &lt;span class="n">debian&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>其余操作可以使用 &lt;code>wsl -h&lt;/code> 或查看&lt;a class="link" href="https://docs.microsoft.com/zh-cn/windows/wsl/install-win10" target="_blank" rel="noopener"
>官方文档&lt;/a>。&lt;/p>
&lt;h2 id="网络代理">网络代理&lt;/h2>
&lt;p>由于 WSL 2 是通过虚拟机的方式实现，所以不能像 WSL 1 时期那样直接使用 &lt;code>127.0.0.1&lt;/code> 修改 WSL 内的网络代理。此时正确的处理方式应该是向 &lt;code>~/.bashrc&lt;/code> 添加如下内容：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="nv">hostip&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>cat /etc/resolv.conf &lt;span class="p">|&lt;/span> grep nameserver &lt;span class="p">|&lt;/span> awk &lt;span class="s1">&amp;#39;{ print $2 }&amp;#39;&lt;/span>&lt;span class="k">)&lt;/span>
&lt;span class="nv">port&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">7890&lt;/span> &lt;span class="c1"># 此处端口可根据个人情况进行更改&lt;/span>
&lt;span class="nv">PROXY_HTTP&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;http://&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">hostip&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">:&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">port&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="nb">export&lt;/span> &lt;span class="nv">http_proxy&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">PROXY_HTTP&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="nb">export&lt;/span> &lt;span class="nv">HTTP_PROXY&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">PROXY_HTTP&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="nb">export&lt;/span> &lt;span class="nv">https_proxy&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">PROXY_HTTP&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="nb">export&lt;/span> &lt;span class="nv">HTTPS_proxy&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">PROXY_HTTP&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>参考文章：&lt;a class="link" href="https://zinglix.xyz/2020/04/18/wsl2-proxy/" target="_blank" rel="noopener"
>WSL2 中访问宿主机 Windows 的代理&lt;/a>&lt;/p>
&lt;h2 id="环境变量">环境变量&lt;/h2>
&lt;p>在 WSL 2 中默认可获取到宿主机中的环境变量，这可能会导致某些错误，比如获取到一些没有意义的环境变量，导致环境混乱。&lt;/p>
&lt;p>若要禁止在 WSL 2 中访问 Windows 环境变量，可以先创建&lt;code>/etc/wsl.conf&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">touch /etc/wsl.conf
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后修改其内容为：&lt;/p>
&lt;pre>&lt;code>[interop]
appendWindowsPath = false
&lt;/code>&lt;/pre>&lt;h2 id="常用软件的安装">常用软件的安装&lt;/h2>
&lt;p>接下来安装几个我常用的软件包，这部分没什么技术含量，仅供以后查阅方面使用。&lt;/p>
&lt;p>首先更新软件源：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">sudo apt update
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后安装：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="c1"># python&lt;/span>
sudo apt install python3
ln -s /usr/bin/python3 /usr/bin/python
&lt;span class="c1">## node/npm&lt;/span>
sudo apt install nodejs
sudo apt install npm
&lt;span class="c1">## yarn&lt;/span>
sudo npm install -g yarn
&lt;span class="c1">## deno&lt;/span>
sudo apt install unzip
curl -fsSL https://deno.land/x/install/install.sh &lt;span class="p">|&lt;/span> sh
&lt;span class="c1">## rust&lt;/span>
curl --proto &lt;span class="s1">&amp;#39;=https&amp;#39;&lt;/span> --tlsv1.2 -sSf https://sh.rustup.rs &lt;span class="p">|&lt;/span> sh
&lt;span class="c1"># 建议选择 `default toolchain` 为 `nightly`&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="其他坑先占位">其他坑（先占位）&lt;/h2>
&lt;p>由于 WSL 2 用到了虚拟化平台功能，可能会导致其他虚拟机（如 VirtualBox）无法运行。目前我还没解决这个问题，啥时候用空解决了再更。&lt;/p>
&lt;p>更新：解决方案：卸载 VirtualBox, 安装VMWare.&lt;/p></description></item><item><title>Vue &amp; Vite 项目搭建入门</title><link>https://lomirus.github.io/p/vue-vite-start/</link><pubDate>Sat, 22 May 2021 18:25:17 +0800</pubDate><guid>https://lomirus.github.io/p/vue-vite-start/</guid><description>&lt;img src="https://lomirus.github.io/p/vue-vite-start/cover.png" alt="Featured image of post Vue &amp; Vite 项目搭建入门" />&lt;h1 id="学习-vue-与-vite-项目搭建的踩坑记录">学习 Vue 与 Vite 项目搭建的踩坑记录&lt;/h1>
&lt;h2 id="vue-20--webpack">Vue 2.0 + Webpack&lt;/h2>
&lt;h3 id="installation">Installation&lt;/h3>
&lt;p>虽然 Vue 的最新版已经是 3.0，而且 Vite 也似乎是大势所趋，不过我还是选择了先从 Vue 2.0 + Webpack 这种比较传统的方式开始学习。主要是因为这几个方面：&lt;/p>
&lt;ul>
&lt;li>现在仍有许多项目没有从 Vue 2.0 迁移到 3.0，使用 Vue 2.0 进行开发在实际生产中还是比较常见的，所以以后还可能会用到 2.0；&lt;/li>
&lt;li>Vue 2.0 的资料相对比较多，踩坑时更容易查到资料；&lt;/li>
&lt;li>学习 2.0 之后再学习 3.0，会对 3.0 的改进有更深的体会，比如能够切身体会到 Vue 3.0 为什么这么那么设计、这样设计有什么好处、它解决了哪些痛处与弊端等；&lt;/li>
&lt;li>入门曲线相对平缓。&lt;/li>
&lt;/ul>
&lt;p>好了，前言就先讲到这里，接下来进入正题。&lt;/p>
&lt;p>首先创建项目：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">$ mkdir vue-learning
$ &lt;span class="nb">cd&lt;/span> vue-learning
$ npm init -y
&lt;/code>&lt;/pre>&lt;/div>&lt;p>接着安装相关库：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">$ npm install -D webpack webpack-cli webpack-dev-server html-webpack-plugin
$ npm install vue
&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建相关文件，创建后的目录结构：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">$ tree -I &lt;span class="s2">&amp;#34;node_modules&amp;#34;&lt;/span>
.
&lt;span class="p">|&lt;/span>-- dist
&lt;span class="p">|&lt;/span> &lt;span class="sb">`&lt;/span>-- main.js
&lt;span class="p">|&lt;/span>-- package-lock.json
&lt;span class="p">|&lt;/span>-- package.json
&lt;span class="p">|&lt;/span>-- public
&lt;span class="p">|&lt;/span> &lt;span class="sb">`&lt;/span>-- index.html
&lt;span class="p">|&lt;/span>-- src
&lt;span class="p">|&lt;/span> &lt;span class="sb">`&lt;/span>-- index.js
&lt;span class="sb">`&lt;/span>-- webpack.config.js
&lt;span class="m">3&lt;/span> directories, &lt;span class="m">6&lt;/span> files
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>webpack.config.js&lt;/code> :&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kr">const&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">resolve&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;path&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">HtmlWebpackPlugin&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;html-webpack-plugin&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">module&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">exports&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">mode&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;production&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">entry&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;./src/index.js&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">output&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">path&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">resolve&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;dist&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">filename&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;[name].js&amp;#34;&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nx">plugins&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">HtmlWebpackPlugin&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">template&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;./public/index.html&amp;#34;&lt;/span>
&lt;span class="p">})&lt;/span> &lt;span class="p">],&lt;/span>
&lt;span class="nx">devtool&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;source-map&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后基础部分就做完了，接下来开始加入 Vue：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="c1">// src/index.js
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="kr">import&lt;/span> &lt;span class="nx">Vue&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;vue&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">app&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Vue&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>打包之后可以看到 &lt;code>dist/main.js&lt;/code> 中已经引入了 Vue 的 runtime。&lt;/p>
&lt;h3 id="runtime--compiler-vs-runtime-only">Runtime + Compiler vs. Runtime-only&lt;/h3>
&lt;p>按照官网文档中的第一个例子，修改 &lt;code>index.html&lt;/code> 的 &lt;code>body&lt;/code> 为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;app&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
{{ message }}
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>并修改 &lt;code>index.js&lt;/code> 为以下内容：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kr">import&lt;/span> &lt;span class="nx">Vue&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;vue&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">app&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Vue&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">el&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;#app&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">data&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">message&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Hello World!&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后 &lt;code>npx webpack serve&lt;/code> ，打开 &lt;code>http://127.0.0.1:8080&lt;/code>，发现控制台报错：&lt;/p>
&lt;blockquote>
&lt;p>You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.&lt;/p>
&lt;/blockquote>
&lt;p>原因是我们导入 Vue 时使用的语句是 &lt;code>import Vue from 'vue';&lt;/code>。这行语句默认会导入 &lt;code>Runtime-only&lt;/code> 版本的 Vue，而这个版本的 Vue 是不含编译器的，因此无法编译像 &lt;code>{{ message }}&lt;/code> 这种模板语句。&lt;/p>
&lt;p>为了解决这个问题，我们可以修改一下 &lt;code>webpack.config.js&lt;/code> 的内容，向其 &lt;code>module.exports&lt;/code> assign 以下内容&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="p">{&lt;/span>
&lt;span class="nx">resolve&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">alias&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="s1">&amp;#39;vue$&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;vue/dist/vue.esm.js&amp;#39;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后编译，运行，成功！&lt;/p>
&lt;p>相关参考资料：&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://vuejs.org/v2/guide/installation.html#Runtime-Compiler-vs-Runtime-only" target="_blank" rel="noopener"
>https://vuejs.org/v2/guide/installation.html#Runtime-Compiler-vs-Runtime-only&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="single-file-components">Single File Components&lt;/h3>
&lt;p>接下来介绍一下单文件组件，这也是我比较推崇的方式。之前我写 React 时，就是采取了 CSS in JS 的方案，而不是 SCSS 或者是 Less；因为如果将&lt;code>.less&lt;/code> 和 &lt;code>.jsx&lt;/code> 分割开来的话，后期维护就会变得非常难受了。而单文件组件不仅目录结构看起来更舒服，在可维护性上也更加友好。不过 Vue 的单文件组件相比非单文件组件来说，并不仅仅是以上这些方面，比如说原生的 JavaScript 并不支持 jsx 语法，用模板字符串就显得丑了吧唧的等等。具体可参考&lt;a class="link" href="https://vuejs.org/v2/guide/single-file-components.html" target="_blank" rel="noopener"
>官方文档&lt;/a>，这里就不赘述了。&lt;/p>
&lt;p>然后正式开始，首先安装 &lt;code>vue-loader&lt;/code> 和 &lt;code>vue-template-compiler&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">$ npm install -D vue-loader vue-template-compiler
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改 &lt;code>webpack.config.js&lt;/code>，将以下内容添加到 &lt;code>module.exports&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kr">const&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">VueLoaderPlugin&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;vue-loader&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">module&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">rules&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[{&lt;/span>
&lt;span class="nx">test&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="sr">/\.vue$/&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">use&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;vue-loader&amp;#34;&lt;/span>
&lt;span class="p">}],&lt;/span>
&lt;span class="nx">plugins&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="nx">VueLoaderPlugin&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>参考文档：https://vue-loader.vuejs.org/guide/#manual-setup&lt;/p>
&lt;p>然后修改&lt;code>index.html&lt;/code>，&lt;code>div#app&lt;/code>里面的内容全删掉就可以了，只留下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;app&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建文件&lt;code>App.vue&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-vue" data-lang="vue">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">{{&lt;/span> &lt;span class="nx">message&lt;/span> &lt;span class="p">}}&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="kr">export&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">data&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">message&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Hello World!&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改 &lt;code>index.js&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kr">import&lt;/span> &lt;span class="nx">Vue&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;vue&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">import&lt;/span> &lt;span class="nx">App&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;./App.vue&amp;#39;&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="nx">Vue&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">el&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;#app&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">template&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;App /&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">components&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">App&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>此时目录结构：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">$ tree -I &lt;span class="s2">&amp;#34;node_modules|dist&amp;#34;&lt;/span>
.
&lt;span class="p">|&lt;/span>-- package-lock.json
&lt;span class="p">|&lt;/span>-- package.json
&lt;span class="p">|&lt;/span>-- public
&lt;span class="p">|&lt;/span> &lt;span class="sb">`&lt;/span>-- index.html
&lt;span class="p">|&lt;/span>-- src
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span>-- App.vue
&lt;span class="p">|&lt;/span> &lt;span class="sb">`&lt;/span>-- index.js
&lt;span class="sb">`&lt;/span>-- webpack.config.js
&lt;span class="m">2&lt;/span> directories, &lt;span class="m">6&lt;/span> files
&lt;/code>&lt;/pre>&lt;/div>&lt;p>完成。&lt;/p>
&lt;h2 id="vue-30--vite">Vue 3.0 + Vite&lt;/h2>
&lt;h3 id="creation">Creation&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">$ npm init @vitejs/app
√ Project name: · vite-project
√ Select a framework: · vue
√ Select a variant: · JavaScript
$ &lt;span class="nb">cd&lt;/span> vite-project
$ npm install
&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装就这么完成了，没啥好说的。&lt;/p>
&lt;h3 id="simplification">Simplification&lt;/h3>
&lt;p>如果正在阅读这篇文章的你是一名初学者的话，可能对这复杂（或许？）的目录结构毫无头绪，而且事实上它也确实用到了许多高级/新特性。所以我们可以试着将它简化并还原一下。&lt;/p>
&lt;p>简化后：&lt;/p>
&lt;p>&lt;code>src/components/HelloWorld.vue&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-vue" data-lang="vue">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h1&lt;/span>&lt;span class="p">&amp;gt;{{&lt;/span> &lt;span class="nx">msg&lt;/span> &lt;span class="p">}}&amp;lt;/&lt;/span>&lt;span class="nt">h1&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>src/App.vue&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-vue" data-lang="vue">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">HelloWorld&lt;/span> &lt;span class="na">msg&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;Hello Vue 3 + Vite&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="kr">import&lt;/span> &lt;span class="nx">HelloWorld&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;./components/HelloWorld.vue&amp;#39;&lt;/span>
&lt;span class="kr">export&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">components&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">HelloWorld&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="next">Next&lt;/h2>
&lt;p>既然基础的项目搭建学会了，接下来就可以直接⏩到实战了（雾）。而且我最近正好要参加一个学校组织的叫什么什么数据库的比赛，或许可以考虑用比赛项目的前端部分来给 Vue 练手一下（）。那么接下来，就继续学习 Vue &amp;amp; Vite 吧！&lt;/p></description></item><item><title>大一第二学期中期总结与反思 (2021-05)</title><link>https://lomirus.github.io/p/2021-05/</link><pubDate>Sun, 09 May 2021 01:00:00 +0800</pubDate><guid>https://lomirus.github.io/p/2021-05/</guid><description>&lt;h2 id="我这半学期学了什么">我这半学期学了什么&lt;/h2>
&lt;p>寒假的时候我一直在写考核作业。但有一说一，虽说我肝得挺厉害（至少自我感觉是），但实际上我感觉我并没学到什么太多的新东西。当然，倒不是说一点也没有，只是感觉太少了。&lt;/p>
&lt;p>寒假的时候一直想学下 Webpack 和 React 的相关知识，但苦于没时间，而到了开学之后反倒是有时间了（离谱）。于是乎我便先学习了这两个比较基础且常用的。我之所以将首选框架选为 React 而不是 Vue，主要是因为我跨平台开发框架很感兴趣，而 Flutter 对我这个前端还算比较比较遥远，因此考虑到 React Native 就先学了 React。&lt;/p>
&lt;h3 id="counter-trainer-deprecatedhttpsgithubcomlomiruscounter-trainer-deprecated">&lt;a class="link" href="https://github.com/lomirus/counter-trainer-deprecated" target="_blank" rel="noopener"
>counter-trainer-deprecated&lt;/a>&lt;/h3>
&lt;p>我第一有关 React 的项目是 counter-trainer （现在更名为 &lt;a class="link" href="https://github.com/lomirus/counter-trainer-deprecated" target="_blank" rel="noopener"
>counter-trainer-deprecated&lt;/a>），里面还顺便用到了 Less。这个项目算我前端工程化的开荒，更多的还是为了练习。开发初期的规划是想通过自适应以兼容各种分辨率，结果发现远比自己想象的复杂，加之当时对于组件间通信不甚熟悉，以及审美堪忧，最终导致代码堆成屎山，因此终止了开发。&lt;/p>
&lt;h3 id="counter-trainerhttpsgithubcomlomiruscounter-trainer">&lt;a class="link" href="https://github.com/lomirus/counter-trainer" target="_blank" rel="noopener"
>counter-trainer&lt;/a>&lt;/h3>
&lt;p>紧接着不久我就开始了第二个项目，同时也是前者的续作，也叫做 &lt;a class="link" href="https://github.com/lomirus/counter-trainer" target="_blank" rel="noopener"
>counter-trainer&lt;/a>。吸取了上一次的教训，这次只针对了移动平台进行适配，因此我选择了使用 React Native 进行开发。我从这这个项目中学习到的主要有这么几方面：&lt;/p>
&lt;ol>
&lt;li>学习了 Redux，了解了组件间通信、生命周期、Context、Fragment 等相对进阶的内容；&lt;/li>
&lt;li>开发的复杂程度不断增加，迫使我去寻找已有的库而不是重复造轮子，而在这个过程中我不得不去直接阅读一些框架的官方英文文档、去 Issues 里寻找 bugs 的解决方案。在此之前我顶多会使用像 Redux，Babel 这种近乎 Official 性质的库，对于那些小众的库还是有些抵触的，不过最后，相比于自己从头开发，直接 import 还是让我直呼真香。比如随便举几个这次用到的一些库：&lt;code>react-navigation&lt;/code>, &lt;code> react-native-tts&lt;/code> 等等，像其中的 tts 这种库，就绝不是现在的我能够徒手撸出来的，所以我也学会了不要去造一些没有必要的轮子。&lt;/li>
&lt;li>（复习了 Android 开发？（继上一次的 Kotlin 计算器））&lt;/li>
&lt;li>（直接读英文文档进一步提升了英文水准？）&lt;/li>
&lt;li>（了解了语义化版本？）&lt;/li>
&lt;/ol>
&lt;h3 id="sekiro-symbols-generatorhttpsgithubcomlomirussekiro-symbols-generator">&lt;a class="link" href="https://github.com/lomirus/sekiro-symbols-generator" target="_blank" rel="noopener"
>sekiro-symbols-generator&lt;/a>&lt;/h3>
&lt;p>这个项目应该是我最近的项目中完成度最高，也是唯一没有弃坑且最终按照原计划圆满完成了的。最终代码量约1000行。下面说一下我从这个项目中学到的东西（或者是这个项目的一些 features）：&lt;/p>
&lt;ol>
&lt;li>React Hooks：该项目全部使用函数式组件；同时在组件间通信方案的选择上废弃了 Redux ，改为了使用 React 原生 hooks；&lt;/li>
&lt;li>Typescript：该项目全部使用 Typescript；&lt;/li>
&lt;li>ESlint：该项目使用了 ESlint（这个好像不算什么亮点）；&lt;/li>
&lt;li>CSS in JS：该项目没有采取传统的 &lt;code>Less&lt;/code> or &lt;code>SASS&lt;/code>/&lt;code>SCSS&lt;/code>，而是选择了 css in js 的方案。并且在经过了多方权衡之后，最终决定了采用 &lt;code>emotion&lt;/code> 作为样式框架&lt;/li>
&lt;li>Webpack：打包时的一些优化，如 &lt;code>source-map&lt;/code>, &lt;code>code splitting&lt;/code>；&lt;/li>
&lt;li>Github Actions：自己写了个脚本自动部署并发布网站；&lt;/li>
&lt;li>Other: 如 &lt;code>React automatic runtime&lt;/code>, &lt;code>Forwarding Refs&lt;/code>,&lt;code>.gitattributes&lt;/code> 文件的使用等。&lt;/li>
&lt;/ol>
&lt;h3 id="deno">Deno&lt;/h3>
&lt;p>学了点 Deno，不过生态还是太匮乏，暂时还没什么卵用。&lt;/p>
&lt;p>有个叫 &lt;code>Aleph&lt;/code> 的框架可以用 &lt;code>React&lt;/code>， 不过是 &lt;code>SSR&lt;/code>, 不太符合我口味。&lt;/p>
&lt;h3 id="rust">Rust&lt;/h3>
&lt;p>这学期还学习了一门新语言，那就是 Rust. 打老早之前就见到很多人都在吹它，而且后来又看到 Rust 大佬 @ahabhgk 的身体力行，以及 Rust 在 WebAssembly 上无可比拟的优势以及其他各种优秀特性等等。所以就开始学习这门语言了。&lt;/p>
&lt;p>目前基础语法方面已经学完了，最近在学一些智能指针、并发等相关操作。而且开发的过程中甚至遇到了一些语言本身的 &amp;ldquo;feature&amp;rdquo;，以至于我还专门跑去官方仓库的 Issues 寻找解决方案，官方则表示只能暂时使用 unstable 的 nightly 特性作为临时解决方案，说明 Rust 还是挺早期的，还有很多坑都没填&amp;hellip;&lt;/p>
&lt;h3 id="vue">Vue&lt;/h3>
&lt;p>今天才刚刚开始学 Vue/Vite，所以暂时还没什么好说的。&lt;/p>
&lt;p>&lt;del>（不过我还是要吐槽一下 Vue 文档辣鸡（小声））&lt;/del>&lt;/p>
&lt;h2 id="接下来要做什么">接下来要做什么&lt;/h2>
&lt;p>&lt;del>😅说了这么多，还是得先把课内各种 damn courses 给解决掉，虽然有些水课设立就是为了恶心人的，但是我们也无可奈何。&lt;/del>&lt;/p>
&lt;p>立几个 flag，不过不要求要在本学期内完成，也不一定完全按照它执行，只是当作一个 Todo List 而已：&lt;/p>
&lt;h3 id="web">Web&lt;/h3>
&lt;ul>
&lt;li>Vue &amp;amp; Vite；&lt;/li>
&lt;li>React/Vue Router；&lt;/li>
&lt;li>WebAssembly;&lt;/li>
&lt;li>Next.js (SSR);&lt;/li>
&lt;li>WebRTC&lt;/li>
&lt;/ul>
&lt;h3 id="hybrid">Hybrid&lt;/h3>
&lt;ul>
&lt;li>Dart &amp;amp; Flutter&lt;/li>
&lt;/ul>
&lt;h3 id="game">Game&lt;/h3>
&lt;ul>
&lt;li>Bevy/Godot;&lt;/li>
&lt;/ul>
&lt;h3 id="other">Other&lt;/h3>
&lt;ul>
&lt;li>Decentralization, Blockchain&lt;/li>
&lt;/ul></description></item><item><title>Writing Blogs in Github Issues</title><link>https://lomirus.github.io/p/start-writing-blogs/</link><pubDate>Sun, 09 May 2021 00:00:00 +0800</pubDate><guid>https://lomirus.github.io/p/start-writing-blogs/</guid><description>&lt;p>我写前端至今也已有五六年了，不过这数字其实很水，前五年的大部分时间也都并没有将主要精力放在开发上，不过自己好歹也多多少少做过地做过一些项目。我第一个大型（或许？）前端项目就是一个简单的网站，有留言，还有井字棋什么的几个小游戏。再后来学过后端后，我又用 Golang 做后端，原生 JS 做前端，徒手撸了一个博客。&lt;/p>
&lt;p>我向来是没有什么写博客的习惯的，因为感觉其枯燥且无用。上次写博客主要是因为隔壁运维作业要求搭建一个博客，而我又懒得学习什么 Hexo, Wordpress 这类东西，所以就自己先简单写了一个原型，后续又不断完善，时而不时水几篇文章，然后就有了这个博客。&lt;/p>
&lt;p>不过现在这个博客已经被废弃了，一是因为博客源码太烂，二是因为文章太水，所以不愿再维护了。&lt;/p>
&lt;p>但是我时而又萌生了继续写点博客的想法，然而正如杜拉斯在《情人》的开头所言，“我已经老了”（无端？），所以我也已经不太想折腾了。网上搜资料时发现有的人直接拿 Github Issues 来写博客，想了想也确实挺符合我的需求：支持 Markdown， 可编辑，可评论，而且现在据说也可以限制他人在自己仓库里乱发 issue 了，所以我就决定选择 Github Issues 作为我的新的博客平台了。不过日后倘若又要迁居，那也是后话了。&lt;/p>
&lt;p>为防止自己继续写一些水文来占版面，所以这次可能更新频率会降低。不过有时可能受外力影响要求比如每周上交至少一篇博文，emmm，以后再具体看情况办吧。&lt;/p>
&lt;p>先写到这。&lt;/p></description></item><item><title>TypeScript &amp; Webpack &amp; Babel &amp; Eslint &amp; React: Not Such a Beautiful Marriage</title><link>https://lomirus.github.io/p/not-such-a-beautiful-marriage/</link><pubDate>Wed, 14 Apr 2021 00:00:00 +0800</pubDate><guid>https://lomirus.github.io/p/not-such-a-beautiful-marriage/</guid><description>&lt;img src="https://lomirus.github.io/p/not-such-a-beautiful-marriage/cover.png" alt="Featured image of post TypeScript &amp; Webpack &amp; Babel &amp; Eslint &amp; React: Not Such a Beautiful Marriage" />&lt;p>（顺带一提，标题&lt;del>抄袭&lt;/del>引用改编自著名博文 &lt;a class="link" href="https://medium.com/dailyjs/typescript-babel-ce24f724398" target="_blank" rel="noopener"
>TypeScript with Babel: A Beautiful Marriage&lt;/a>）&lt;/p>
&lt;h2 id="origin">Origin&lt;/h2>
&lt;p>看了下 cqupt-help-mp 的源码，发现里面用了许多库。感觉自己对这些工具还不太熟练，所以想先趁机练习一下。&lt;/p>
&lt;p>对于题目中的五个工具，除去 ESlint之外，其实其他的都多多少少用过一段时间。特别是 Webpack Babel React 这三个，用的时间也算是比较久了。TypeScript 倒是用过，但是感觉 JS 加上类型限制后写起来就不那么自由了，所以尝试用它写了一个模块之后就将它卸载了。但是这些这个工具终究还是太常用，早晚逃不了还是得学，所以就试着用它们做个简单的小项目练练手。毕竟当初我学 Webpack 时也是学得很憋屈，一直不知道这玩意儿打个包为啥还非得用 js 文件做入口，直到后来学了 React 才豁然开朗，所以我至今认为如果是要做跑在浏览器的网页而且不用什么框架的话 Webpack 还真没什么卵用。当然，有了之后自然用处就大了。&lt;/p>
&lt;p>不过说了这么多好像有点跑题，先回到正题：让我们来讨论一下究竟怎么把这五个架子给支楞到一块儿去。&lt;/p>
&lt;h2 id="introductions-of-the-packages">Introductions of the packages&lt;/h2>
&lt;p>这种东西还用得着在这介绍？官网文档，维基百科，请~&lt;/p>
&lt;h2 id="tsc-or-babel-its-a-question">TSC or Babel, it&amp;rsquo;s a question.&lt;/h2>
&lt;p>老实说，单是在两个之间进行选择就够让我想半天了。但是实际上，摆在我面前的包括但不限于：&lt;code>ts-loader&lt;/code>,&lt;code>awesome-typescript-loader&lt;/code>, &lt;code>babel-loader&lt;/code>等一堆loaders/packages。而且由于我开始参考了过时的中文文档，所以先下载了&lt;code>awesome-typescript-loader&lt;/code>，后来才意识到被坑（😅）。而在剩余的两者之间，参考&lt;a class="link" href="https://medium.com/dailyjs/typescript-babel-ce24f724398" target="_blank" rel="noopener"
>TypeScript with Babel: A Beautiful Marriage&lt;/a>后，决定选择了后者。&lt;/p>
&lt;p>安装好之后，我又顺着我的思路捋了一遍，发现整个过程中编译是&lt;code>babel&lt;/code>做的，根本没用到&lt;code>typescript&lt;/code>什么事儿呀。我于是就想，把它卸载之后会怎么样呢？接着神奇的现象发生了，我卸载了&lt;code>typescipt&lt;/code>，删除了它的配置文件&lt;code>tsconfig.json&lt;/code>，结果发现我的用&lt;code>typescript&lt;/code>写的项目居然还能正常编译并运行（谢谢有被震惊到）。我就想既然如此那我还用ts干啥呀，赶紧卸了得了，可别再让我见着你了（😅）。&lt;/p>
&lt;h2 id="anti-human-eslint">Anti-human ESLint&lt;/h2>
&lt;p>听说 ESLint 可以用在团队协作中来保证代码风格的一致性？好，名单赶紧安排上，加急。&lt;/p>
&lt;p>安装过程中被问了几个问题，回答之后他给我推荐了几个插件。行，听您的。选择 YES，进行安装。看起来一切顺利，然后&amp;hellip;果不其然，报错了。报啥呢：&lt;/p>
&lt;pre>&lt;code>Oops! Something went wrong! :(
ESLint: 7.24.0
Error: An error occurred while generating your JavaScript config file. A config file was still generated, but the config file
itself may not follow your linting rules.
Error: Failed to load plugin '@typescript-eslint' declared in 'BaseConfig': Cannot find module 'typescript'
&lt;/code>&lt;/pre>&lt;p>我心想，这不废话嘛，我又没安装 typescipt 您能到哪儿找模块去？不过话又说回来，刚才，它倒是的确问过我这么一句：&lt;/p>
&lt;pre>&lt;code>Does your project use TypeScript? · No / Yes
&lt;/code>&lt;/pre>&lt;p>唔，我要用 TypeScript 倒是没错，不过这和我安没安装 TypeScript 的 package 也没什么必然的联系吧。&lt;/p>
&lt;p>然后经过摸滚带爬的上下求索，终于意识到 typescript 貌似还是有点儿用的，再加上后面用到的 &lt;code>@types/react&lt;/code>，&lt;code>@types/react-dom&lt;/code>，感觉是在类型推断和自动补全方面有些作用（应该）&lt;/p>
&lt;h2 id="module-or-commonjs-its-a-question">Module or CommonJS, it&amp;rsquo;s a question.&lt;/h2>
&lt;p>刚才 ESLint 问我用的是 &lt;code>Module&lt;/code> 还是 &lt;code>CommonJS&lt;/code>，秉着“啥新用啥，用嘛嘛新”的原则，我当然选择的ES6的&lt;code>Module&lt;/code>。&lt;/p>
&lt;p>然后由于我的&lt;code>webpack.config.js&lt;/code>用到了&lt;code>module.exports = {}&lt;/code>，所以 ESLint报错了。&lt;/p>
&lt;pre>&lt;code>'require' is not defined. eslint(no-undef)
'module' is not defined. eslint(no-undef)
&lt;/code>&lt;/pre>&lt;p>好，那我改。&lt;/p>
&lt;p>我把 &lt;code>module.exports&lt;/code>改成了&lt;code>export default&lt;/code>，把&lt;code>require&lt;/code>改成了&lt;code>import&lt;/code>。结果又报错了：&lt;/p>
&lt;pre>&lt;code>SyntaxError: Cannot use import statement outside a module
&lt;/code>&lt;/pre>&lt;p>好，那我改。
我在&lt;code>package.json&lt;/code>里加了句 &lt;code>&amp;quot;type&amp;quot;: &amp;quot;module&amp;quot;&lt;/code>。结果又报错了：&lt;/p>
&lt;pre>&lt;code>ReferenceError: __dirname is not defined
&lt;/code>&lt;/pre>&lt;p>&lt;code>__dirname&lt;/code> 用不了可不行，那还是再改回来吧。
好，那我改。
于是回到了原点：&lt;/p>
&lt;pre>&lt;code>'require' is not defined. eslint(no-undef)
'module' is not defined. eslint(no-undef)
&lt;/code>&lt;/pre>&lt;p>（闹着玩是吧？😅）&lt;/p>
&lt;p>然后在&lt;code>.eslintrc.js&lt;/code>的&lt;code>&amp;quot;env&amp;quot;&lt;/code>中加了行&lt;code>&amp;quot;node&amp;quot;: true&lt;/code>，行，终于，不报错了。&lt;/p>
&lt;h2 id="eslint-comes-again">ESLint Comes Again&lt;/h2>
&lt;p>&lt;code>App.js&lt;/code>里有这么一段：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-tsx" data-lang="tsx">&lt;span class="kr">const&lt;/span> &lt;span class="nx">Box&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">({&lt;/span> &lt;span class="nx">title&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">children&lt;/span> &lt;span class="p">})&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;{&lt;/span>&lt;span class="nx">title&lt;/span>&lt;span class="p">}&amp;lt;/&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">{&lt;/span>&lt;span class="nx">children&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ESLint报错：&lt;/p>
&lt;pre>&lt;code>Missing return type on function. eslint(@typescript-eslint/explicit-module-boundary-types)
&lt;/code>&lt;/pre>&lt;p>接着修改代码为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-tsx" data-lang="tsx">&lt;span class="c1">// has imported ReactElement...
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">Box&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">({&lt;/span> &lt;span class="nx">title&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">children&lt;/span> &lt;span class="p">})&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">ReactElement&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;{&lt;/span>&lt;span class="nx">title&lt;/span>&lt;span class="p">}&amp;lt;/&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">{&lt;/span>&lt;span class="nx">children&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ESLint报错：&lt;/p>
&lt;pre>&lt;code>Object pattern argument should be typed. eslint(@typescript-eslint/explicit-module-boundary-types)
'title' is missing in props validation eslint(react/prop-types)
Binding element 'children' implicitly has an 'any' type. ts(7031)
&lt;/code>&lt;/pre>&lt;p>接着修改代码为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-tsx" data-lang="tsx">&lt;span class="c1">// has imported ReactElement...
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kr">type&lt;/span> &lt;span class="nx">BoxProps&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">title&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">children&lt;/span>: &lt;span class="kt">ReactElement&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">Box&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">({&lt;/span> &lt;span class="nx">title&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">children&lt;/span> &lt;span class="p">}&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">BoxProps&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">ReactElement&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;{&lt;/span>&lt;span class="nx">title&lt;/span>&lt;span class="p">}&amp;lt;/&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">{&lt;/span>&lt;span class="nx">children&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ESLint在这块儿倒是不报错了，不过当其他地方调用&lt;code>Box&lt;/code>又报错了：&lt;/p>
&lt;pre>&lt;code>This JSX tag's 'children' prop expects a single child of type 'ReactElement&amp;lt;any, string | JSXElementConstructor&amp;lt;any&amp;gt;&amp;gt;', but multiple children were provided.
&lt;/code>&lt;/pre>&lt;p>查了下资料，发现除了&lt;code>ReactElement&lt;/code>之外原来还有&lt;code>ReactNode&lt;/code>和&lt;code>JSX.Element&lt;/code>（参考 &lt;a class="link" href="https://stackoverflow.com/questions/58123398/when-to-use-jsx-element-vs-reactnode-vs-reactelement" target="_blank" rel="noopener"
>When to use JSX.Element vs ReactNode vs ReactElement?&lt;/a>）。&lt;/p>
&lt;p>简单总结下，原因：拉胯TS的历史遗留问题；解决方法：将&lt;code>children&lt;/code>类型改成&lt;code>ReactNode&lt;/code>&lt;/p>
&lt;h2 id="react-jsx">&lt;code>react-jsx&lt;/code>&lt;/h2>
&lt;p>在上面的 StackOverflow 里看到了 &lt;code>create-react-app&lt;/code>，这才想到可以去参考一下它的代码，话不多说，开始安装。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">npm init -y
npm install create-react-app
npx create-react-app ts --template typescript
&lt;/code>&lt;/pre>&lt;/div>&lt;p>进去之后发现他在&lt;code>tsconfig.json&lt;/code>里的&lt;code>&amp;quot;compilerOptions&amp;quot;&lt;/code>写有&lt;code>&amp;quot;jsx&amp;quot;: &amp;quot;react-jsx&amp;quot;&lt;/code>，而我之前一直都是用的&lt;code>&amp;quot;jsx&amp;quot;: &amp;quot;react&amp;quot;&lt;/code>。好奇他们之间的差别，所以去 TypeScript官网文档查了下&lt;a class="link" href="https://www.typescriptlang.org/tsconfig/#jsx" target="_blank" rel="noopener"
>资料&lt;/a>：&lt;/p>
&lt;blockquote>
&lt;p>Controls how JSX constructs are emitted in JavaScript files. This only affects output of JS files that started in .tsx files.&lt;/p>
&lt;ul>
&lt;li>react: Emit .js files with JSX changed to the equivalent React.createElement calls&lt;/li>
&lt;li>react-jsx: Emit .js files with the JSX changed to _jsx calls&lt;/li>
&lt;li>react-jsxdev: Emit .js files with the JSX to _jsx calls&lt;/li>
&lt;li>preserve: Emit .jsx files with the JSX unchanged&lt;/li>
&lt;li>react-native: Emit .js files with the JSX unchanged&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Umm，说实话没看懂，继续往下滑，发现一个&lt;a class="link" href="https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html" target="_blank" rel="noopener"
>链接&lt;/a>，点进去，读了下，发现&lt;code>react-jsx&lt;/code>相对&lt;code>react&lt;/code>有许多优点，例如：&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>With the new transform, you can &lt;strong>use JSX without importing React&lt;/strong>.&lt;/li>
&lt;li>Depending on your setup, its compiled output may &lt;strong>slightly improve the bundle size&lt;/strong>.&lt;/li>
&lt;li>It will enable future improvements that &lt;strong>reduce the number of concepts&lt;/strong> you need to learn React.&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>继续秉承着“啥新用啥”的信条，我便将&lt;code>tsconfig.json&lt;/code>里的&lt;code>&amp;quot;jsx&amp;quot;: &amp;quot;react-jsx&amp;quot;&lt;/code>改成了&lt;code>&amp;quot;jsx&amp;quot;: &amp;quot;react&amp;quot;&lt;/code>。但是过了会儿突然想起来我使用的&lt;code>babel-loader&lt;/code>编译的，所以写在&lt;code>tsconfig.json&lt;/code>里其实并没有什么卵用&amp;hellip;&lt;/p>
&lt;p>所以应该修改&lt;code>babel.config.js&lt;/code>的&lt;code>module.exports&lt;/code>，添加以下属性：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="nx">module&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">exports&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="s2">&amp;#34;presets&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="c1">// ...
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="s2">&amp;#34;@babel/preset-react&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// ...
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="s2">&amp;#34;runtime&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;automatic&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>不过单单这么改还是会报错，这是因为 ESLint 的缘故，实际上代码是可以正常编译的。不过 ESLint 总是报错看着很不爽呀，说实话我都想把它给卸载了。但是转念又想到将来团队协作肯定是要用到的，只好再硬着头皮继续写了。&lt;/p>
&lt;p>修改 ESLint 配置文件：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="p">{&lt;/span>
&lt;span class="c1">// ...
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="s2">&amp;#34;rules&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// ...
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="s2">&amp;#34;react/jsx-uses-react&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;off&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;react/react-in-jsx-scope&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;off&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>