<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Lomirus' Site</title><link>https://lomirus.github.io/post/</link><description>Recent content in Posts on Lomirus' Site</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 26 Aug 2021 00:00:00 +0800</lastBuildDate><atom:link href="https://lomirus.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>《只狼：影逝二度》名场面日语台词听写练习</title><link>https://lomirus.github.io/p/sekiro-dictation/</link><pubDate>Thu, 26 Aug 2021 00:00:00 +0800</pubDate><guid>https://lomirus.github.io/p/sekiro-dictation/</guid><description>零 做这个感觉就是我单纯中二病犯了，暑假作业还没写完呢，就来整这个。不过作业毕竟也写不下去，写代码吧也是写不下去，感觉最近几天实在是太颓了。害~
永真 - 出场 忍びよ、目覚めて下さい。貴方の、主の為に。
弦一郎 - 芦苇原 久しな、御子よ。（おじゅうん？）の（ぼうぜん？）以来か。
久しいな、御子よ。叔父上（おじじょう）の墓前（ぼぜん）以来か。
久し 作为形容词少了个 い，此处应为 久しいな，无论是从长音还是语法上原来听的都不算对&amp;hellip;
另外有两个生词，叔父上（おじじょう）和墓前（ぼぜん）
弦一郎旦那。あたしはっ。済まぬ。
弦一郎殿。あたしは。済まぬ。
旦那（だんな） 与 殿（どの） 均有表示XX大人的意思，此处应用 殿（どの）
御任せよ。
御任せを。
这里在语法上确实有些区别，不过在句意的理解上没啥影响。
邪魔だってするか、御子のしのびよ。
邪魔立てするか、御子のしのびよ。
んっなれ、😵
お、のれ、😵
ん？🤨
は！😏
忍びよ、（ヒキ？）事は（ユウマイ？）な。御子は貰って行くぞ。
忍びよ、卑怯（ひきょう）とは言うまいな。御子は貰って行くぞ。
弦一郎 - 天守阁 御爺様の（ごうゆうす？）はどうだ。
御祖父様のご様子（ようす）はどうだ。
日语里同音词这个设定真的离谱。
一心様は、命を保って（ウラレル？）のは、不思議の事です。
一心様は、命を保っておられるのは、不思議のほどです。
おられる 是 居る（おる） 的敬语形式
そうか。</description></item><item><title>Some Impressions (2021-08)</title><link>https://lomirus.github.io/p/2021-08/</link><pubDate>Thu, 05 Aug 2021 18:25:17 +0800</pubDate><guid>https://lomirus.github.io/p/2021-08/</guid><description>一 自上次期中总结过去也差不多两个月了，期末考试也已经过去了一个月，按说我早该动手这篇文章了，但实际上却迟迟没有动笔。这并不是说我没有时间如何如何，只是我变的愈发懒散了，于是乎便少了份写博客的动力。
回忆起我之前每次写博客，无非是想去说什么什么，却无处施展，于是便到自己的博客上胡绉。既然如此，那每次博文的开头便少不了牢骚抱怨。每当自己去浏览自己的旧文，便发觉自己只是一个丧丧的駄目人間，不免心生愧意：将自己如此劣质的文字公诸网路，实属制造垃圾资源。又“于是乎”地，废弃了自己的博客。而这正是我上一个博客的结局。
但是，有时候确实有些东西不吐不快。长久地将烦闷郁结在心中，绝然不能称之为一个好习惯。如此向来，将自己的博客作为自己倾吐不快的垃圾场，也算是物尽其用了。
而今天之所以动笔，也自然是因为自己心中有所郁结，不得通其道，故述往事，思来者。
二 从暑假开始计算，我们先是度过了一个毫无意义的军训。哦不对，话其实也不能这么说，因为其一，军训的存在令我厌恶，这也可以算是它的意义；其二，总有一些人居高临下，颐指气使的斥责鄙夷这那些吐槽军训的学生，这样看来，它们想必很热爱军训吧！毕竟军训也是福报不是？
军训结束，我们搬迁了宿舍，搬迁宿舍本身没啥，反正我也我待了一年的舍友也没什么感情。另外虽说是“自由组队”，却还是组合到了有至少三个陌生同学的宿舍。
然后是大约一周多的自由时间，就用来一边开发项目，一边继续学习 Vue。
最后是为期一个月的暑期培训，截至写到本文的此段时，已过五天。这五天，则一直是在忙于开发《学长学姐帮帮忙》了。
其间我的一位朋友问过我一个问题，他问，你如何判断一个开发者的能力高低？就拿前端来说，你的能力与开发多年的前端大佬有哪些区别？
这个问题确实有点把我问住了。我便凭感觉回答道，可能是对一些框架的掌握和原生API的熟练程度吧。
但是他则认为，只会用框架调接口未免太“脚本小子”了。我无法反驳，尽管实际上，大多数开发岗也无非都是做着搬砖的活。
这是他的第一次问我这个问题，后面也有第二次提问。
不过在他上次提问过后，我回去后其实也并没有进行过多的深入思考。但我还是尝试给出了与上次不同的答案。
这次我提到了一个人的知识面的广度，譬如我个人，虽说只是一名切图仔，但是在其他方面也多有涉猎，倘以我们网校的部门举例，我首先是本来就在后端待过半年，在 SRE 也学习过一段时间，开发过一些 Android Apps，甚至还尝试学习像素画（这条还是忽略吧）。我个人以为，在网校范围内，前端本身（特指大前端/全栈）可能是仅次于运维的全栈部门了。
不过这样的我其实也有一些问题：接触的挺多，深入的却很少。前端本身各种轮子层出不穷，更新迭代很快。真正喜欢前端的人，也常常痴迷于新技术。最近我在网校讲授了一节前端框架相关的课，讲到 TypeScript 时，顺口提了一下 Deno。而学员里有个同学和一勤奋蜂的前端学长聊天时提到了这个，于是勤奋蜂的那位学长便表示想和我聊一下天。那天，我们聊了许多。他也是喜欢新生技术的人。他说，他想要在 WebGL，WASM，Deno 里面的选择一个去深入学习。说来惭愧，虽然这些都早有耳闻，但却没有一个能称得上是比较深入了解的。我们网校的学姐也说过我们，喜欢新技术很好，但不要每次都是写了一个 Hello World 之后就扔一边儿了。而彼时，我也正如其所言，丢掉了刚做完一个 Hello World 的 Tarui。
三 我感觉自己似乎处在某个瓶颈期，基础知识学得都差不多了，但是每当面对浩如烟海的前端进阶内容，却不知从何学起。也许刚踏入大学时，我还算比较有优势。但是随着时间的推移，我逐渐发现自己的优势正在逐渐消逝，泯然众人。我几乎已经很难说出在某个领域能够完胜其他学员了。
但是学长却说，我们这个阶段恰好是最容易提升的时期。
仔细想想，其实好像也对，我们现在的能力，也足以支撑我们去学习新的知识、独立开发项目和参与开源社区之类的了。
正如狄更斯所言：
It was the best of times, it was the worst of times.
四 上面大部分都还是技术方面的内容，周期总结也可以算是我的 routine 了。但其实，都并非我我写这篇文章的直接原因。
直接原因也很简单，便是见到了某个人，使我回想起了某些事，以及随之而来的一系列巧合，让我再次怀疑世界的真实性。
这种感觉，估计得追溯到初中，从我的 depression 开始。
我似乎每个寒假都不会有什么好事儿，尽管坏事儿也都不一定是在寒假。
有些事我希望它能够从未发生过，例如上次。但也有些事，例如初中的某次寒假，我对它的记忆其实很模糊，因为我曾竭力试图将其忘记，它使得我第一次对世界与自身的存在的意义产生怀疑；但是现在看来，我也很庆幸我有那段经历，它也重塑了我的人生观。
但是有些事情实在过与巧合，不过也许只是我的幸存者偏差吧。我不知道这其中是否有什么深意，如果有的话，希望结局是一个 Good Ending.
五 前几天我妈微信给我打了个电话，当时我没空，没来得及接。不过实际上，我爸妈大多数给我打的电话也都是些嘘寒问暖的话语，即使有空我也是不太愿意接的；但要是不接的话，我爸妈肯定也会不太开心的，所以一般都会回一下。这次也是，待到几天之后我有了空，我便回了一个电话。我妈在电话里说，之前之所以给我打电话，是因为我姥爷生病住院了，想让我和姥爷说说话、聊聊天之类的；不过现在已经出院了，无大碍。
结果昨天（八月七日）晚上又给我打了个电话，自然还是少不了问一些像是“今晚饭吃了什么”这种我始终无法理解的毫无意义的话语。后面瞎侃谈到了我姥爷，我妈便吐槽我说之前谈到我姥爷生病时，我也不问问到底他是得了什么病。我便反驳说问了又能如何。
她说，倒也确实，不过不知道我寒假回来的时候还能不能见着我姥爷。</description></item><item><title>Customize the Manjaro with Gnome</title><link>https://lomirus.github.io/p/customize-manjaro/</link><pubDate>Tue, 20 Jul 2021 00:00:00 +0800</pubDate><guid>https://lomirus.github.io/p/customize-manjaro/</guid><description>When I started to write the article, I haven&amp;rsquo;t install the Chinese Input Method, and therefore I just completed it in English.
Foreword I&amp;rsquo;ve used Windows OS for a long time. I can still remember that when I was at the junior high school student, it&amp;rsquo;s 2015. I was still a fan to Microsoft at that time, and it&amp;rsquo;s also that year, that the Windows 10 was released. I was so excited but I didn&amp;rsquo;t have a PC then that could reach the lowest requirement of Windows 10.</description></item><item><title>WSL 2 入门使用与踩坑记录</title><link>https://lomirus.github.io/p/wsl2/</link><pubDate>Fri, 28 May 2021 00:00:00 +0800</pubDate><guid>https://lomirus.github.io/p/wsl2/</guid><description>起因 最近我用 rust 写了个 shogi game. 考虑到性能优化及用户体验，控制台采用 raw mode 进行渲染。结果发现兼容性不是很好，在各种 shell/terminal 上表现不尽相同。而在字体渲染上，有一说一，除了 Windows Terminal 其余的都是辣鸡。
我（之前）平常最常用的 shell 是 Git Bash，但是正如前文所言，界面着实拉跨；而使用 Windows Terminal 打开 Git Bash 时，按退格键时又会出现闪烁现象。最终忍无可忍，于是把这些 bash/shell 全都拉出来批判一番：
CMD: 费拉不堪 Powershell：费拉不堪 Gitbash: 费拉不堪 由于 Windows 上的 shell 人均费拉不堪，所以问了一位后端朋(dà)友(lǎo)有没有什么推荐：
2FXjHS.jpg
结果发现人家对 shell 根本就不像我这么挑剔😂，不过也可能确实是受方向影响。因为毕竟后端首先在 Windows 方面上有成熟的 Goland IDE，确实一般情况下用不到控制台，用到终端的话一般就都是在服务器上了，而服务器则一般都是用的 Linux，所以通常没啥顾虑。而我等苦逼前端菜鸡还是要经常和各种 CLI 打交道的，所以最好还是去找一款优秀的终端软件。
然后最终选定了 WSL 2 + Windows Terminal + VSCode.
安装 如果 Windows 10 OS Version 大于 20262，可通过 wsl --install 安装。</description></item><item><title>Vue &amp; Vite 项目搭建入门</title><link>https://lomirus.github.io/p/vue-vite-start/</link><pubDate>Sat, 22 May 2021 18:25:17 +0800</pubDate><guid>https://lomirus.github.io/p/vue-vite-start/</guid><description>学习 Vue 与 Vite 项目搭建的踩坑记录 Vue 2.0 + Webpack Installation 虽然 Vue 的最新版已经是 3.0，而且 Vite 也似乎是大势所趋，不过我还是选择了先从 Vue 2.0 + Webpack 这种比较传统的方式开始学习。主要是因为这几个方面：
现在仍有许多项目没有从 Vue 2.0 迁移到 3.0，使用 Vue 2.0 进行开发在实际生产中还是比较常见的，所以以后还可能会用到 2.0； Vue 2.0 的资料相对比较多，踩坑时更容易查到资料； 学习 2.0 之后再学习 3.0，会对 3.0 的改进有更深的体会，比如能够切身体会到 Vue 3.0 为什么这么那么设计、这样设计有什么好处、它解决了哪些痛处与弊端等； 入门曲线相对平缓。 好了，前言就先讲到这里，接下来进入正题。
首先创建项目：
$ mkdir vue-learning $ cd vue-learning $ npm init -y 接着安装相关库：
$ npm install -D webpack webpack-cli webpack-dev-server html-webpack-plugin $ npm install vue 创建相关文件，创建后的目录结构：</description></item><item><title>大一第二学期中期总结与反思 (2021-05)</title><link>https://lomirus.github.io/p/2021-05/</link><pubDate>Sun, 09 May 2021 01:00:00 +0800</pubDate><guid>https://lomirus.github.io/p/2021-05/</guid><description>前言 虽然说是期中总结，不过奈何拖延症又犯了，于是就又拖了两天（），于是乎就这么拖过了期中考试😅。眼看再没两个月估计就又得期末考试了，再拖下去连标题都得改，所以总算决定开始动笔了。
我这半学期学了什么 寒假的时候我一直在写考核作业。但有一说一，虽说我肝得挺厉害（至少自我感觉是），但实际上我感觉我并没学到什么太多的新东西。当然，倒不是说一点也没有，只是感觉太少了。
寒假的时候一直想学下 Webpack 和 React 的相关知识，但苦于没时间，而到了开学之后反倒是有时间了（离谱）。于是乎我便先学习了这两个比较基础且常用的。我之所以将首选框架选为 React 而不是 Vue，主要是因为我跨平台开发框架很感兴趣，而 Flutter 对我这个前端还算比较比较遥远，因此考虑到 React Native 就先学了 React。
counter-trainer-deprecated 我第一有关 React 的项目是 counter-trainer （现在更名为 counter-trainer-deprecated），里面还顺便用到了 Less。这个项目算我前端工程化的开荒，更多的还是为了练习。开发初期的规划是想通过自适应以兼容各种分辨率，结果发现远比自己想象的复杂，加之当时对于组件间通信不甚熟悉，以及审美堪忧，最终导致代码堆成屎山，因此终止了开发。
counter-trainer 紧接着不久我就开始了第二个项目，同时也是前者的续作，也叫做 counter-trainer。吸取了上一次的教训，这次只针对了移动平台进行适配，因此我选择了使用 React Native 进行开发。我从这这个项目中学习到的主要有这么几方面：
学习了 Redux，了解了组件间通信、生命周期、Context、Fragment 等相对进阶的内容； 开发的复杂程度不断增加，迫使我去寻找已有的库而不是重复造轮子，而在这个过程中我不得不去直接阅读一些框架的官方英文文档、去 Issues 里寻找 bugs 的解决方案。在此之前我顶多会使用像 Redux，Babel 这种近乎 Official 性质的库，对于那些小众的库还是有些抵触的，不过最后，相比于自己从头开发，直接 import 还是让我直呼真香。比如随便举几个这次用到的一些库：react-navigation, react-native-tts 等等，像其中的 tts 这种库，就绝不是现在的我能够徒手撸出来的，所以我也学会了不要去造一些没有必要的轮子。 （复习了 Android 开发？（继上一次的 Kotlin 计算器）） （直接读英文文档进一步提升了英文水准？） （了解了语义化版本？） sekiro-symbols-generator 这个项目应该是我最近的项目中完成度最高，也是唯一没有弃坑且最终按照原计划圆满完成了的。最终代码量约1000行。下面说一下我从这个项目中学到的东西（或者是这个项目的一些 features）：
React Hooks：该项目全部使用函数式组件；同时在组件间通信方案的选择上废弃了 Redux ，改为了使用 React 原生 hooks； Typescript：该项目全部使用 Typescript； ESlint：该项目使用了 ESlint（这个好像不算什么亮点）； CSS in JS：该项目没有采取传统的 Less or SASS/SCSS，而是选择了 css in js 的方案。并且在经过了多方权衡之后，最终决定了采用 emotion 作为样式框架 Webpack：打包时的一些优化，如 source-map, code splitting； Github Actions：自己写了个脚本自动部署并发布网站； Other: 如 React automatic runtime, Forwarding Refs,.</description></item><item><title>Writing Blogs in Github Issues</title><link>https://lomirus.github.io/p/start-writing-blogs/</link><pubDate>Sun, 09 May 2021 00:00:00 +0800</pubDate><guid>https://lomirus.github.io/p/start-writing-blogs/</guid><description>我写前端至今也已有五六年了，不过这数字其实很水，前五年的大部分时间也都并没有将主要精力放在开发上，不过自己好歹也多多少少做过地做过一些项目。我第一个大型（或许？）前端项目就是一个简单的网站，有留言，还有井字棋什么的几个小游戏。再后来学过后端后，我又用 Golang 做后端，原生 JS 做前端，徒手撸了一个博客。
我向来是没有什么写博客的习惯的，因为感觉其枯燥且无用。上次写博客主要是因为隔壁运维作业要求搭建一个博客，而我又懒得学习什么 Hexo, Wordpress 这类东西，所以就自己先简单写了一个原型，后续又不断完善，时而不时水几篇文章，然后就有了这个博客。
不过现在这个博客已经被废弃了，一是因为博客源码太烂，二是因为文章太水，所以不愿再维护了。
但是我时而又萌生了继续写点博客的想法，然而正如杜拉斯在《情人》的开头所言，“我已经老了”（无端？），所以我也已经不太想折腾了。网上搜资料时发现有的人直接拿 Github Issues 来写博客，想了想也确实挺符合我的需求：支持 Markdown， 可编辑，可评论，而且现在据说也可以限制他人在自己仓库里乱发 issue 了，所以我就决定选择 Github Issues 作为我的新的博客平台了。不过日后倘若又要迁居，那也是后话了。
为防止自己继续写一些水文来占版面，所以这次可能更新频率会降低。不过有时可能受外力影响要求比如每周上交至少一篇博文，emmm，以后再具体看情况办吧。
先写到这。</description></item><item><title>TypeScript &amp; Webpack &amp; Babel &amp; Eslint &amp; React: Not Such a Beautiful Marriage</title><link>https://lomirus.github.io/p/not-such-a-beautiful-marriage/</link><pubDate>Wed, 14 Apr 2021 00:00:00 +0800</pubDate><guid>https://lomirus.github.io/p/not-such-a-beautiful-marriage/</guid><description>好吧，我承认我有点标题党，主要是因为我最近被这几个工具折腾的不轻，所以想吐槽一下。（顺带一提，标题抄袭引用改编自著名博文TypeScript with Babel: A Beautiful Marriage）
Origin 看了下 cqupt-help-mp 的源码，发现里面用了许多库。感觉自己对这些工具还不太熟练，所以想先趁机练习一下。
对于题目中的五个工具，除去 ESlint之外，其实其他的都多多少少用过一段时间。特别是 Webpack Babel React 这三个，用的时间也算是比较久了。TypeScript 倒是用过，但是感觉 JS 加上类型限制后写起来就不那么自由了，所以尝试用它写了一个模块之后就将它卸载了。但是这些这个工具终究还是太常用，早晚逃不了还是得学，所以就试着用它们做个简单的小项目练练手。毕竟当初我学 Webpack 时也是学得很憋屈，一直不知道这玩意儿打个包为啥还非得用 js 文件做入口，直到后来学了 React 才豁然开朗，所以我至今认为如果是要做跑在浏览器的网页而且不用什么框架的话 Webpack 还真没什么卵用。当然，有了之后自然用处就大了。
不过说了这么多好像有点跑题，先回到正题：让我们来讨论一下究竟怎么把这五个架子给支楞到一块儿去。
Introductions of the packages 这种东西还用得着在这介绍？官网文档，维基百科，请~
TSC or Babel, it&amp;rsquo;s a question. 老实说，单是在两个之间进行选择就够让我想半天了。但是实际上，摆在我面前的包括但不限于：ts-loader,awesome-typescript-loader, babel-loader等一堆loaders/packages。而且由于我开始参考了过时的中文文档，所以先下载了awesome-typescript-loader，后来才意识到被坑（😅）。而在剩余的两者之间，参考TypeScript with Babel: A Beautiful Marriage后，决定选择了后者。
安装好之后，我又顺着我的思路捋了一遍，发现整个过程中编译是babel做的，根本没用到typescript什么事儿呀。我于是就想，把它卸载之后会怎么样呢？接着神奇的现象发生了，我卸载了typescipt，删除了它的配置文件tsconfig.json，结果发现我的用typescript写的项目居然还能正常编译并运行（谢谢有被震惊到）。我就想既然如此那我还用ts干啥呀，赶紧卸了得了，可别再让我见着你了（😅）。
Anti-human ESLint 听说 ESLint 可以用在团队协作中来保证代码风格的一致性？好，名单赶紧安排上，加急。
安装过程中被问了几个问题，回答之后他给我推荐了几个插件。行，听您的。选择 YES，进行安装。看起来一切顺利，然后&amp;hellip;果不其然，报错了。报啥呢：
Oops! Something went wrong! :(
ESLint: 7.24.0
Error: An error occurred while generating your JavaScript config file.</description></item><item><title>Fiction: Upon the Mere</title><link>https://lomirus.github.io/p/upon-the-mere/</link><pubDate>Wed, 31 Mar 2021 18:25:17 +0800</pubDate><guid>https://lomirus.github.io/p/upon-the-mere/</guid><description>This is a fiction that was written as my assignment of the Comprehensive English during my freshman in CQUPT. The bold fonts here are used to mark the new words of this semester as my teacher requested. Upon the Mere It&amp;rsquo;s a long dream, I&amp;rsquo;ve had, for the whole night, at the cramped cabin, in a village, my old home, from dusk to dawn. It&amp;rsquo;s a quiet place, reeds growing around it and a river soaked the nearby earth.</description></item></channel></rss>