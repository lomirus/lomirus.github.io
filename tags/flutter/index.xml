<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Flutter on Lomirus' Site</title><link>https://lomirus.github.io/tags/flutter/</link><description>Recent content in Flutter on Lomirus' Site</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 19 Oct 2021 15:30:00 +0800</lastBuildDate><atom:link href="https://lomirus.github.io/tags/flutter/index.xml" rel="self" type="application/rss+xml"/><item><title>与 Flutter 的初次接触（以及开发 Hall of Fame 的踩坑记录）</title><link>https://lomirus.github.io/p/first-meet-to-flutter/</link><pubDate>Tue, 19 Oct 2021 15:30:00 +0800</pubDate><guid>https://lomirus.github.io/p/first-meet-to-flutter/</guid><description>&lt;img src="https://lomirus.github.io/p/first-meet-to-flutter/cover.png" alt="Featured image of post 与 Flutter 的初次接触（以及开发 Hall of Fame 的踩坑记录）" />&lt;h2 id="前言">前言&lt;/h2>
&lt;p>首先简要介绍一下 &lt;code>Hall of Fame&lt;/code> 吧，这其实就只是我自己开发的一个用于管理、分发我的一些朋友们的聊天记录截图表情包的 App。本来是想着和朋友合作，自己只负责后端开发来着，然而负责 Android 和 Web 客户端开发的那边一直还有其他需求，导致这边的工期一直在鸽。到了后面，我就接手的这个项目的客户端方面的开发，然而上面的其实并不是主要原因。主要还是因为最近我对 Flutter 这种大前端的技术栈比较感兴趣，想要学习一下。而且这个 App 的复杂度又恰到好处，因此就正好使用它来练手了。&lt;/p>
&lt;p>总的来说，Flutter 的上手难度在我个人角度看来还算是比较简单的。从从未接触过 Flutter，到独立开发出一个相对完整的 App，中间也不过只有两周左右。另外从一名 Web 前端开发者的视角来看，使用 Flutter 开发界面的难度还是要相对高于传统的 Web 开发的，尤其是在自定义方面，一旦写起样式来各种嵌套又要写一堆了&amp;hellip;但是 Google 默认提供的 Material Design UI 库对于没有视觉要求的指定风格的情况来说还是蛮够用的；另外官方也提供了一套 iOS 风格的 Cupertino UI 库，但是我还没有尝试过这个，不知道实际体验效果如何。至少就此来看，使用 Flutter 来进行一款跨端的小品类应用开发确实是一项不错的选择。至于大型项目，虽然 Flutter 版本已经迭代到了 2.5+，但是相对于其他已经发展了数年的 Native/Web 开发方案来说，还不能说是特别成熟。就比如我在下文中提到的一些坑，至今官方还没有提供相应的瀑布流库。闲鱼对此选择的路线则是自研，不过我种初学者自然是没有人家这种专业团队的实力，于是只能乖乖的在社区里找一些开源库先用着。&lt;/p>
&lt;p>至于性能方面，就我的 Hall of Fame 而言，采用 Release 模式下在 Android 平台上是几乎感受不到与 Native App 的差距的，包括我的做 Android 开发的朋友对此也是赞叹有加。另外说来离谱，在 Linux 环境下，用 C++ 编译成原生 Linux 二进制的可执行程序的动画性能，是肉眼可见地低于在 Linux 平台下 Chrome 上的性能的。Linux 原生程序运行时可以明显的看到掉帧，而在 Windows 和 Chrome 上则比较流畅。&lt;/p>
&lt;p>下面贴下这个项目的 Github 地址：&lt;a class="link" href="https://github.com/hall-of-fame/hof-flutter-md" target="_blank" rel="noopener"
>https://github.com/hall-of-fame/hof-flutter-md&lt;/a>，以及首屏图：&lt;/p>
&lt;p>&lt;img src="https://lomirus.github.io/p/first-meet-to-flutter/screenshot.jpeg"
width="1080"
height="2400"
srcset="https://lomirus.github.io/p/first-meet-to-flutter/screenshot_hu4c394e80cc29ab44829d2e73678e69e3_1461556_480x0_resize_q75_box.jpeg 480w, https://lomirus.github.io/p/first-meet-to-flutter/screenshot_hu4c394e80cc29ab44829d2e73678e69e3_1461556_1024x0_resize_q75_box.jpeg 1024w"
loading="lazy"
alt="展示图"
class="gallery-image"
data-flex-grow="45"
data-flex-basis="108px"
>&lt;/p>
&lt;p>下面则是讲一下我在使用 Flutter 进行开发的过程中遇到的一些问题：&lt;/p>
&lt;h2 id="导航栏标签页-keep-alive">导航栏标签页 keep-alive&lt;/h2>
&lt;h3 id="一般的标签页切换">一般的标签页切换&lt;/h3>
&lt;p>在 Flutter 中，如果我们想通过 BottomNavigationBar 实现一个简单的标签页切换功能，可以在官方文档对于
&lt;code>BottomNavigationBar class&lt;/code> 的介绍看到一些简单示例。这里我们以之为基础，再次对其进行简化，可以得到下面一个只有 32 行的简单结构：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-dart" data-lang="dart">&lt;span class="kd">class&lt;/span> &lt;span class="nc">MyStatefulWidget&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">StatefulWidget&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">const&lt;/span> &lt;span class="n">MyStatefulWidget&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="n">Key&lt;/span>&lt;span class="o">?&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">})&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">super&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nl">key:&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">State&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">MyStatefulWidget&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">createState&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="n">_MyStatefulWidgetState&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">class&lt;/span> &lt;span class="nc">_MyStatefulWidgetState&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">State&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">MyStatefulWidget&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">_selectedIndex&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kd">static&lt;/span> &lt;span class="kd">const&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Widget&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">_widgetOptions&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Widget&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">[&lt;/span>
&lt;span class="n">Text&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Index 0: Home&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="n">Text&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Index 1: Settings&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="p">];&lt;/span>
&lt;span class="n">Widget&lt;/span> &lt;span class="n">build&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">BuildContext&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Scaffold&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nl">body:&lt;/span> &lt;span class="n">Center&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nl">child:&lt;/span> &lt;span class="n">_widgetOptions&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">elementAt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">_selectedIndex&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="nl">bottomNavigationBar:&lt;/span> &lt;span class="n">BottomNavigationBar&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nl">items:&lt;/span> &lt;span class="kd">const&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">BottomNavigationBarItem&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">[&lt;/span>
&lt;span class="n">BottomNavigationBarItem&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nl">icon:&lt;/span> &lt;span class="n">Icon&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Icons&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">home&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nl">label:&lt;/span> &lt;span class="s1">&amp;#39;Home&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">),&lt;/span>
&lt;span class="n">BottomNavigationBarItem&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nl">icon:&lt;/span> &lt;span class="n">Icon&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Icons&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">settings&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nl">label:&lt;/span> &lt;span class="s1">&amp;#39;Settings&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">),&lt;/span>
&lt;span class="p">],&lt;/span>
&lt;span class="nl">currentIndex:&lt;/span> &lt;span class="n">_selectedIndex&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nl">onTap:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">index&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="n">setState&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="n">_selectedIndex&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">index&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="p">),&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="问题引入无法保存组件状态">问题引入：无法保存组件状态&lt;/h3>
&lt;p>事实上，对于上文中的&lt;a class="link" href="#%e6%9c%80%e5%b0%8f%e6%a0%b7%e4%be%8b" >最小样例&lt;/a>，这么写是完全没有问题的。但是随着软件功能的复杂化，一些问题可能就会暴露出来。比如，我们将上文中的 &lt;code>Text&lt;/code>
组件换为 &lt;code>TextField&lt;/code> 标签试一下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-dart" data-lang="dart">&lt;span class="kd">class&lt;/span> &lt;span class="nc">MyStatefulWidget&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">StatefulWidget&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">const&lt;/span> &lt;span class="n">MyStatefulWidget&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="n">Key&lt;/span>&lt;span class="o">?&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">})&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">super&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nl">key:&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">State&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">MyStatefulWidget&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">createState&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="n">_MyStatefulWidgetState&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">class&lt;/span> &lt;span class="nc">_MyStatefulWidgetState&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">State&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">MyStatefulWidget&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">_selectedIndex&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kd">static&lt;/span> &lt;span class="kd">const&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Widget&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">_widgetOptions&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Widget&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">[&lt;/span>
&lt;span class="n">TextField&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;span class="n">TextField&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;span class="p">];&lt;/span>
&lt;span class="n">Widget&lt;/span> &lt;span class="n">build&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">BuildContext&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Scaffold&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nl">body:&lt;/span> &lt;span class="n">Center&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nl">child:&lt;/span> &lt;span class="n">_widgetOptions&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">elementAt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">_selectedIndex&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;span class="nl">bottomNavigationBar:&lt;/span> &lt;span class="n">BottomNavigationBar&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nl">items:&lt;/span> &lt;span class="kd">const&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">BottomNavigationBarItem&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">[&lt;/span>
&lt;span class="n">BottomNavigationBarItem&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nl">icon:&lt;/span> &lt;span class="n">Icon&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Icons&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">home&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nl">label:&lt;/span> &lt;span class="s1">&amp;#39;Home&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">),&lt;/span>
&lt;span class="n">BottomNavigationBarItem&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nl">icon:&lt;/span> &lt;span class="n">Icon&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Icons&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">settings&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nl">label:&lt;/span> &lt;span class="s1">&amp;#39;Settings&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">),&lt;/span>
&lt;span class="p">],&lt;/span>
&lt;span class="nl">currentIndex:&lt;/span> &lt;span class="n">_selectedIndex&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nl">onTap:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">index&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="n">setState&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="n">_selectedIndex&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">index&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="p">),&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果你试着跑了一下上文的代码，你会发现代码依旧可以通过编译，也可以正常运行。但是如果你在其中一个 &lt;code>TextField&lt;/code>
输入了一段文字，然后点击底部导航栏切换到了另一个标签页，然后再切换回来，你会发现你之前在 &lt;code>TextField&lt;/code> 的内容已经被清空掉了。&lt;/p>
&lt;p>这是因为，当你切换到另一个标签页时，Flutter 会将原先的标签页的组件给销毁掉，并创建一个新的你所选择的标签页（或者说是组件）。当你返回原来的页面时，也会执行一遍同样的操作，这时，这个页面已经不是原来的那个页面了。&lt;/p>
&lt;p>如果我们使用是的 React (Native) 或者是 Vue，我们可以简单地通过 &lt;code>&amp;lt;keep-alive&amp;gt;&lt;/code> 标签达到状态保存的目的，但是 Flutter 似乎就没有这么方便了😥。&lt;/p>
&lt;h3 id="解决方案automatic-keep-alive-client-mixin">解决方案：Automatic Keep Alive Client Mixin&lt;/h3>
&lt;p>于是然后我在 Google, StackOverflow, Github 上的一番求索，最终所找到的解决方案，都还是不太完善，比如可能会触发组件多次不必要的重新渲染，使用 Stack &amp;amp; Opacity 隐藏组件导致性能问题等等。最后，反而是在俄语课课间休息摸鱼时在知乎上找到了一个&lt;a class="link" href="https://zhuanlan.zhihu.com/p/61458683" target="_blank" rel="noopener"
>解决方案&lt;/a>。&lt;/p>
&lt;p>这个方案使用的是 &lt;code>AutomaticKeepAliveClientMixin&lt;/code>，按照它的方法，对上文中的示例代码进行修改后可得：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-dart" data-lang="dart">&lt;span class="kd">class&lt;/span> &lt;span class="nc">RootScreen&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">StatefulWidget&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">_RootScreenState&lt;/span> &lt;span class="n">createState&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="n">_RootScreenState&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">class&lt;/span> &lt;span class="nc">_RootScreenState&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">State&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">RootScreen&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">PageController&lt;/span> &lt;span class="n">_pageController&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">PageController&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">_pageIndex&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">Widget&lt;/span> &lt;span class="n">build&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">BuildContext&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Scaffold&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nl">body:&lt;/span> &lt;span class="n">PageView&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nl">children:&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Widget&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">[&lt;/span>
&lt;span class="n">HomeScreen&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;span class="n">SettingsScreen&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;span class="p">],&lt;/span>
&lt;span class="nl">controller:&lt;/span> &lt;span class="n">_pageController&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nl">onPageChanged:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="n">setState&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="n">_pageIndex&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">index&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="p">),&lt;/span>
&lt;span class="nl">bottomNavigationBar:&lt;/span> &lt;span class="n">BottomNavigator&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nl">selectTab:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="n">_pageController&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">jumpToPage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nl">selectedIndex:&lt;/span> &lt;span class="n">_pageIndex&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">),&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>以其中的 &lt;code>HomeScreen&lt;/code> 为例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-dart" data-lang="dart">&lt;span class="kd">class&lt;/span> &lt;span class="nc">HomeScreen&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">StatefulWidget&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">_HomeScreenState&lt;/span> &lt;span class="n">createState&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="n">_HomeScreenState&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">class&lt;/span> &lt;span class="nc">_HomeScreenState&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">State&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">HomeScreen&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="kd">with&lt;/span> &lt;span class="n">AutomaticKeepAliveClientMixin&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">bool&lt;/span> &lt;span class="kd">get&lt;/span> &lt;span class="n">wantKeepAlive&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">Widget&lt;/span> &lt;span class="n">build&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">BuildContext&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">super&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">build&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Center&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nl">child:&lt;/span> &lt;span class="n">Text&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Home&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>即可。&lt;/p>
&lt;p>Ref:
&lt;a class="link" href="https://medium.com/coding-with-flutter/flutter-case-study-multiple-navigators-with-bottomnavigationbar-90eb6caa6dbf" target="_blank" rel="noopener"
>Flutter Case Study: Multiple Navigators with BottomNavigationBar&lt;/a>&lt;/p>
&lt;h2 id="瀑布流展示">瀑布流展示&lt;/h2>
&lt;h3 id="scrollable-view-嵌套">Scrollable View 嵌套&lt;/h3>
&lt;p>当我们尝试在可滚动 View（如ListView/GridView ）中的 children 中嵌套可滚动 View 时，会出现以下报错：&lt;/p>
&lt;pre>&lt;code>════════ Exception caught by rendering library ═════════════════════════════════
The following assertion was thrown during performResize():
Vertical viewport was given unbounded height.
Viewports expand in the scrolling direction to fill their container. In this case, a vertical viewport was given an unlimited amount of vertical space in which to expand. This situation typically happens when a scrollable widget is nested inside another scrollable widget.
If this widget is always nested in a scrollable widget there is no need to use a viewport because there will always be enough vertical space for the children. In this case, consider using a Column instead. Otherwise, consider using the &amp;quot;shrinkWrap&amp;quot; property (or a ShrinkWrappingViewport) to size the height of the viewport to the sum of the heights of its children.
&lt;/code>&lt;/pre>&lt;p>这时我们在内层的 View 中可以插入 &lt;code>shrinkWrap: true&lt;/code>，即可解决报错。但是此时这个 View 将会无法滚动，我们可以继续在后面插入：
&lt;code>physics: NeverScrollableScrollPhysics()&lt;/code>，即可完美解决以上问题。&lt;/p>
&lt;h3 id="flutter_staggered_grid_view-库的简单使用">flutter_staggered_grid_view 库的简单使用&lt;/h3>
&lt;p>&lt;a class="link" href="https://pub.dev/packages/flutter_staggered_grid_view" target="_blank" rel="noopener"
>flutter_staggered_grid_view&lt;/a> 是一个可以便捷实现瀑布流布局的 Flutter 库。一般地，要想使用它，我们需要首先导入：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="c">### file: pubspec.yaml&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">dependencies&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">// ...&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">flutter_staggered_grid_view&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">^0.4.1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-dart" data-lang="dart">&lt;span class="c1">/// file: your_widget.dart
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="k">import&lt;/span> &lt;span class="s1">&amp;#39;package:flutter_staggered_grid_view/flutter_staggered_grid_view.dart&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>由于官方文档比较残缺，所以这里简要记录一下对于“内部组件宽度相同、数量不定的纵向瀑布流”的实现：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-dart" data-lang="dart">&lt;span class="k">return&lt;/span> &lt;span class="n">ListView&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="nl">padding:&lt;/span> &lt;span class="n">EdgeInsets&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">all&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">20&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nl">children:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="c1">// 此处省略部分固定且无关的组件...
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">StaggeredGridView&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">countBuilder&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="c1">// 横向分两个“比例”
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nl">crossAxisCount:&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="c1">// 防止嵌套 Scrollable View 导致报错
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nl">physics:&lt;/span> &lt;span class="n">NeverScrollableScrollPhysics&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;span class="c1">// 防止本例中的 ListView 无法滚动
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nl">shrinkWrap:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="c1">// 样式相关
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nl">mainAxisSpacing:&lt;/span> &lt;span class="m">4.0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nl">crossAxisSpacing:&lt;/span> &lt;span class="m">4.0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="c1">// 组件的数量，不填会一直调用 itemBuilder 并不断抛出异常
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nl">itemCount:&lt;/span> &lt;span class="n">filtedStickers&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="c1">// 对于给定的 index，返回对应组件实例
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nl">itemBuilder:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">index&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span>
&lt;span class="n">StickerCard&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">filtedStickers&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">]),&lt;/span>
&lt;span class="c1">// 对于给定的 index，返回对应组件的宽度占比（相对于 crossAxisCount）
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nl">staggeredTileBuilder:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="kd">const&lt;/span> &lt;span class="n">StaggeredTile&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">fit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="p">),&lt;/span>
&lt;span class="p">],&lt;/span>
&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>